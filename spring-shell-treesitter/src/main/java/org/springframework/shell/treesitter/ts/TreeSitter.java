// Generated by jextract

package org.springframework.shell.treesitter.ts;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class TreeSitter {

    TreeSitter() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.loaderLookup()
            .or(Linker.nativeLinker().defaultLookup());

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));
    public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG;
    private static final int _FEATURES_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _FEATURES_H 1
     * }
     */
    public static int _FEATURES_H() {
        return _FEATURES_H;
    }
    private static final int _DEFAULT_SOURCE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _DEFAULT_SOURCE 1
     * }
     */
    public static int _DEFAULT_SOURCE() {
        return _DEFAULT_SOURCE;
    }
    private static final int __GLIBC_USE_ISOC2X = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_ISOC2X 0
     * }
     */
    public static int __GLIBC_USE_ISOC2X() {
        return __GLIBC_USE_ISOC2X;
    }
    private static final int __USE_ISOC11 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_ISOC11 1
     * }
     */
    public static int __USE_ISOC11() {
        return __USE_ISOC11;
    }
    private static final int __USE_ISOC99 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_ISOC99 1
     * }
     */
    public static int __USE_ISOC99() {
        return __USE_ISOC99;
    }
    private static final int __USE_ISOC95 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_ISOC95 1
     * }
     */
    public static int __USE_ISOC95() {
        return __USE_ISOC95;
    }
    private static final int __USE_POSIX_IMPLICITLY = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX_IMPLICITLY 1
     * }
     */
    public static int __USE_POSIX_IMPLICITLY() {
        return __USE_POSIX_IMPLICITLY;
    }
    private static final int _POSIX_SOURCE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_SOURCE 1
     * }
     */
    public static int _POSIX_SOURCE() {
        return _POSIX_SOURCE;
    }
    private static final int __USE_POSIX = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX 1
     * }
     */
    public static int __USE_POSIX() {
        return __USE_POSIX;
    }
    private static final int __USE_POSIX2 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX2 1
     * }
     */
    public static int __USE_POSIX2() {
        return __USE_POSIX2;
    }
    private static final int __USE_POSIX199309 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX199309 1
     * }
     */
    public static int __USE_POSIX199309() {
        return __USE_POSIX199309;
    }
    private static final int __USE_POSIX199506 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX199506 1
     * }
     */
    public static int __USE_POSIX199506() {
        return __USE_POSIX199506;
    }
    private static final int __USE_XOPEN2K = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_XOPEN2K 1
     * }
     */
    public static int __USE_XOPEN2K() {
        return __USE_XOPEN2K;
    }
    private static final int __USE_XOPEN2K8 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_XOPEN2K8 1
     * }
     */
    public static int __USE_XOPEN2K8() {
        return __USE_XOPEN2K8;
    }
    private static final int _ATFILE_SOURCE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _ATFILE_SOURCE 1
     * }
     */
    public static int _ATFILE_SOURCE() {
        return _ATFILE_SOURCE;
    }
    private static final int __WORDSIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __WORDSIZE 64
     * }
     */
    public static int __WORDSIZE() {
        return __WORDSIZE;
    }
    private static final int __WORDSIZE_TIME64_COMPAT32 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __WORDSIZE_TIME64_COMPAT32 1
     * }
     */
    public static int __WORDSIZE_TIME64_COMPAT32() {
        return __WORDSIZE_TIME64_COMPAT32;
    }
    private static final int __SYSCALL_WORDSIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __SYSCALL_WORDSIZE 64
     * }
     */
    public static int __SYSCALL_WORDSIZE() {
        return __SYSCALL_WORDSIZE;
    }
    private static final int __USE_MISC = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_MISC 1
     * }
     */
    public static int __USE_MISC() {
        return __USE_MISC;
    }
    private static final int __USE_ATFILE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_ATFILE 1
     * }
     */
    public static int __USE_ATFILE() {
        return __USE_ATFILE;
    }
    private static final int __USE_FORTIFY_LEVEL = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __USE_FORTIFY_LEVEL 0
     * }
     */
    public static int __USE_FORTIFY_LEVEL() {
        return __USE_FORTIFY_LEVEL;
    }
    private static final int __GLIBC_USE_DEPRECATED_GETS = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_DEPRECATED_GETS 0
     * }
     */
    public static int __GLIBC_USE_DEPRECATED_GETS() {
        return __GLIBC_USE_DEPRECATED_GETS;
    }
    private static final int __GLIBC_USE_DEPRECATED_SCANF = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_DEPRECATED_SCANF 0
     * }
     */
    public static int __GLIBC_USE_DEPRECATED_SCANF() {
        return __GLIBC_USE_DEPRECATED_SCANF;
    }
    private static final int _STDC_PREDEF_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _STDC_PREDEF_H 1
     * }
     */
    public static int _STDC_PREDEF_H() {
        return _STDC_PREDEF_H;
    }
    private static final int __STDC_IEC_559__ = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_559__ 1
     * }
     */
    public static int __STDC_IEC_559__() {
        return __STDC_IEC_559__;
    }
    private static final int __STDC_IEC_559_COMPLEX__ = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_559_COMPLEX__ 1
     * }
     */
    public static int __STDC_IEC_559_COMPLEX__() {
        return __STDC_IEC_559_COMPLEX__;
    }
    private static final int __GNU_LIBRARY__ = (int)6L;
    /**
     * {@snippet lang=c :
     * #define __GNU_LIBRARY__ 6
     * }
     */
    public static int __GNU_LIBRARY__() {
        return __GNU_LIBRARY__;
    }
    private static final int __GLIBC__ = (int)2L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC__ 2
     * }
     */
    public static int __GLIBC__() {
        return __GLIBC__;
    }
    private static final int __GLIBC_MINOR__ = (int)35L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_MINOR__ 35
     * }
     */
    public static int __GLIBC_MINOR__() {
        return __GLIBC_MINOR__;
    }
    private static final int _SYS_CDEFS_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _SYS_CDEFS_H 1
     * }
     */
    public static int _SYS_CDEFS_H() {
        return _SYS_CDEFS_H;
    }
    private static final int __glibc_c99_flexarr_available = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __glibc_c99_flexarr_available 1
     * }
     */
    public static int __glibc_c99_flexarr_available() {
        return __glibc_c99_flexarr_available;
    }
    private static final int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI 0
     * }
     */
    public static int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI() {
        return __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI;
    }
    private static final int __HAVE_GENERIC_SELECTION = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_GENERIC_SELECTION 1
     * }
     */
    public static int __HAVE_GENERIC_SELECTION() {
        return __HAVE_GENERIC_SELECTION;
    }
    private static final int __GLIBC_USE_LIB_EXT2 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_LIB_EXT2 0
     * }
     */
    public static int __GLIBC_USE_LIB_EXT2() {
        return __GLIBC_USE_LIB_EXT2;
    }
    private static final int __GLIBC_USE_IEC_60559_BFP_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_BFP_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_BFP_EXT() {
        return __GLIBC_USE_IEC_60559_BFP_EXT;
    }
    private static final int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_BFP_EXT_C2X 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_BFP_EXT_C2X() {
        return __GLIBC_USE_IEC_60559_BFP_EXT_C2X;
    }
    private static final int __GLIBC_USE_IEC_60559_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_EXT() {
        return __GLIBC_USE_IEC_60559_EXT;
    }
    private static final int __GLIBC_USE_IEC_60559_FUNCS_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_FUNCS_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT() {
        return __GLIBC_USE_IEC_60559_FUNCS_EXT;
    }
    private static final int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X() {
        return __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X;
    }
    private static final int __GLIBC_USE_IEC_60559_TYPES_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_TYPES_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_TYPES_EXT() {
        return __GLIBC_USE_IEC_60559_TYPES_EXT;
    }
    private static final int _STDLIB_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _STDLIB_H 1
     * }
     */
    public static int _STDLIB_H() {
        return _STDLIB_H;
    }
    private static final int WNOHANG = (int)1L;
    /**
     * {@snippet lang=c :
     * #define WNOHANG 1
     * }
     */
    public static int WNOHANG() {
        return WNOHANG;
    }
    private static final int WUNTRACED = (int)2L;
    /**
     * {@snippet lang=c :
     * #define WUNTRACED 2
     * }
     */
    public static int WUNTRACED() {
        return WUNTRACED;
    }
    private static final int WSTOPPED = (int)2L;
    /**
     * {@snippet lang=c :
     * #define WSTOPPED 2
     * }
     */
    public static int WSTOPPED() {
        return WSTOPPED;
    }
    private static final int WEXITED = (int)4L;
    /**
     * {@snippet lang=c :
     * #define WEXITED 4
     * }
     */
    public static int WEXITED() {
        return WEXITED;
    }
    private static final int WCONTINUED = (int)8L;
    /**
     * {@snippet lang=c :
     * #define WCONTINUED 8
     * }
     */
    public static int WCONTINUED() {
        return WCONTINUED;
    }
    private static final int WNOWAIT = (int)16777216L;
    /**
     * {@snippet lang=c :
     * #define WNOWAIT 16777216
     * }
     */
    public static int WNOWAIT() {
        return WNOWAIT;
    }
    private static final int __WNOTHREAD = (int)536870912L;
    /**
     * {@snippet lang=c :
     * #define __WNOTHREAD 536870912
     * }
     */
    public static int __WNOTHREAD() {
        return __WNOTHREAD;
    }
    private static final int __WALL = (int)1073741824L;
    /**
     * {@snippet lang=c :
     * #define __WALL 1073741824
     * }
     */
    public static int __WALL() {
        return __WALL;
    }
    private static final int __W_CONTINUED = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define __W_CONTINUED 65535
     * }
     */
    public static int __W_CONTINUED() {
        return __W_CONTINUED;
    }
    private static final int __WCOREFLAG = (int)128L;
    /**
     * {@snippet lang=c :
     * #define __WCOREFLAG 128
     * }
     */
    public static int __WCOREFLAG() {
        return __WCOREFLAG;
    }
    private static final int __HAVE_FLOAT128 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_FLOAT128 0
     * }
     */
    public static int __HAVE_FLOAT128() {
        return __HAVE_FLOAT128;
    }
    private static final int __HAVE_DISTINCT_FLOAT128 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_DISTINCT_FLOAT128 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT128() {
        return __HAVE_DISTINCT_FLOAT128;
    }
    private static final int __HAVE_FLOAT64X = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_FLOAT64X 1
     * }
     */
    public static int __HAVE_FLOAT64X() {
        return __HAVE_FLOAT64X;
    }
    private static final int __HAVE_FLOAT64X_LONG_DOUBLE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_FLOAT64X_LONG_DOUBLE 1
     * }
     */
    public static int __HAVE_FLOAT64X_LONG_DOUBLE() {
        return __HAVE_FLOAT64X_LONG_DOUBLE;
    }
    private static final int __HAVE_FLOAT16 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_FLOAT16 0
     * }
     */
    public static int __HAVE_FLOAT16() {
        return __HAVE_FLOAT16;
    }
    private static final int __HAVE_FLOAT32 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_FLOAT32 1
     * }
     */
    public static int __HAVE_FLOAT32() {
        return __HAVE_FLOAT32;
    }
    private static final int __HAVE_FLOAT64 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_FLOAT64 1
     * }
     */
    public static int __HAVE_FLOAT64() {
        return __HAVE_FLOAT64;
    }
    private static final int __HAVE_FLOAT32X = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_FLOAT32X 1
     * }
     */
    public static int __HAVE_FLOAT32X() {
        return __HAVE_FLOAT32X;
    }
    private static final int __HAVE_FLOAT128X = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_FLOAT128X 0
     * }
     */
    public static int __HAVE_FLOAT128X() {
        return __HAVE_FLOAT128X;
    }
    private static final int __HAVE_DISTINCT_FLOAT32 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_DISTINCT_FLOAT32 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT32() {
        return __HAVE_DISTINCT_FLOAT32;
    }
    private static final int __HAVE_DISTINCT_FLOAT64 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_DISTINCT_FLOAT64 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT64() {
        return __HAVE_DISTINCT_FLOAT64;
    }
    private static final int __HAVE_DISTINCT_FLOAT32X = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_DISTINCT_FLOAT32X 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT32X() {
        return __HAVE_DISTINCT_FLOAT32X;
    }
    private static final int __HAVE_DISTINCT_FLOAT64X = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_DISTINCT_FLOAT64X 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT64X() {
        return __HAVE_DISTINCT_FLOAT64X;
    }
    private static final int __HAVE_FLOATN_NOT_TYPEDEF = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_FLOATN_NOT_TYPEDEF 0
     * }
     */
    public static int __HAVE_FLOATN_NOT_TYPEDEF() {
        return __HAVE_FLOATN_NOT_TYPEDEF;
    }
    private static final int __ldiv_t_defined = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __ldiv_t_defined 1
     * }
     */
    public static int __ldiv_t_defined() {
        return __ldiv_t_defined;
    }
    private static final int __lldiv_t_defined = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __lldiv_t_defined 1
     * }
     */
    public static int __lldiv_t_defined() {
        return __lldiv_t_defined;
    }
    private static final int RAND_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define RAND_MAX 2147483647
     * }
     */
    public static int RAND_MAX() {
        return RAND_MAX;
    }
    private static final int EXIT_FAILURE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define EXIT_FAILURE 1
     * }
     */
    public static int EXIT_FAILURE() {
        return EXIT_FAILURE;
    }
    private static final int EXIT_SUCCESS = (int)0L;
    /**
     * {@snippet lang=c :
     * #define EXIT_SUCCESS 0
     * }
     */
    public static int EXIT_SUCCESS() {
        return EXIT_SUCCESS;
    }
    private static final int _SYS_TYPES_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _SYS_TYPES_H 1
     * }
     */
    public static int _SYS_TYPES_H() {
        return _SYS_TYPES_H;
    }
    private static final int _BITS_TYPES_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_TYPES_H 1
     * }
     */
    public static int _BITS_TYPES_H() {
        return _BITS_TYPES_H;
    }
    private static final int _BITS_TYPESIZES_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_TYPESIZES_H 1
     * }
     */
    public static int _BITS_TYPESIZES_H() {
        return _BITS_TYPESIZES_H;
    }
    private static final int __OFF_T_MATCHES_OFF64_T = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __OFF_T_MATCHES_OFF64_T 1
     * }
     */
    public static int __OFF_T_MATCHES_OFF64_T() {
        return __OFF_T_MATCHES_OFF64_T;
    }
    private static final int __INO_T_MATCHES_INO64_T = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __INO_T_MATCHES_INO64_T 1
     * }
     */
    public static int __INO_T_MATCHES_INO64_T() {
        return __INO_T_MATCHES_INO64_T;
    }
    private static final int __RLIM_T_MATCHES_RLIM64_T = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __RLIM_T_MATCHES_RLIM64_T 1
     * }
     */
    public static int __RLIM_T_MATCHES_RLIM64_T() {
        return __RLIM_T_MATCHES_RLIM64_T;
    }
    private static final int __STATFS_MATCHES_STATFS64 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __STATFS_MATCHES_STATFS64 1
     * }
     */
    public static int __STATFS_MATCHES_STATFS64() {
        return __STATFS_MATCHES_STATFS64;
    }
    private static final int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 1
     * }
     */
    public static int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64() {
        return __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64;
    }
    private static final int __FD_SETSIZE = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define __FD_SETSIZE 1024
     * }
     */
    public static int __FD_SETSIZE() {
        return __FD_SETSIZE;
    }
    private static final int _BITS_TIME64_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_TIME64_H 1
     * }
     */
    public static int _BITS_TIME64_H() {
        return _BITS_TIME64_H;
    }
    private static final int __clock_t_defined = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __clock_t_defined 1
     * }
     */
    public static int __clock_t_defined() {
        return __clock_t_defined;
    }
    private static final int __clockid_t_defined = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __clockid_t_defined 1
     * }
     */
    public static int __clockid_t_defined() {
        return __clockid_t_defined;
    }
    private static final int __time_t_defined = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __time_t_defined 1
     * }
     */
    public static int __time_t_defined() {
        return __time_t_defined;
    }
    private static final int __timer_t_defined = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __timer_t_defined 1
     * }
     */
    public static int __timer_t_defined() {
        return __timer_t_defined;
    }
    private static final int _BITS_STDINT_INTN_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_STDINT_INTN_H 1
     * }
     */
    public static int _BITS_STDINT_INTN_H() {
        return _BITS_STDINT_INTN_H;
    }
    private static final int __BIT_TYPES_DEFINED__ = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __BIT_TYPES_DEFINED__ 1
     * }
     */
    public static int __BIT_TYPES_DEFINED__() {
        return __BIT_TYPES_DEFINED__;
    }
    private static final int _ENDIAN_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _ENDIAN_H 1
     * }
     */
    public static int _ENDIAN_H() {
        return _ENDIAN_H;
    }
    private static final int _BITS_ENDIAN_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_ENDIAN_H 1
     * }
     */
    public static int _BITS_ENDIAN_H() {
        return _BITS_ENDIAN_H;
    }
    private static final int __LITTLE_ENDIAN = (int)1234L;
    /**
     * {@snippet lang=c :
     * #define __LITTLE_ENDIAN 1234
     * }
     */
    public static int __LITTLE_ENDIAN() {
        return __LITTLE_ENDIAN;
    }
    private static final int __BIG_ENDIAN = (int)4321L;
    /**
     * {@snippet lang=c :
     * #define __BIG_ENDIAN 4321
     * }
     */
    public static int __BIG_ENDIAN() {
        return __BIG_ENDIAN;
    }
    private static final int __PDP_ENDIAN = (int)3412L;
    /**
     * {@snippet lang=c :
     * #define __PDP_ENDIAN 3412
     * }
     */
    public static int __PDP_ENDIAN() {
        return __PDP_ENDIAN;
    }
    private static final int _BITS_ENDIANNESS_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_ENDIANNESS_H 1
     * }
     */
    public static int _BITS_ENDIANNESS_H() {
        return _BITS_ENDIANNESS_H;
    }
    private static final int _BITS_BYTESWAP_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_BYTESWAP_H 1
     * }
     */
    public static int _BITS_BYTESWAP_H() {
        return _BITS_BYTESWAP_H;
    }
    private static final int _BITS_UINTN_IDENTITY_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_UINTN_IDENTITY_H 1
     * }
     */
    public static int _BITS_UINTN_IDENTITY_H() {
        return _BITS_UINTN_IDENTITY_H;
    }
    private static final int _SYS_SELECT_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _SYS_SELECT_H 1
     * }
     */
    public static int _SYS_SELECT_H() {
        return _SYS_SELECT_H;
    }
    private static final int __sigset_t_defined = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __sigset_t_defined 1
     * }
     */
    public static int __sigset_t_defined() {
        return __sigset_t_defined;
    }
    private static final int __timeval_defined = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __timeval_defined 1
     * }
     */
    public static int __timeval_defined() {
        return __timeval_defined;
    }
    private static final int _STRUCT_TIMESPEC = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _STRUCT_TIMESPEC 1
     * }
     */
    public static int _STRUCT_TIMESPEC() {
        return _STRUCT_TIMESPEC;
    }
    private static final int _BITS_PTHREADTYPES_COMMON_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_PTHREADTYPES_COMMON_H 1
     * }
     */
    public static int _BITS_PTHREADTYPES_COMMON_H() {
        return _BITS_PTHREADTYPES_COMMON_H;
    }
    private static final int _THREAD_SHARED_TYPES_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _THREAD_SHARED_TYPES_H 1
     * }
     */
    public static int _THREAD_SHARED_TYPES_H() {
        return _THREAD_SHARED_TYPES_H;
    }
    private static final int _BITS_PTHREADTYPES_ARCH_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_PTHREADTYPES_ARCH_H 1
     * }
     */
    public static int _BITS_PTHREADTYPES_ARCH_H() {
        return _BITS_PTHREADTYPES_ARCH_H;
    }
    private static final int __SIZEOF_PTHREAD_MUTEX_T = (int)40L;
    /**
     * {@snippet lang=c :
     * #define __SIZEOF_PTHREAD_MUTEX_T 40
     * }
     */
    public static int __SIZEOF_PTHREAD_MUTEX_T() {
        return __SIZEOF_PTHREAD_MUTEX_T;
    }
    private static final int __SIZEOF_PTHREAD_ATTR_T = (int)56L;
    /**
     * {@snippet lang=c :
     * #define __SIZEOF_PTHREAD_ATTR_T 56
     * }
     */
    public static int __SIZEOF_PTHREAD_ATTR_T() {
        return __SIZEOF_PTHREAD_ATTR_T;
    }
    private static final int __SIZEOF_PTHREAD_RWLOCK_T = (int)56L;
    /**
     * {@snippet lang=c :
     * #define __SIZEOF_PTHREAD_RWLOCK_T 56
     * }
     */
    public static int __SIZEOF_PTHREAD_RWLOCK_T() {
        return __SIZEOF_PTHREAD_RWLOCK_T;
    }
    private static final int __SIZEOF_PTHREAD_BARRIER_T = (int)32L;
    /**
     * {@snippet lang=c :
     * #define __SIZEOF_PTHREAD_BARRIER_T 32
     * }
     */
    public static int __SIZEOF_PTHREAD_BARRIER_T() {
        return __SIZEOF_PTHREAD_BARRIER_T;
    }
    private static final int __SIZEOF_PTHREAD_MUTEXATTR_T = (int)4L;
    /**
     * {@snippet lang=c :
     * #define __SIZEOF_PTHREAD_MUTEXATTR_T 4
     * }
     */
    public static int __SIZEOF_PTHREAD_MUTEXATTR_T() {
        return __SIZEOF_PTHREAD_MUTEXATTR_T;
    }
    private static final int __SIZEOF_PTHREAD_COND_T = (int)48L;
    /**
     * {@snippet lang=c :
     * #define __SIZEOF_PTHREAD_COND_T 48
     * }
     */
    public static int __SIZEOF_PTHREAD_COND_T() {
        return __SIZEOF_PTHREAD_COND_T;
    }
    private static final int __SIZEOF_PTHREAD_CONDATTR_T = (int)4L;
    /**
     * {@snippet lang=c :
     * #define __SIZEOF_PTHREAD_CONDATTR_T 4
     * }
     */
    public static int __SIZEOF_PTHREAD_CONDATTR_T() {
        return __SIZEOF_PTHREAD_CONDATTR_T;
    }
    private static final int __SIZEOF_PTHREAD_RWLOCKATTR_T = (int)8L;
    /**
     * {@snippet lang=c :
     * #define __SIZEOF_PTHREAD_RWLOCKATTR_T 8
     * }
     */
    public static int __SIZEOF_PTHREAD_RWLOCKATTR_T() {
        return __SIZEOF_PTHREAD_RWLOCKATTR_T;
    }
    private static final int __SIZEOF_PTHREAD_BARRIERATTR_T = (int)4L;
    /**
     * {@snippet lang=c :
     * #define __SIZEOF_PTHREAD_BARRIERATTR_T 4
     * }
     */
    public static int __SIZEOF_PTHREAD_BARRIERATTR_T() {
        return __SIZEOF_PTHREAD_BARRIERATTR_T;
    }
    private static final int _THREAD_MUTEX_INTERNAL_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _THREAD_MUTEX_INTERNAL_H 1
     * }
     */
    public static int _THREAD_MUTEX_INTERNAL_H() {
        return _THREAD_MUTEX_INTERNAL_H;
    }
    private static final int __PTHREAD_MUTEX_HAVE_PREV = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_MUTEX_HAVE_PREV 1
     * }
     */
    public static int __PTHREAD_MUTEX_HAVE_PREV() {
        return __PTHREAD_MUTEX_HAVE_PREV;
    }
    private static final int __have_pthread_attr_t = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __have_pthread_attr_t 1
     * }
     */
    public static int __have_pthread_attr_t() {
        return __have_pthread_attr_t;
    }
    private static final int _ALLOCA_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _ALLOCA_H 1
     * }
     */
    public static int _ALLOCA_H() {
        return _ALLOCA_H;
    }
    private static final int _STDINT_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _STDINT_H 1
     * }
     */
    public static int _STDINT_H() {
        return _STDINT_H;
    }
    private static final int _BITS_WCHAR_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_WCHAR_H 1
     * }
     */
    public static int _BITS_WCHAR_H() {
        return _BITS_WCHAR_H;
    }
    private static final int _BITS_STDINT_UINTN_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_STDINT_UINTN_H 1
     * }
     */
    public static int _BITS_STDINT_UINTN_H() {
        return _BITS_STDINT_UINTN_H;
    }
    private static final int true_ = (int)1L;
    /**
     * {@snippet lang=c :
     * #define true 1
     * }
     */
    public static int true_() {
        return true_;
    }
    private static final int false_ = (int)0L;
    /**
     * {@snippet lang=c :
     * #define false 0
     * }
     */
    public static int false_() {
        return false_;
    }
    private static final int __bool_true_false_are_defined = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __bool_true_false_are_defined 1
     * }
     */
    public static int __bool_true_false_are_defined() {
        return __bool_true_false_are_defined;
    }
    private static final int TREE_SITTER_LANGUAGE_VERSION = (int)14L;
    /**
     * {@snippet lang=c :
     * #define TREE_SITTER_LANGUAGE_VERSION 14
     * }
     */
    public static int TREE_SITTER_LANGUAGE_VERSION() {
        return TREE_SITTER_LANGUAGE_VERSION;
    }
    private static final int TREE_SITTER_MIN_COMPATIBLE_LANGUAGE_VERSION = (int)13L;
    /**
     * {@snippet lang=c :
     * #define TREE_SITTER_MIN_COMPATIBLE_LANGUAGE_VERSION 13
     * }
     */
    public static int TREE_SITTER_MIN_COMPATIBLE_LANGUAGE_VERSION() {
        return TREE_SITTER_MIN_COMPATIBLE_LANGUAGE_VERSION;
    }
    /**
     * {@snippet lang=c :
     * typedef unsigned long size_t
     * }
     */
    public static final OfLong size_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int wchar_t
     * }
     */
    public static final OfInt wchar_t = TreeSitter.C_INT;
    /**
     * {@snippet lang=c :
     * typedef float _Float32
     * }
     */
    public static final OfFloat _Float32 = TreeSitter.C_FLOAT;
    /**
     * {@snippet lang=c :
     * typedef double _Float64
     * }
     */
    public static final OfDouble _Float64 = TreeSitter.C_DOUBLE;
    /**
     * {@snippet lang=c :
     * typedef double _Float32x
     * }
     */
    public static final OfDouble _Float32x = TreeSitter.C_DOUBLE;

    private static class __ctype_get_mb_cur_max {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_LONG    );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("__ctype_get_mb_cur_max");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern size_t __ctype_get_mb_cur_max()
     * }
     */
    public static FunctionDescriptor __ctype_get_mb_cur_max$descriptor() {
        return __ctype_get_mb_cur_max.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern size_t __ctype_get_mb_cur_max()
     * }
     */
    public static MethodHandle __ctype_get_mb_cur_max$handle() {
        return __ctype_get_mb_cur_max.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern size_t __ctype_get_mb_cur_max()
     * }
     */
    public static MemorySegment __ctype_get_mb_cur_max$address() {
        return __ctype_get_mb_cur_max.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern size_t __ctype_get_mb_cur_max()
     * }
     */
    public static long __ctype_get_mb_cur_max() {
        var mh$ = __ctype_get_mb_cur_max.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__ctype_get_mb_cur_max");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atof {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_DOUBLE,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("atof");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double atof(const char *__nptr)
     * }
     */
    public static FunctionDescriptor atof$descriptor() {
        return atof.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double atof(const char *__nptr)
     * }
     */
    public static MethodHandle atof$handle() {
        return atof.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double atof(const char *__nptr)
     * }
     */
    public static MemorySegment atof$address() {
        return atof.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double atof(const char *__nptr)
     * }
     */
    public static double atof(MemorySegment __nptr) {
        var mh$ = atof.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atof", __nptr);
            }
            return (double)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atoi {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_INT,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("atoi");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int atoi(const char *__nptr)
     * }
     */
    public static FunctionDescriptor atoi$descriptor() {
        return atoi.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int atoi(const char *__nptr)
     * }
     */
    public static MethodHandle atoi$handle() {
        return atoi.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int atoi(const char *__nptr)
     * }
     */
    public static MemorySegment atoi$address() {
        return atoi.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int atoi(const char *__nptr)
     * }
     */
    public static int atoi(MemorySegment __nptr) {
        var mh$ = atoi.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atoi", __nptr);
            }
            return (int)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_LONG,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("atol");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern long atol(const char *__nptr)
     * }
     */
    public static FunctionDescriptor atol$descriptor() {
        return atol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern long atol(const char *__nptr)
     * }
     */
    public static MethodHandle atol$handle() {
        return atol.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern long atol(const char *__nptr)
     * }
     */
    public static MemorySegment atol$address() {
        return atol.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern long atol(const char *__nptr)
     * }
     */
    public static long atol(MemorySegment __nptr) {
        var mh$ = atol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atol", __nptr);
            }
            return (long)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atoll {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_LONG_LONG,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("atoll");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern long long atoll(const char *__nptr)
     * }
     */
    public static FunctionDescriptor atoll$descriptor() {
        return atoll.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern long long atoll(const char *__nptr)
     * }
     */
    public static MethodHandle atoll$handle() {
        return atoll.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern long long atoll(const char *__nptr)
     * }
     */
    public static MemorySegment atoll$address() {
        return atoll.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern long long atoll(const char *__nptr)
     * }
     */
    public static long atoll(MemorySegment __nptr) {
        var mh$ = atoll.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atoll", __nptr);
            }
            return (long)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strtod {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_DOUBLE,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("strtod");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double strtod(const char *restrict __nptr, char **restrict __endptr)
     * }
     */
    public static FunctionDescriptor strtod$descriptor() {
        return strtod.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double strtod(const char *restrict __nptr, char **restrict __endptr)
     * }
     */
    public static MethodHandle strtod$handle() {
        return strtod.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double strtod(const char *restrict __nptr, char **restrict __endptr)
     * }
     */
    public static MemorySegment strtod$address() {
        return strtod.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double strtod(const char *restrict __nptr, char **restrict __endptr)
     * }
     */
    public static double strtod(MemorySegment __nptr, MemorySegment __endptr) {
        var mh$ = strtod.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strtod", __nptr, __endptr);
            }
            return (double)mh$.invokeExact(__nptr, __endptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strtof {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_FLOAT,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("strtof");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float strtof(const char *restrict __nptr, char **restrict __endptr)
     * }
     */
    public static FunctionDescriptor strtof$descriptor() {
        return strtof.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float strtof(const char *restrict __nptr, char **restrict __endptr)
     * }
     */
    public static MethodHandle strtof$handle() {
        return strtof.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float strtof(const char *restrict __nptr, char **restrict __endptr)
     * }
     */
    public static MemorySegment strtof$address() {
        return strtof.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float strtof(const char *restrict __nptr, char **restrict __endptr)
     * }
     */
    public static float strtof(MemorySegment __nptr, MemorySegment __endptr) {
        var mh$ = strtof.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strtof", __nptr, __endptr);
            }
            return (float)mh$.invokeExact(__nptr, __endptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strtol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_LONG,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER,
            TreeSitter.C_INT
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("strtol");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern long strtol(const char *restrict __nptr, char **restrict __endptr, int __base)
     * }
     */
    public static FunctionDescriptor strtol$descriptor() {
        return strtol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern long strtol(const char *restrict __nptr, char **restrict __endptr, int __base)
     * }
     */
    public static MethodHandle strtol$handle() {
        return strtol.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern long strtol(const char *restrict __nptr, char **restrict __endptr, int __base)
     * }
     */
    public static MemorySegment strtol$address() {
        return strtol.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern long strtol(const char *restrict __nptr, char **restrict __endptr, int __base)
     * }
     */
    public static long strtol(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strtol", __nptr, __endptr, __base);
            }
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strtoul {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_LONG,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER,
            TreeSitter.C_INT
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("strtoul");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long strtoul(const char *restrict __nptr, char **restrict __endptr, int __base)
     * }
     */
    public static FunctionDescriptor strtoul$descriptor() {
        return strtoul.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long strtoul(const char *restrict __nptr, char **restrict __endptr, int __base)
     * }
     */
    public static MethodHandle strtoul$handle() {
        return strtoul.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned long strtoul(const char *restrict __nptr, char **restrict __endptr, int __base)
     * }
     */
    public static MemorySegment strtoul$address() {
        return strtoul.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned long strtoul(const char *restrict __nptr, char **restrict __endptr, int __base)
     * }
     */
    public static long strtoul(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtoul.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strtoul", __nptr, __endptr, __base);
            }
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strtoq {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_LONG_LONG,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER,
            TreeSitter.C_INT
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("strtoq");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern long long strtoq(const char *restrict __nptr, char **restrict __endptr, int __base)
     * }
     */
    public static FunctionDescriptor strtoq$descriptor() {
        return strtoq.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern long long strtoq(const char *restrict __nptr, char **restrict __endptr, int __base)
     * }
     */
    public static MethodHandle strtoq$handle() {
        return strtoq.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern long long strtoq(const char *restrict __nptr, char **restrict __endptr, int __base)
     * }
     */
    public static MemorySegment strtoq$address() {
        return strtoq.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern long long strtoq(const char *restrict __nptr, char **restrict __endptr, int __base)
     * }
     */
    public static long strtoq(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtoq.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strtoq", __nptr, __endptr, __base);
            }
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strtouq {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_LONG_LONG,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER,
            TreeSitter.C_INT
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("strtouq");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long long strtouq(const char *restrict __nptr, char **restrict __endptr, int __base)
     * }
     */
    public static FunctionDescriptor strtouq$descriptor() {
        return strtouq.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long long strtouq(const char *restrict __nptr, char **restrict __endptr, int __base)
     * }
     */
    public static MethodHandle strtouq$handle() {
        return strtouq.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned long long strtouq(const char *restrict __nptr, char **restrict __endptr, int __base)
     * }
     */
    public static MemorySegment strtouq$address() {
        return strtouq.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned long long strtouq(const char *restrict __nptr, char **restrict __endptr, int __base)
     * }
     */
    public static long strtouq(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtouq.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strtouq", __nptr, __endptr, __base);
            }
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strtoll {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_LONG_LONG,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER,
            TreeSitter.C_INT
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("strtoll");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern long long strtoll(const char *restrict __nptr, char **restrict __endptr, int __base)
     * }
     */
    public static FunctionDescriptor strtoll$descriptor() {
        return strtoll.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern long long strtoll(const char *restrict __nptr, char **restrict __endptr, int __base)
     * }
     */
    public static MethodHandle strtoll$handle() {
        return strtoll.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern long long strtoll(const char *restrict __nptr, char **restrict __endptr, int __base)
     * }
     */
    public static MemorySegment strtoll$address() {
        return strtoll.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern long long strtoll(const char *restrict __nptr, char **restrict __endptr, int __base)
     * }
     */
    public static long strtoll(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtoll.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strtoll", __nptr, __endptr, __base);
            }
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strtoull {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_LONG_LONG,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER,
            TreeSitter.C_INT
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("strtoull");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long long strtoull(const char *restrict __nptr, char **restrict __endptr, int __base)
     * }
     */
    public static FunctionDescriptor strtoull$descriptor() {
        return strtoull.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long long strtoull(const char *restrict __nptr, char **restrict __endptr, int __base)
     * }
     */
    public static MethodHandle strtoull$handle() {
        return strtoull.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned long long strtoull(const char *restrict __nptr, char **restrict __endptr, int __base)
     * }
     */
    public static MemorySegment strtoull$address() {
        return strtoull.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned long long strtoull(const char *restrict __nptr, char **restrict __endptr, int __base)
     * }
     */
    public static long strtoull(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtoull.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strtoull", __nptr, __endptr, __base);
            }
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class l64a {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_POINTER,
            TreeSitter.C_LONG
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("l64a");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *l64a(long __n)
     * }
     */
    public static FunctionDescriptor l64a$descriptor() {
        return l64a.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *l64a(long __n)
     * }
     */
    public static MethodHandle l64a$handle() {
        return l64a.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *l64a(long __n)
     * }
     */
    public static MemorySegment l64a$address() {
        return l64a.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *l64a(long __n)
     * }
     */
    public static MemorySegment l64a(long __n) {
        var mh$ = l64a.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("l64a", __n);
            }
            return (MemorySegment)mh$.invokeExact(__n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class a64l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_LONG,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("a64l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern long a64l(const char *__s)
     * }
     */
    public static FunctionDescriptor a64l$descriptor() {
        return a64l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern long a64l(const char *__s)
     * }
     */
    public static MethodHandle a64l$handle() {
        return a64l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern long a64l(const char *__s)
     * }
     */
    public static MemorySegment a64l$address() {
        return a64l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern long a64l(const char *__s)
     * }
     */
    public static long a64l(MemorySegment __s) {
        var mh$ = a64l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("a64l", __s);
            }
            return (long)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef unsigned char __u_char
     * }
     */
    public static final OfByte __u_char = TreeSitter.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __u_short
     * }
     */
    public static final OfShort __u_short = TreeSitter.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __u_int
     * }
     */
    public static final OfInt __u_int = TreeSitter.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __u_long
     * }
     */
    public static final OfLong __u_long = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef signed char __int8_t
     * }
     */
    public static final OfByte __int8_t = TreeSitter.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned char __uint8_t
     * }
     */
    public static final OfByte __uint8_t = TreeSitter.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef short __int16_t
     * }
     */
    public static final OfShort __int16_t = TreeSitter.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __uint16_t
     * }
     */
    public static final OfShort __uint16_t = TreeSitter.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int __int32_t
     * }
     */
    public static final OfInt __int32_t = TreeSitter.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __uint32_t
     * }
     */
    public static final OfInt __uint32_t = TreeSitter.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __int64_t
     * }
     */
    public static final OfLong __int64_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __uint64_t
     * }
     */
    public static final OfLong __uint64_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int8_t __int_least8_t
     * }
     */
    public static final OfByte __int_least8_t = TreeSitter.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __uint8_t __uint_least8_t
     * }
     */
    public static final OfByte __uint_least8_t = TreeSitter.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __int16_t __int_least16_t
     * }
     */
    public static final OfShort __int_least16_t = TreeSitter.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __uint16_t __uint_least16_t
     * }
     */
    public static final OfShort __uint_least16_t = TreeSitter.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __int_least32_t
     * }
     */
    public static final OfInt __int_least32_t = TreeSitter.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __uint_least32_t
     * }
     */
    public static final OfInt __uint_least32_t = TreeSitter.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int64_t __int_least64_t
     * }
     */
    public static final OfLong __int_least64_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uint64_t __uint_least64_t
     * }
     */
    public static final OfLong __uint_least64_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __quad_t
     * }
     */
    public static final OfLong __quad_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __u_quad_t
     * }
     */
    public static final OfLong __u_quad_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __intmax_t
     * }
     */
    public static final OfLong __intmax_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __uintmax_t
     * }
     */
    public static final OfLong __uintmax_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __dev_t
     * }
     */
    public static final OfLong __dev_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __uid_t
     * }
     */
    public static final OfInt __uid_t = TreeSitter.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __gid_t
     * }
     */
    public static final OfInt __gid_t = TreeSitter.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __ino_t
     * }
     */
    public static final OfLong __ino_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __ino64_t
     * }
     */
    public static final OfLong __ino64_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __mode_t
     * }
     */
    public static final OfInt __mode_t = TreeSitter.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __nlink_t
     * }
     */
    public static final OfLong __nlink_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __off_t
     * }
     */
    public static final OfLong __off_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __off64_t
     * }
     */
    public static final OfLong __off64_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int __pid_t
     * }
     */
    public static final OfInt __pid_t = TreeSitter.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __clock_t
     * }
     */
    public static final OfLong __clock_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __rlim_t
     * }
     */
    public static final OfLong __rlim_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __rlim64_t
     * }
     */
    public static final OfLong __rlim64_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __id_t
     * }
     */
    public static final OfInt __id_t = TreeSitter.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __time_t
     * }
     */
    public static final OfLong __time_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __useconds_t
     * }
     */
    public static final OfInt __useconds_t = TreeSitter.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __suseconds_t
     * }
     */
    public static final OfLong __suseconds_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __suseconds64_t
     * }
     */
    public static final OfLong __suseconds64_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int __daddr_t
     * }
     */
    public static final OfInt __daddr_t = TreeSitter.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __key_t
     * }
     */
    public static final OfInt __key_t = TreeSitter.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __clockid_t
     * }
     */
    public static final OfInt __clockid_t = TreeSitter.C_INT;
    /**
     * {@snippet lang=c :
     * typedef void *__timer_t
     * }
     */
    public static final AddressLayout __timer_t = TreeSitter.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef long __blksize_t
     * }
     */
    public static final OfLong __blksize_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __blkcnt_t
     * }
     */
    public static final OfLong __blkcnt_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __blkcnt64_t
     * }
     */
    public static final OfLong __blkcnt64_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsblkcnt_t
     * }
     */
    public static final OfLong __fsblkcnt_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsblkcnt64_t
     * }
     */
    public static final OfLong __fsblkcnt64_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsfilcnt_t
     * }
     */
    public static final OfLong __fsfilcnt_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsfilcnt64_t
     * }
     */
    public static final OfLong __fsfilcnt64_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __fsword_t
     * }
     */
    public static final OfLong __fsword_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __ssize_t
     * }
     */
    public static final OfLong __ssize_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __syscall_slong_t
     * }
     */
    public static final OfLong __syscall_slong_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __syscall_ulong_t
     * }
     */
    public static final OfLong __syscall_ulong_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __off64_t __loff_t
     * }
     */
    public static final OfLong __loff_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef char *__caddr_t
     * }
     */
    public static final AddressLayout __caddr_t = TreeSitter.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef long __intptr_t
     * }
     */
    public static final OfLong __intptr_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __socklen_t
     * }
     */
    public static final OfInt __socklen_t = TreeSitter.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __sig_atomic_t
     * }
     */
    public static final OfInt __sig_atomic_t = TreeSitter.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __u_char u_char
     * }
     */
    public static final OfByte u_char = TreeSitter.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __u_short u_short
     * }
     */
    public static final OfShort u_short = TreeSitter.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __u_int u_int
     * }
     */
    public static final OfInt u_int = TreeSitter.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __u_long u_long
     * }
     */
    public static final OfLong u_long = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __quad_t quad_t
     * }
     */
    public static final OfLong quad_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __u_quad_t u_quad_t
     * }
     */
    public static final OfLong u_quad_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __loff_t loff_t
     * }
     */
    public static final OfLong loff_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __ino_t ino_t
     * }
     */
    public static final OfLong ino_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __dev_t dev_t
     * }
     */
    public static final OfLong dev_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __gid_t gid_t
     * }
     */
    public static final OfInt gid_t = TreeSitter.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __mode_t mode_t
     * }
     */
    public static final OfInt mode_t = TreeSitter.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __nlink_t nlink_t
     * }
     */
    public static final OfLong nlink_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uid_t uid_t
     * }
     */
    public static final OfInt uid_t = TreeSitter.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __off_t off_t
     * }
     */
    public static final OfLong off_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __pid_t pid_t
     * }
     */
    public static final OfInt pid_t = TreeSitter.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __id_t id_t
     * }
     */
    public static final OfInt id_t = TreeSitter.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __ssize_t ssize_t
     * }
     */
    public static final OfLong ssize_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __daddr_t daddr_t
     * }
     */
    public static final OfInt daddr_t = TreeSitter.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __caddr_t caddr_t
     * }
     */
    public static final AddressLayout caddr_t = TreeSitter.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef __key_t key_t
     * }
     */
    public static final OfInt key_t = TreeSitter.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __clock_t clock_t
     * }
     */
    public static final OfLong clock_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __clockid_t clockid_t
     * }
     */
    public static final OfInt clockid_t = TreeSitter.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __time_t time_t
     * }
     */
    public static final OfLong time_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __timer_t timer_t
     * }
     */
    public static final AddressLayout timer_t = TreeSitter.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef unsigned long ulong
     * }
     */
    public static final OfLong ulong = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned short ushort
     * }
     */
    public static final OfShort ushort = TreeSitter.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int uint
     * }
     */
    public static final OfInt uint = TreeSitter.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int8_t int8_t
     * }
     */
    public static final OfByte int8_t = TreeSitter.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __int16_t int16_t
     * }
     */
    public static final OfShort int16_t = TreeSitter.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __int32_t int32_t
     * }
     */
    public static final OfInt int32_t = TreeSitter.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int64_t int64_t
     * }
     */
    public static final OfLong int64_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uint8_t u_int8_t
     * }
     */
    public static final OfByte u_int8_t = TreeSitter.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __uint16_t u_int16_t
     * }
     */
    public static final OfShort u_int16_t = TreeSitter.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t u_int32_t
     * }
     */
    public static final OfInt u_int32_t = TreeSitter.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint64_t u_int64_t
     * }
     */
    public static final OfLong u_int64_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int register_t
     * }
     */
    public static final OfLong register_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __suseconds_t suseconds_t
     * }
     */
    public static final OfLong suseconds_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __fd_mask
     * }
     */
    public static final OfLong __fd_mask = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __fd_mask fd_mask
     * }
     */
    public static final OfLong fd_mask = TreeSitter.C_LONG;

    private static class select {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_INT,
            TreeSitter.C_INT,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("select");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int select(int __nfds, fd_set *restrict __readfds, fd_set *restrict __writefds, fd_set *restrict __exceptfds, struct timeval *restrict __timeout)
     * }
     */
    public static FunctionDescriptor select$descriptor() {
        return select.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int select(int __nfds, fd_set *restrict __readfds, fd_set *restrict __writefds, fd_set *restrict __exceptfds, struct timeval *restrict __timeout)
     * }
     */
    public static MethodHandle select$handle() {
        return select.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int select(int __nfds, fd_set *restrict __readfds, fd_set *restrict __writefds, fd_set *restrict __exceptfds, struct timeval *restrict __timeout)
     * }
     */
    public static MemorySegment select$address() {
        return select.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int select(int __nfds, fd_set *restrict __readfds, fd_set *restrict __writefds, fd_set *restrict __exceptfds, struct timeval *restrict __timeout)
     * }
     */
    public static int select(int __nfds, MemorySegment __readfds, MemorySegment __writefds, MemorySegment __exceptfds, MemorySegment __timeout) {
        var mh$ = select.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("select", __nfds, __readfds, __writefds, __exceptfds, __timeout);
            }
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pselect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_INT,
            TreeSitter.C_INT,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("pselect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pselect(int __nfds, fd_set *restrict __readfds, fd_set *restrict __writefds, fd_set *restrict __exceptfds, const struct timespec *restrict __timeout, const __sigset_t *restrict __sigmask)
     * }
     */
    public static FunctionDescriptor pselect$descriptor() {
        return pselect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pselect(int __nfds, fd_set *restrict __readfds, fd_set *restrict __writefds, fd_set *restrict __exceptfds, const struct timespec *restrict __timeout, const __sigset_t *restrict __sigmask)
     * }
     */
    public static MethodHandle pselect$handle() {
        return pselect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int pselect(int __nfds, fd_set *restrict __readfds, fd_set *restrict __writefds, fd_set *restrict __exceptfds, const struct timespec *restrict __timeout, const __sigset_t *restrict __sigmask)
     * }
     */
    public static MemorySegment pselect$address() {
        return pselect.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int pselect(int __nfds, fd_set *restrict __readfds, fd_set *restrict __writefds, fd_set *restrict __exceptfds, const struct timespec *restrict __timeout, const __sigset_t *restrict __sigmask)
     * }
     */
    public static int pselect(int __nfds, MemorySegment __readfds, MemorySegment __writefds, MemorySegment __exceptfds, MemorySegment __timeout, MemorySegment __sigmask) {
        var mh$ = pselect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pselect", __nfds, __readfds, __writefds, __exceptfds, __timeout, __sigmask);
            }
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout, __sigmask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef __blksize_t blksize_t
     * }
     */
    public static final OfLong blksize_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __blkcnt_t blkcnt_t
     * }
     */
    public static final OfLong blkcnt_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __fsblkcnt_t fsblkcnt_t
     * }
     */
    public static final OfLong fsblkcnt_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __fsfilcnt_t fsfilcnt_t
     * }
     */
    public static final OfLong fsfilcnt_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __tss_t
     * }
     */
    public static final OfInt __tss_t = TreeSitter.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __thrd_t
     * }
     */
    public static final OfLong __thrd_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long pthread_t
     * }
     */
    public static final OfLong pthread_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int pthread_key_t
     * }
     */
    public static final OfInt pthread_key_t = TreeSitter.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int pthread_once_t
     * }
     */
    public static final OfInt pthread_once_t = TreeSitter.C_INT;
    /**
     * {@snippet lang=c :
     * typedef volatile int pthread_spinlock_t
     * }
     */
    public static final OfInt pthread_spinlock_t = TreeSitter.C_INT;

    private static class random {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_LONG    );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("random");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern long random()
     * }
     */
    public static FunctionDescriptor random$descriptor() {
        return random.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern long random()
     * }
     */
    public static MethodHandle random$handle() {
        return random.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern long random()
     * }
     */
    public static MemorySegment random$address() {
        return random.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern long random()
     * }
     */
    public static long random() {
        var mh$ = random.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("random");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class srandom {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            TreeSitter.C_INT
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("srandom");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void srandom(unsigned int __seed)
     * }
     */
    public static FunctionDescriptor srandom$descriptor() {
        return srandom.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void srandom(unsigned int __seed)
     * }
     */
    public static MethodHandle srandom$handle() {
        return srandom.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void srandom(unsigned int __seed)
     * }
     */
    public static MemorySegment srandom$address() {
        return srandom.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void srandom(unsigned int __seed)
     * }
     */
    public static void srandom(int __seed) {
        var mh$ = srandom.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("srandom", __seed);
            }
            mh$.invokeExact(__seed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class initstate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_POINTER,
            TreeSitter.C_INT,
            TreeSitter.C_POINTER,
            TreeSitter.C_LONG
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("initstate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *initstate(unsigned int __seed, char *__statebuf, size_t __statelen)
     * }
     */
    public static FunctionDescriptor initstate$descriptor() {
        return initstate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *initstate(unsigned int __seed, char *__statebuf, size_t __statelen)
     * }
     */
    public static MethodHandle initstate$handle() {
        return initstate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *initstate(unsigned int __seed, char *__statebuf, size_t __statelen)
     * }
     */
    public static MemorySegment initstate$address() {
        return initstate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *initstate(unsigned int __seed, char *__statebuf, size_t __statelen)
     * }
     */
    public static MemorySegment initstate(int __seed, MemorySegment __statebuf, long __statelen) {
        var mh$ = initstate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("initstate", __seed, __statebuf, __statelen);
            }
            return (MemorySegment)mh$.invokeExact(__seed, __statebuf, __statelen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class setstate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("setstate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *setstate(char *__statebuf)
     * }
     */
    public static FunctionDescriptor setstate$descriptor() {
        return setstate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *setstate(char *__statebuf)
     * }
     */
    public static MethodHandle setstate$handle() {
        return setstate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *setstate(char *__statebuf)
     * }
     */
    public static MemorySegment setstate$address() {
        return setstate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *setstate(char *__statebuf)
     * }
     */
    public static MemorySegment setstate(MemorySegment __statebuf) {
        var mh$ = setstate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setstate", __statebuf);
            }
            return (MemorySegment)mh$.invokeExact(__statebuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class random_r {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_INT,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("random_r");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int random_r(struct random_data *restrict __buf, int32_t *restrict __result)
     * }
     */
    public static FunctionDescriptor random_r$descriptor() {
        return random_r.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int random_r(struct random_data *restrict __buf, int32_t *restrict __result)
     * }
     */
    public static MethodHandle random_r$handle() {
        return random_r.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int random_r(struct random_data *restrict __buf, int32_t *restrict __result)
     * }
     */
    public static MemorySegment random_r$address() {
        return random_r.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int random_r(struct random_data *restrict __buf, int32_t *restrict __result)
     * }
     */
    public static int random_r(MemorySegment __buf, MemorySegment __result) {
        var mh$ = random_r.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("random_r", __buf, __result);
            }
            return (int)mh$.invokeExact(__buf, __result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class srandom_r {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_INT,
            TreeSitter.C_INT,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("srandom_r");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int srandom_r(unsigned int __seed, struct random_data *__buf)
     * }
     */
    public static FunctionDescriptor srandom_r$descriptor() {
        return srandom_r.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int srandom_r(unsigned int __seed, struct random_data *__buf)
     * }
     */
    public static MethodHandle srandom_r$handle() {
        return srandom_r.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int srandom_r(unsigned int __seed, struct random_data *__buf)
     * }
     */
    public static MemorySegment srandom_r$address() {
        return srandom_r.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int srandom_r(unsigned int __seed, struct random_data *__buf)
     * }
     */
    public static int srandom_r(int __seed, MemorySegment __buf) {
        var mh$ = srandom_r.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("srandom_r", __seed, __buf);
            }
            return (int)mh$.invokeExact(__seed, __buf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class initstate_r {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_INT,
            TreeSitter.C_INT,
            TreeSitter.C_POINTER,
            TreeSitter.C_LONG,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("initstate_r");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int initstate_r(unsigned int __seed, char *restrict __statebuf, size_t __statelen, struct random_data *restrict __buf)
     * }
     */
    public static FunctionDescriptor initstate_r$descriptor() {
        return initstate_r.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int initstate_r(unsigned int __seed, char *restrict __statebuf, size_t __statelen, struct random_data *restrict __buf)
     * }
     */
    public static MethodHandle initstate_r$handle() {
        return initstate_r.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int initstate_r(unsigned int __seed, char *restrict __statebuf, size_t __statelen, struct random_data *restrict __buf)
     * }
     */
    public static MemorySegment initstate_r$address() {
        return initstate_r.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int initstate_r(unsigned int __seed, char *restrict __statebuf, size_t __statelen, struct random_data *restrict __buf)
     * }
     */
    public static int initstate_r(int __seed, MemorySegment __statebuf, long __statelen, MemorySegment __buf) {
        var mh$ = initstate_r.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("initstate_r", __seed, __statebuf, __statelen, __buf);
            }
            return (int)mh$.invokeExact(__seed, __statebuf, __statelen, __buf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class setstate_r {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_INT,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("setstate_r");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int setstate_r(char *restrict __statebuf, struct random_data *restrict __buf)
     * }
     */
    public static FunctionDescriptor setstate_r$descriptor() {
        return setstate_r.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int setstate_r(char *restrict __statebuf, struct random_data *restrict __buf)
     * }
     */
    public static MethodHandle setstate_r$handle() {
        return setstate_r.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int setstate_r(char *restrict __statebuf, struct random_data *restrict __buf)
     * }
     */
    public static MemorySegment setstate_r$address() {
        return setstate_r.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int setstate_r(char *restrict __statebuf, struct random_data *restrict __buf)
     * }
     */
    public static int setstate_r(MemorySegment __statebuf, MemorySegment __buf) {
        var mh$ = setstate_r.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setstate_r", __statebuf, __buf);
            }
            return (int)mh$.invokeExact(__statebuf, __buf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rand {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_INT    );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("rand");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int rand()
     * }
     */
    public static FunctionDescriptor rand$descriptor() {
        return rand.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int rand()
     * }
     */
    public static MethodHandle rand$handle() {
        return rand.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int rand()
     * }
     */
    public static MemorySegment rand$address() {
        return rand.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int rand()
     * }
     */
    public static int rand() {
        var mh$ = rand.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rand");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class srand {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            TreeSitter.C_INT
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("srand");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void srand(unsigned int __seed)
     * }
     */
    public static FunctionDescriptor srand$descriptor() {
        return srand.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void srand(unsigned int __seed)
     * }
     */
    public static MethodHandle srand$handle() {
        return srand.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void srand(unsigned int __seed)
     * }
     */
    public static MemorySegment srand$address() {
        return srand.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void srand(unsigned int __seed)
     * }
     */
    public static void srand(int __seed) {
        var mh$ = srand.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("srand", __seed);
            }
            mh$.invokeExact(__seed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rand_r {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_INT,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("rand_r");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int rand_r(unsigned int *__seed)
     * }
     */
    public static FunctionDescriptor rand_r$descriptor() {
        return rand_r.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int rand_r(unsigned int *__seed)
     * }
     */
    public static MethodHandle rand_r$handle() {
        return rand_r.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int rand_r(unsigned int *__seed)
     * }
     */
    public static MemorySegment rand_r$address() {
        return rand_r.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int rand_r(unsigned int *__seed)
     * }
     */
    public static int rand_r(MemorySegment __seed) {
        var mh$ = rand_r.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rand_r", __seed);
            }
            return (int)mh$.invokeExact(__seed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class drand48 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_DOUBLE    );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("drand48");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double drand48()
     * }
     */
    public static FunctionDescriptor drand48$descriptor() {
        return drand48.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double drand48()
     * }
     */
    public static MethodHandle drand48$handle() {
        return drand48.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double drand48()
     * }
     */
    public static MemorySegment drand48$address() {
        return drand48.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double drand48()
     * }
     */
    public static double drand48() {
        var mh$ = drand48.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("drand48");
            }
            return (double)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class erand48 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_DOUBLE,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("erand48");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double erand48(unsigned short __xsubi[3])
     * }
     */
    public static FunctionDescriptor erand48$descriptor() {
        return erand48.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double erand48(unsigned short __xsubi[3])
     * }
     */
    public static MethodHandle erand48$handle() {
        return erand48.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double erand48(unsigned short __xsubi[3])
     * }
     */
    public static MemorySegment erand48$address() {
        return erand48.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double erand48(unsigned short __xsubi[3])
     * }
     */
    public static double erand48(MemorySegment __xsubi) {
        var mh$ = erand48.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("erand48", __xsubi);
            }
            return (double)mh$.invokeExact(__xsubi);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lrand48 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_LONG    );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("lrand48");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern long lrand48()
     * }
     */
    public static FunctionDescriptor lrand48$descriptor() {
        return lrand48.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern long lrand48()
     * }
     */
    public static MethodHandle lrand48$handle() {
        return lrand48.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern long lrand48()
     * }
     */
    public static MemorySegment lrand48$address() {
        return lrand48.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern long lrand48()
     * }
     */
    public static long lrand48() {
        var mh$ = lrand48.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lrand48");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class nrand48 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_LONG,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("nrand48");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern long nrand48(unsigned short __xsubi[3])
     * }
     */
    public static FunctionDescriptor nrand48$descriptor() {
        return nrand48.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern long nrand48(unsigned short __xsubi[3])
     * }
     */
    public static MethodHandle nrand48$handle() {
        return nrand48.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern long nrand48(unsigned short __xsubi[3])
     * }
     */
    public static MemorySegment nrand48$address() {
        return nrand48.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern long nrand48(unsigned short __xsubi[3])
     * }
     */
    public static long nrand48(MemorySegment __xsubi) {
        var mh$ = nrand48.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("nrand48", __xsubi);
            }
            return (long)mh$.invokeExact(__xsubi);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mrand48 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_LONG    );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("mrand48");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern long mrand48()
     * }
     */
    public static FunctionDescriptor mrand48$descriptor() {
        return mrand48.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern long mrand48()
     * }
     */
    public static MethodHandle mrand48$handle() {
        return mrand48.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern long mrand48()
     * }
     */
    public static MemorySegment mrand48$address() {
        return mrand48.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern long mrand48()
     * }
     */
    public static long mrand48() {
        var mh$ = mrand48.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mrand48");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class jrand48 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_LONG,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("jrand48");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern long jrand48(unsigned short __xsubi[3])
     * }
     */
    public static FunctionDescriptor jrand48$descriptor() {
        return jrand48.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern long jrand48(unsigned short __xsubi[3])
     * }
     */
    public static MethodHandle jrand48$handle() {
        return jrand48.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern long jrand48(unsigned short __xsubi[3])
     * }
     */
    public static MemorySegment jrand48$address() {
        return jrand48.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern long jrand48(unsigned short __xsubi[3])
     * }
     */
    public static long jrand48(MemorySegment __xsubi) {
        var mh$ = jrand48.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("jrand48", __xsubi);
            }
            return (long)mh$.invokeExact(__xsubi);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class srand48 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            TreeSitter.C_LONG
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("srand48");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void srand48(long __seedval)
     * }
     */
    public static FunctionDescriptor srand48$descriptor() {
        return srand48.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void srand48(long __seedval)
     * }
     */
    public static MethodHandle srand48$handle() {
        return srand48.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void srand48(long __seedval)
     * }
     */
    public static MemorySegment srand48$address() {
        return srand48.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void srand48(long __seedval)
     * }
     */
    public static void srand48(long __seedval) {
        var mh$ = srand48.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("srand48", __seedval);
            }
            mh$.invokeExact(__seedval);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class seed48 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("seed48");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned short *seed48(unsigned short __seed16v[3])
     * }
     */
    public static FunctionDescriptor seed48$descriptor() {
        return seed48.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned short *seed48(unsigned short __seed16v[3])
     * }
     */
    public static MethodHandle seed48$handle() {
        return seed48.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned short *seed48(unsigned short __seed16v[3])
     * }
     */
    public static MemorySegment seed48$address() {
        return seed48.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned short *seed48(unsigned short __seed16v[3])
     * }
     */
    public static MemorySegment seed48(MemorySegment __seed16v) {
        var mh$ = seed48.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("seed48", __seed16v);
            }
            return (MemorySegment)mh$.invokeExact(__seed16v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lcong48 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("lcong48");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void lcong48(unsigned short __param[7])
     * }
     */
    public static FunctionDescriptor lcong48$descriptor() {
        return lcong48.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void lcong48(unsigned short __param[7])
     * }
     */
    public static MethodHandle lcong48$handle() {
        return lcong48.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void lcong48(unsigned short __param[7])
     * }
     */
    public static MemorySegment lcong48$address() {
        return lcong48.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void lcong48(unsigned short __param[7])
     * }
     */
    public static void lcong48(MemorySegment __param) {
        var mh$ = lcong48.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lcong48", __param);
            }
            mh$.invokeExact(__param);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class drand48_r {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_INT,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("drand48_r");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int drand48_r(struct drand48_data *restrict __buffer, double *restrict __result)
     * }
     */
    public static FunctionDescriptor drand48_r$descriptor() {
        return drand48_r.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int drand48_r(struct drand48_data *restrict __buffer, double *restrict __result)
     * }
     */
    public static MethodHandle drand48_r$handle() {
        return drand48_r.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int drand48_r(struct drand48_data *restrict __buffer, double *restrict __result)
     * }
     */
    public static MemorySegment drand48_r$address() {
        return drand48_r.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int drand48_r(struct drand48_data *restrict __buffer, double *restrict __result)
     * }
     */
    public static int drand48_r(MemorySegment __buffer, MemorySegment __result) {
        var mh$ = drand48_r.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("drand48_r", __buffer, __result);
            }
            return (int)mh$.invokeExact(__buffer, __result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class erand48_r {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_INT,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("erand48_r");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int erand48_r(unsigned short __xsubi[3], struct drand48_data *restrict __buffer, double *restrict __result)
     * }
     */
    public static FunctionDescriptor erand48_r$descriptor() {
        return erand48_r.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int erand48_r(unsigned short __xsubi[3], struct drand48_data *restrict __buffer, double *restrict __result)
     * }
     */
    public static MethodHandle erand48_r$handle() {
        return erand48_r.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int erand48_r(unsigned short __xsubi[3], struct drand48_data *restrict __buffer, double *restrict __result)
     * }
     */
    public static MemorySegment erand48_r$address() {
        return erand48_r.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int erand48_r(unsigned short __xsubi[3], struct drand48_data *restrict __buffer, double *restrict __result)
     * }
     */
    public static int erand48_r(MemorySegment __xsubi, MemorySegment __buffer, MemorySegment __result) {
        var mh$ = erand48_r.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("erand48_r", __xsubi, __buffer, __result);
            }
            return (int)mh$.invokeExact(__xsubi, __buffer, __result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lrand48_r {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_INT,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("lrand48_r");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int lrand48_r(struct drand48_data *restrict __buffer, long *restrict __result)
     * }
     */
    public static FunctionDescriptor lrand48_r$descriptor() {
        return lrand48_r.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int lrand48_r(struct drand48_data *restrict __buffer, long *restrict __result)
     * }
     */
    public static MethodHandle lrand48_r$handle() {
        return lrand48_r.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int lrand48_r(struct drand48_data *restrict __buffer, long *restrict __result)
     * }
     */
    public static MemorySegment lrand48_r$address() {
        return lrand48_r.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int lrand48_r(struct drand48_data *restrict __buffer, long *restrict __result)
     * }
     */
    public static int lrand48_r(MemorySegment __buffer, MemorySegment __result) {
        var mh$ = lrand48_r.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lrand48_r", __buffer, __result);
            }
            return (int)mh$.invokeExact(__buffer, __result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class nrand48_r {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_INT,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("nrand48_r");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int nrand48_r(unsigned short __xsubi[3], struct drand48_data *restrict __buffer, long *restrict __result)
     * }
     */
    public static FunctionDescriptor nrand48_r$descriptor() {
        return nrand48_r.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int nrand48_r(unsigned short __xsubi[3], struct drand48_data *restrict __buffer, long *restrict __result)
     * }
     */
    public static MethodHandle nrand48_r$handle() {
        return nrand48_r.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int nrand48_r(unsigned short __xsubi[3], struct drand48_data *restrict __buffer, long *restrict __result)
     * }
     */
    public static MemorySegment nrand48_r$address() {
        return nrand48_r.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int nrand48_r(unsigned short __xsubi[3], struct drand48_data *restrict __buffer, long *restrict __result)
     * }
     */
    public static int nrand48_r(MemorySegment __xsubi, MemorySegment __buffer, MemorySegment __result) {
        var mh$ = nrand48_r.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("nrand48_r", __xsubi, __buffer, __result);
            }
            return (int)mh$.invokeExact(__xsubi, __buffer, __result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mrand48_r {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_INT,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("mrand48_r");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int mrand48_r(struct drand48_data *restrict __buffer, long *restrict __result)
     * }
     */
    public static FunctionDescriptor mrand48_r$descriptor() {
        return mrand48_r.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int mrand48_r(struct drand48_data *restrict __buffer, long *restrict __result)
     * }
     */
    public static MethodHandle mrand48_r$handle() {
        return mrand48_r.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int mrand48_r(struct drand48_data *restrict __buffer, long *restrict __result)
     * }
     */
    public static MemorySegment mrand48_r$address() {
        return mrand48_r.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int mrand48_r(struct drand48_data *restrict __buffer, long *restrict __result)
     * }
     */
    public static int mrand48_r(MemorySegment __buffer, MemorySegment __result) {
        var mh$ = mrand48_r.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mrand48_r", __buffer, __result);
            }
            return (int)mh$.invokeExact(__buffer, __result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class jrand48_r {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_INT,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("jrand48_r");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int jrand48_r(unsigned short __xsubi[3], struct drand48_data *restrict __buffer, long *restrict __result)
     * }
     */
    public static FunctionDescriptor jrand48_r$descriptor() {
        return jrand48_r.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int jrand48_r(unsigned short __xsubi[3], struct drand48_data *restrict __buffer, long *restrict __result)
     * }
     */
    public static MethodHandle jrand48_r$handle() {
        return jrand48_r.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int jrand48_r(unsigned short __xsubi[3], struct drand48_data *restrict __buffer, long *restrict __result)
     * }
     */
    public static MemorySegment jrand48_r$address() {
        return jrand48_r.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int jrand48_r(unsigned short __xsubi[3], struct drand48_data *restrict __buffer, long *restrict __result)
     * }
     */
    public static int jrand48_r(MemorySegment __xsubi, MemorySegment __buffer, MemorySegment __result) {
        var mh$ = jrand48_r.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("jrand48_r", __xsubi, __buffer, __result);
            }
            return (int)mh$.invokeExact(__xsubi, __buffer, __result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class srand48_r {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_INT,
            TreeSitter.C_LONG,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("srand48_r");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int srand48_r(long __seedval, struct drand48_data *__buffer)
     * }
     */
    public static FunctionDescriptor srand48_r$descriptor() {
        return srand48_r.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int srand48_r(long __seedval, struct drand48_data *__buffer)
     * }
     */
    public static MethodHandle srand48_r$handle() {
        return srand48_r.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int srand48_r(long __seedval, struct drand48_data *__buffer)
     * }
     */
    public static MemorySegment srand48_r$address() {
        return srand48_r.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int srand48_r(long __seedval, struct drand48_data *__buffer)
     * }
     */
    public static int srand48_r(long __seedval, MemorySegment __buffer) {
        var mh$ = srand48_r.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("srand48_r", __seedval, __buffer);
            }
            return (int)mh$.invokeExact(__seedval, __buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class seed48_r {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_INT,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("seed48_r");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int seed48_r(unsigned short __seed16v[3], struct drand48_data *__buffer)
     * }
     */
    public static FunctionDescriptor seed48_r$descriptor() {
        return seed48_r.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int seed48_r(unsigned short __seed16v[3], struct drand48_data *__buffer)
     * }
     */
    public static MethodHandle seed48_r$handle() {
        return seed48_r.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int seed48_r(unsigned short __seed16v[3], struct drand48_data *__buffer)
     * }
     */
    public static MemorySegment seed48_r$address() {
        return seed48_r.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int seed48_r(unsigned short __seed16v[3], struct drand48_data *__buffer)
     * }
     */
    public static int seed48_r(MemorySegment __seed16v, MemorySegment __buffer) {
        var mh$ = seed48_r.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("seed48_r", __seed16v, __buffer);
            }
            return (int)mh$.invokeExact(__seed16v, __buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lcong48_r {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_INT,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("lcong48_r");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int lcong48_r(unsigned short __param[7], struct drand48_data *__buffer)
     * }
     */
    public static FunctionDescriptor lcong48_r$descriptor() {
        return lcong48_r.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int lcong48_r(unsigned short __param[7], struct drand48_data *__buffer)
     * }
     */
    public static MethodHandle lcong48_r$handle() {
        return lcong48_r.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int lcong48_r(unsigned short __param[7], struct drand48_data *__buffer)
     * }
     */
    public static MemorySegment lcong48_r$address() {
        return lcong48_r.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int lcong48_r(unsigned short __param[7], struct drand48_data *__buffer)
     * }
     */
    public static int lcong48_r(MemorySegment __param, MemorySegment __buffer) {
        var mh$ = lcong48_r.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lcong48_r", __param, __buffer);
            }
            return (int)mh$.invokeExact(__param, __buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class malloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_POINTER,
            TreeSitter.C_LONG
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("malloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *malloc(size_t __size)
     * }
     */
    public static FunctionDescriptor malloc$descriptor() {
        return malloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *malloc(size_t __size)
     * }
     */
    public static MethodHandle malloc$handle() {
        return malloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *malloc(size_t __size)
     * }
     */
    public static MemorySegment malloc$address() {
        return malloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *malloc(size_t __size)
     * }
     */
    public static MemorySegment malloc(long __size) {
        var mh$ = malloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("malloc", __size);
            }
            return (MemorySegment)mh$.invokeExact(__size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class calloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_POINTER,
            TreeSitter.C_LONG,
            TreeSitter.C_LONG
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("calloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *calloc(size_t __nmemb, size_t __size)
     * }
     */
    public static FunctionDescriptor calloc$descriptor() {
        return calloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *calloc(size_t __nmemb, size_t __size)
     * }
     */
    public static MethodHandle calloc$handle() {
        return calloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *calloc(size_t __nmemb, size_t __size)
     * }
     */
    public static MemorySegment calloc$address() {
        return calloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *calloc(size_t __nmemb, size_t __size)
     * }
     */
    public static MemorySegment calloc(long __nmemb, long __size) {
        var mh$ = calloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("calloc", __nmemb, __size);
            }
            return (MemorySegment)mh$.invokeExact(__nmemb, __size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class realloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER,
            TreeSitter.C_LONG
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("realloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *realloc(void *__ptr, size_t __size)
     * }
     */
    public static FunctionDescriptor realloc$descriptor() {
        return realloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *realloc(void *__ptr, size_t __size)
     * }
     */
    public static MethodHandle realloc$handle() {
        return realloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *realloc(void *__ptr, size_t __size)
     * }
     */
    public static MemorySegment realloc$address() {
        return realloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *realloc(void *__ptr, size_t __size)
     * }
     */
    public static MemorySegment realloc(MemorySegment __ptr, long __size) {
        var mh$ = realloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("realloc", __ptr, __size);
            }
            return (MemorySegment)mh$.invokeExact(__ptr, __size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void free(void *__ptr)
     * }
     */
    public static FunctionDescriptor free$descriptor() {
        return free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void free(void *__ptr)
     * }
     */
    public static MethodHandle free$handle() {
        return free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void free(void *__ptr)
     * }
     */
    public static MemorySegment free$address() {
        return free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void free(void *__ptr)
     * }
     */
    public static void free(MemorySegment __ptr) {
        var mh$ = free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("free", __ptr);
            }
            mh$.invokeExact(__ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class reallocarray {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER,
            TreeSitter.C_LONG,
            TreeSitter.C_LONG
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("reallocarray");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *reallocarray(void *__ptr, size_t __nmemb, size_t __size)
     * }
     */
    public static FunctionDescriptor reallocarray$descriptor() {
        return reallocarray.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *reallocarray(void *__ptr, size_t __nmemb, size_t __size)
     * }
     */
    public static MethodHandle reallocarray$handle() {
        return reallocarray.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *reallocarray(void *__ptr, size_t __nmemb, size_t __size)
     * }
     */
    public static MemorySegment reallocarray$address() {
        return reallocarray.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *reallocarray(void *__ptr, size_t __nmemb, size_t __size)
     * }
     */
    public static MemorySegment reallocarray(MemorySegment __ptr, long __nmemb, long __size) {
        var mh$ = reallocarray.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("reallocarray", __ptr, __nmemb, __size);
            }
            return (MemorySegment)mh$.invokeExact(__ptr, __nmemb, __size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class alloca {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_POINTER,
            TreeSitter.C_LONG
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("alloca");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *alloca(size_t __size)
     * }
     */
    public static FunctionDescriptor alloca$descriptor() {
        return alloca.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *alloca(size_t __size)
     * }
     */
    public static MethodHandle alloca$handle() {
        return alloca.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *alloca(size_t __size)
     * }
     */
    public static MemorySegment alloca$address() {
        return alloca.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *alloca(size_t __size)
     * }
     */
    public static MemorySegment alloca(long __size) {
        var mh$ = alloca.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("alloca", __size);
            }
            return (MemorySegment)mh$.invokeExact(__size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class valloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_POINTER,
            TreeSitter.C_LONG
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("valloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *valloc(size_t __size)
     * }
     */
    public static FunctionDescriptor valloc$descriptor() {
        return valloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *valloc(size_t __size)
     * }
     */
    public static MethodHandle valloc$handle() {
        return valloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *valloc(size_t __size)
     * }
     */
    public static MemorySegment valloc$address() {
        return valloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *valloc(size_t __size)
     * }
     */
    public static MemorySegment valloc(long __size) {
        var mh$ = valloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("valloc", __size);
            }
            return (MemorySegment)mh$.invokeExact(__size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class posix_memalign {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_INT,
            TreeSitter.C_POINTER,
            TreeSitter.C_LONG,
            TreeSitter.C_LONG
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("posix_memalign");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int posix_memalign(void **__memptr, size_t __alignment, size_t __size)
     * }
     */
    public static FunctionDescriptor posix_memalign$descriptor() {
        return posix_memalign.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int posix_memalign(void **__memptr, size_t __alignment, size_t __size)
     * }
     */
    public static MethodHandle posix_memalign$handle() {
        return posix_memalign.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int posix_memalign(void **__memptr, size_t __alignment, size_t __size)
     * }
     */
    public static MemorySegment posix_memalign$address() {
        return posix_memalign.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int posix_memalign(void **__memptr, size_t __alignment, size_t __size)
     * }
     */
    public static int posix_memalign(MemorySegment __memptr, long __alignment, long __size) {
        var mh$ = posix_memalign.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("posix_memalign", __memptr, __alignment, __size);
            }
            return (int)mh$.invokeExact(__memptr, __alignment, __size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class aligned_alloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_POINTER,
            TreeSitter.C_LONG,
            TreeSitter.C_LONG
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("aligned_alloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *aligned_alloc(size_t __alignment, size_t __size)
     * }
     */
    public static FunctionDescriptor aligned_alloc$descriptor() {
        return aligned_alloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *aligned_alloc(size_t __alignment, size_t __size)
     * }
     */
    public static MethodHandle aligned_alloc$handle() {
        return aligned_alloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *aligned_alloc(size_t __alignment, size_t __size)
     * }
     */
    public static MemorySegment aligned_alloc$address() {
        return aligned_alloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *aligned_alloc(size_t __alignment, size_t __size)
     * }
     */
    public static MemorySegment aligned_alloc(long __alignment, long __size) {
        var mh$ = aligned_alloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("aligned_alloc", __alignment, __size);
            }
            return (MemorySegment)mh$.invokeExact(__alignment, __size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class abort {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("abort");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void abort()
     * }
     */
    public static FunctionDescriptor abort$descriptor() {
        return abort.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void abort()
     * }
     */
    public static MethodHandle abort$handle() {
        return abort.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void abort()
     * }
     */
    public static MemorySegment abort$address() {
        return abort.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void abort()
     * }
     */
    public static void abort() {
        var mh$ = abort.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("abort");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atexit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_INT,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("atexit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int atexit(void (*__func)(void))
     * }
     */
    public static FunctionDescriptor atexit$descriptor() {
        return atexit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int atexit(void (*__func)(void))
     * }
     */
    public static MethodHandle atexit$handle() {
        return atexit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int atexit(void (*__func)(void))
     * }
     */
    public static MemorySegment atexit$address() {
        return atexit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int atexit(void (*__func)(void))
     * }
     */
    public static int atexit(MemorySegment __func) {
        var mh$ = atexit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atexit", __func);
            }
            return (int)mh$.invokeExact(__func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class at_quick_exit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_INT,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("at_quick_exit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int at_quick_exit(void (*__func)(void))
     * }
     */
    public static FunctionDescriptor at_quick_exit$descriptor() {
        return at_quick_exit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int at_quick_exit(void (*__func)(void))
     * }
     */
    public static MethodHandle at_quick_exit$handle() {
        return at_quick_exit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int at_quick_exit(void (*__func)(void))
     * }
     */
    public static MemorySegment at_quick_exit$address() {
        return at_quick_exit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int at_quick_exit(void (*__func)(void))
     * }
     */
    public static int at_quick_exit(MemorySegment __func) {
        var mh$ = at_quick_exit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("at_quick_exit", __func);
            }
            return (int)mh$.invokeExact(__func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class on_exit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_INT,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("on_exit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int on_exit(void (*__func)(int, void *), void *__arg)
     * }
     */
    public static FunctionDescriptor on_exit$descriptor() {
        return on_exit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int on_exit(void (*__func)(int, void *), void *__arg)
     * }
     */
    public static MethodHandle on_exit$handle() {
        return on_exit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int on_exit(void (*__func)(int, void *), void *__arg)
     * }
     */
    public static MemorySegment on_exit$address() {
        return on_exit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int on_exit(void (*__func)(int, void *), void *__arg)
     * }
     */
    public static int on_exit(MemorySegment __func, MemorySegment __arg) {
        var mh$ = on_exit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("on_exit", __func, __arg);
            }
            return (int)mh$.invokeExact(__func, __arg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class exit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            TreeSitter.C_INT
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("exit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void exit(int __status)
     * }
     */
    public static FunctionDescriptor exit$descriptor() {
        return exit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void exit(int __status)
     * }
     */
    public static MethodHandle exit$handle() {
        return exit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void exit(int __status)
     * }
     */
    public static MemorySegment exit$address() {
        return exit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void exit(int __status)
     * }
     */
    public static void exit(int __status) {
        var mh$ = exit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("exit", __status);
            }
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class quick_exit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            TreeSitter.C_INT
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("quick_exit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void quick_exit(int __status)
     * }
     */
    public static FunctionDescriptor quick_exit$descriptor() {
        return quick_exit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void quick_exit(int __status)
     * }
     */
    public static MethodHandle quick_exit$handle() {
        return quick_exit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void quick_exit(int __status)
     * }
     */
    public static MemorySegment quick_exit$address() {
        return quick_exit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void quick_exit(int __status)
     * }
     */
    public static void quick_exit(int __status) {
        var mh$ = quick_exit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("quick_exit", __status);
            }
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _Exit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            TreeSitter.C_INT
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("_Exit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void _Exit(int __status)
     * }
     */
    public static FunctionDescriptor _Exit$descriptor() {
        return _Exit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void _Exit(int __status)
     * }
     */
    public static MethodHandle _Exit$handle() {
        return _Exit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void _Exit(int __status)
     * }
     */
    public static MemorySegment _Exit$address() {
        return _Exit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void _Exit(int __status)
     * }
     */
    public static void _Exit(int __status) {
        var mh$ = _Exit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_Exit", __status);
            }
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getenv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("getenv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *getenv(const char *__name)
     * }
     */
    public static FunctionDescriptor getenv$descriptor() {
        return getenv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *getenv(const char *__name)
     * }
     */
    public static MethodHandle getenv$handle() {
        return getenv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *getenv(const char *__name)
     * }
     */
    public static MemorySegment getenv$address() {
        return getenv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *getenv(const char *__name)
     * }
     */
    public static MemorySegment getenv(MemorySegment __name) {
        var mh$ = getenv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getenv", __name);
            }
            return (MemorySegment)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class putenv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_INT,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("putenv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int putenv(char *__string)
     * }
     */
    public static FunctionDescriptor putenv$descriptor() {
        return putenv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int putenv(char *__string)
     * }
     */
    public static MethodHandle putenv$handle() {
        return putenv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int putenv(char *__string)
     * }
     */
    public static MemorySegment putenv$address() {
        return putenv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int putenv(char *__string)
     * }
     */
    public static int putenv(MemorySegment __string) {
        var mh$ = putenv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("putenv", __string);
            }
            return (int)mh$.invokeExact(__string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class setenv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_INT,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER,
            TreeSitter.C_INT
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("setenv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int setenv(const char *__name, const char *__value, int __replace)
     * }
     */
    public static FunctionDescriptor setenv$descriptor() {
        return setenv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int setenv(const char *__name, const char *__value, int __replace)
     * }
     */
    public static MethodHandle setenv$handle() {
        return setenv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int setenv(const char *__name, const char *__value, int __replace)
     * }
     */
    public static MemorySegment setenv$address() {
        return setenv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int setenv(const char *__name, const char *__value, int __replace)
     * }
     */
    public static int setenv(MemorySegment __name, MemorySegment __value, int __replace) {
        var mh$ = setenv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setenv", __name, __value, __replace);
            }
            return (int)mh$.invokeExact(__name, __value, __replace);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class unsetenv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_INT,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("unsetenv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int unsetenv(const char *__name)
     * }
     */
    public static FunctionDescriptor unsetenv$descriptor() {
        return unsetenv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int unsetenv(const char *__name)
     * }
     */
    public static MethodHandle unsetenv$handle() {
        return unsetenv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int unsetenv(const char *__name)
     * }
     */
    public static MemorySegment unsetenv$address() {
        return unsetenv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int unsetenv(const char *__name)
     * }
     */
    public static int unsetenv(MemorySegment __name) {
        var mh$ = unsetenv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("unsetenv", __name);
            }
            return (int)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class clearenv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_INT    );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("clearenv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int clearenv()
     * }
     */
    public static FunctionDescriptor clearenv$descriptor() {
        return clearenv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int clearenv()
     * }
     */
    public static MethodHandle clearenv$handle() {
        return clearenv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int clearenv()
     * }
     */
    public static MemorySegment clearenv$address() {
        return clearenv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int clearenv()
     * }
     */
    public static int clearenv() {
        var mh$ = clearenv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("clearenv");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mktemp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("mktemp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *mktemp(char *__template)
     * }
     */
    public static FunctionDescriptor mktemp$descriptor() {
        return mktemp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *mktemp(char *__template)
     * }
     */
    public static MethodHandle mktemp$handle() {
        return mktemp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *mktemp(char *__template)
     * }
     */
    public static MemorySegment mktemp$address() {
        return mktemp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *mktemp(char *__template)
     * }
     */
    public static MemorySegment mktemp(MemorySegment __template) {
        var mh$ = mktemp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mktemp", __template);
            }
            return (MemorySegment)mh$.invokeExact(__template);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mkstemp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_INT,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("mkstemp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int mkstemp(char *__template)
     * }
     */
    public static FunctionDescriptor mkstemp$descriptor() {
        return mkstemp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int mkstemp(char *__template)
     * }
     */
    public static MethodHandle mkstemp$handle() {
        return mkstemp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int mkstemp(char *__template)
     * }
     */
    public static MemorySegment mkstemp$address() {
        return mkstemp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int mkstemp(char *__template)
     * }
     */
    public static int mkstemp(MemorySegment __template) {
        var mh$ = mkstemp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mkstemp", __template);
            }
            return (int)mh$.invokeExact(__template);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mkstemps {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_INT,
            TreeSitter.C_POINTER,
            TreeSitter.C_INT
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("mkstemps");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int mkstemps(char *__template, int __suffixlen)
     * }
     */
    public static FunctionDescriptor mkstemps$descriptor() {
        return mkstemps.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int mkstemps(char *__template, int __suffixlen)
     * }
     */
    public static MethodHandle mkstemps$handle() {
        return mkstemps.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int mkstemps(char *__template, int __suffixlen)
     * }
     */
    public static MemorySegment mkstemps$address() {
        return mkstemps.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int mkstemps(char *__template, int __suffixlen)
     * }
     */
    public static int mkstemps(MemorySegment __template, int __suffixlen) {
        var mh$ = mkstemps.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mkstemps", __template, __suffixlen);
            }
            return (int)mh$.invokeExact(__template, __suffixlen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mkdtemp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("mkdtemp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *mkdtemp(char *__template)
     * }
     */
    public static FunctionDescriptor mkdtemp$descriptor() {
        return mkdtemp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *mkdtemp(char *__template)
     * }
     */
    public static MethodHandle mkdtemp$handle() {
        return mkdtemp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *mkdtemp(char *__template)
     * }
     */
    public static MemorySegment mkdtemp$address() {
        return mkdtemp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *mkdtemp(char *__template)
     * }
     */
    public static MemorySegment mkdtemp(MemorySegment __template) {
        var mh$ = mkdtemp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mkdtemp", __template);
            }
            return (MemorySegment)mh$.invokeExact(__template);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class system {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_INT,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("system");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int system(const char *__command)
     * }
     */
    public static FunctionDescriptor system$descriptor() {
        return system.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int system(const char *__command)
     * }
     */
    public static MethodHandle system$handle() {
        return system.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int system(const char *__command)
     * }
     */
    public static MemorySegment system$address() {
        return system.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int system(const char *__command)
     * }
     */
    public static int system(MemorySegment __command) {
        var mh$ = system.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("system", __command);
            }
            return (int)mh$.invokeExact(__command);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class realpath {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("realpath");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *realpath(const char *restrict __name, char *restrict __resolved)
     * }
     */
    public static FunctionDescriptor realpath$descriptor() {
        return realpath.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *realpath(const char *restrict __name, char *restrict __resolved)
     * }
     */
    public static MethodHandle realpath$handle() {
        return realpath.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *realpath(const char *restrict __name, char *restrict __resolved)
     * }
     */
    public static MemorySegment realpath$address() {
        return realpath.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *realpath(const char *restrict __name, char *restrict __resolved)
     * }
     */
    public static MemorySegment realpath(MemorySegment __name, MemorySegment __resolved) {
        var mh$ = realpath.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("realpath", __name, __resolved);
            }
            return (MemorySegment)mh$.invokeExact(__name, __resolved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class bsearch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER,
            TreeSitter.C_LONG,
            TreeSitter.C_LONG,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("bsearch");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *bsearch(const void *__key, const void *__base, size_t __nmemb, size_t __size, __compar_fn_t __compar)
     * }
     */
    public static FunctionDescriptor bsearch$descriptor() {
        return bsearch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *bsearch(const void *__key, const void *__base, size_t __nmemb, size_t __size, __compar_fn_t __compar)
     * }
     */
    public static MethodHandle bsearch$handle() {
        return bsearch.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *bsearch(const void *__key, const void *__base, size_t __nmemb, size_t __size, __compar_fn_t __compar)
     * }
     */
    public static MemorySegment bsearch$address() {
        return bsearch.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *bsearch(const void *__key, const void *__base, size_t __nmemb, size_t __size, __compar_fn_t __compar)
     * }
     */
    public static MemorySegment bsearch(MemorySegment __key, MemorySegment __base, long __nmemb, long __size, MemorySegment __compar) {
        var mh$ = bsearch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("bsearch", __key, __base, __nmemb, __size, __compar);
            }
            return (MemorySegment)mh$.invokeExact(__key, __base, __nmemb, __size, __compar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class qsort {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            TreeSitter.C_POINTER,
            TreeSitter.C_LONG,
            TreeSitter.C_LONG,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("qsort");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void qsort(void *__base, size_t __nmemb, size_t __size, __compar_fn_t __compar)
     * }
     */
    public static FunctionDescriptor qsort$descriptor() {
        return qsort.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void qsort(void *__base, size_t __nmemb, size_t __size, __compar_fn_t __compar)
     * }
     */
    public static MethodHandle qsort$handle() {
        return qsort.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void qsort(void *__base, size_t __nmemb, size_t __size, __compar_fn_t __compar)
     * }
     */
    public static MemorySegment qsort$address() {
        return qsort.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void qsort(void *__base, size_t __nmemb, size_t __size, __compar_fn_t __compar)
     * }
     */
    public static void qsort(MemorySegment __base, long __nmemb, long __size, MemorySegment __compar) {
        var mh$ = qsort.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("qsort", __base, __nmemb, __size, __compar);
            }
            mh$.invokeExact(__base, __nmemb, __size, __compar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class abs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_INT,
            TreeSitter.C_INT
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("abs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int abs(int __x)
     * }
     */
    public static FunctionDescriptor abs$descriptor() {
        return abs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int abs(int __x)
     * }
     */
    public static MethodHandle abs$handle() {
        return abs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int abs(int __x)
     * }
     */
    public static MemorySegment abs$address() {
        return abs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int abs(int __x)
     * }
     */
    public static int abs(int __x) {
        var mh$ = abs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("abs", __x);
            }
            return (int)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class labs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_LONG,
            TreeSitter.C_LONG
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("labs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern long labs(long __x)
     * }
     */
    public static FunctionDescriptor labs$descriptor() {
        return labs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern long labs(long __x)
     * }
     */
    public static MethodHandle labs$handle() {
        return labs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern long labs(long __x)
     * }
     */
    public static MemorySegment labs$address() {
        return labs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern long labs(long __x)
     * }
     */
    public static long labs(long __x) {
        var mh$ = labs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("labs", __x);
            }
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class llabs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_LONG_LONG,
            TreeSitter.C_LONG_LONG
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("llabs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern long long llabs(long long __x)
     * }
     */
    public static FunctionDescriptor llabs$descriptor() {
        return llabs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern long long llabs(long long __x)
     * }
     */
    public static MethodHandle llabs$handle() {
        return llabs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern long long llabs(long long __x)
     * }
     */
    public static MemorySegment llabs$address() {
        return llabs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern long long llabs(long long __x)
     * }
     */
    public static long llabs(long __x) {
        var mh$ = llabs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("llabs", __x);
            }
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class div {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            div_t.layout(),
            TreeSitter.C_INT,
            TreeSitter.C_INT
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("div");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern div_t div(int __numer, int __denom)
     * }
     */
    public static FunctionDescriptor div$descriptor() {
        return div.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern div_t div(int __numer, int __denom)
     * }
     */
    public static MethodHandle div$handle() {
        return div.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern div_t div(int __numer, int __denom)
     * }
     */
    public static MemorySegment div$address() {
        return div.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern div_t div(int __numer, int __denom)
     * }
     */
    public static MemorySegment div(SegmentAllocator allocator, int __numer, int __denom) {
        var mh$ = div.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("div", allocator, __numer, __denom);
            }
            return (MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ldiv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            ldiv_t.layout(),
            TreeSitter.C_LONG,
            TreeSitter.C_LONG
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ldiv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ldiv_t ldiv(long __numer, long __denom)
     * }
     */
    public static FunctionDescriptor ldiv$descriptor() {
        return ldiv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ldiv_t ldiv(long __numer, long __denom)
     * }
     */
    public static MethodHandle ldiv$handle() {
        return ldiv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ldiv_t ldiv(long __numer, long __denom)
     * }
     */
    public static MemorySegment ldiv$address() {
        return ldiv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ldiv_t ldiv(long __numer, long __denom)
     * }
     */
    public static MemorySegment ldiv(SegmentAllocator allocator, long __numer, long __denom) {
        var mh$ = ldiv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ldiv", allocator, __numer, __denom);
            }
            return (MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lldiv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lldiv_t.layout(),
            TreeSitter.C_LONG_LONG,
            TreeSitter.C_LONG_LONG
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("lldiv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern lldiv_t lldiv(long long __numer, long long __denom)
     * }
     */
    public static FunctionDescriptor lldiv$descriptor() {
        return lldiv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern lldiv_t lldiv(long long __numer, long long __denom)
     * }
     */
    public static MethodHandle lldiv$handle() {
        return lldiv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern lldiv_t lldiv(long long __numer, long long __denom)
     * }
     */
    public static MemorySegment lldiv$address() {
        return lldiv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern lldiv_t lldiv(long long __numer, long long __denom)
     * }
     */
    public static MemorySegment lldiv(SegmentAllocator allocator, long __numer, long __denom) {
        var mh$ = lldiv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lldiv", allocator, __numer, __denom);
            }
            return (MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ecvt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_POINTER,
            TreeSitter.C_DOUBLE,
            TreeSitter.C_INT,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ecvt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *ecvt(double __value, int __ndigit, int *restrict __decpt, int *restrict __sign)
     * }
     */
    public static FunctionDescriptor ecvt$descriptor() {
        return ecvt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *ecvt(double __value, int __ndigit, int *restrict __decpt, int *restrict __sign)
     * }
     */
    public static MethodHandle ecvt$handle() {
        return ecvt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *ecvt(double __value, int __ndigit, int *restrict __decpt, int *restrict __sign)
     * }
     */
    public static MemorySegment ecvt$address() {
        return ecvt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *ecvt(double __value, int __ndigit, int *restrict __decpt, int *restrict __sign)
     * }
     */
    public static MemorySegment ecvt(double __value, int __ndigit, MemorySegment __decpt, MemorySegment __sign) {
        var mh$ = ecvt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ecvt", __value, __ndigit, __decpt, __sign);
            }
            return (MemorySegment)mh$.invokeExact(__value, __ndigit, __decpt, __sign);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fcvt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_POINTER,
            TreeSitter.C_DOUBLE,
            TreeSitter.C_INT,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("fcvt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *fcvt(double __value, int __ndigit, int *restrict __decpt, int *restrict __sign)
     * }
     */
    public static FunctionDescriptor fcvt$descriptor() {
        return fcvt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *fcvt(double __value, int __ndigit, int *restrict __decpt, int *restrict __sign)
     * }
     */
    public static MethodHandle fcvt$handle() {
        return fcvt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *fcvt(double __value, int __ndigit, int *restrict __decpt, int *restrict __sign)
     * }
     */
    public static MemorySegment fcvt$address() {
        return fcvt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *fcvt(double __value, int __ndigit, int *restrict __decpt, int *restrict __sign)
     * }
     */
    public static MemorySegment fcvt(double __value, int __ndigit, MemorySegment __decpt, MemorySegment __sign) {
        var mh$ = fcvt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fcvt", __value, __ndigit, __decpt, __sign);
            }
            return (MemorySegment)mh$.invokeExact(__value, __ndigit, __decpt, __sign);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gcvt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_POINTER,
            TreeSitter.C_DOUBLE,
            TreeSitter.C_INT,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("gcvt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *gcvt(double __value, int __ndigit, char *__buf)
     * }
     */
    public static FunctionDescriptor gcvt$descriptor() {
        return gcvt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *gcvt(double __value, int __ndigit, char *__buf)
     * }
     */
    public static MethodHandle gcvt$handle() {
        return gcvt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *gcvt(double __value, int __ndigit, char *__buf)
     * }
     */
    public static MemorySegment gcvt$address() {
        return gcvt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *gcvt(double __value, int __ndigit, char *__buf)
     * }
     */
    public static MemorySegment gcvt(double __value, int __ndigit, MemorySegment __buf) {
        var mh$ = gcvt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gcvt", __value, __ndigit, __buf);
            }
            return (MemorySegment)mh$.invokeExact(__value, __ndigit, __buf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ecvt_r {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_INT,
            TreeSitter.C_DOUBLE,
            TreeSitter.C_INT,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER,
            TreeSitter.C_LONG
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ecvt_r");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int ecvt_r(double __value, int __ndigit, int *restrict __decpt, int *restrict __sign, char *restrict __buf, size_t __len)
     * }
     */
    public static FunctionDescriptor ecvt_r$descriptor() {
        return ecvt_r.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int ecvt_r(double __value, int __ndigit, int *restrict __decpt, int *restrict __sign, char *restrict __buf, size_t __len)
     * }
     */
    public static MethodHandle ecvt_r$handle() {
        return ecvt_r.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int ecvt_r(double __value, int __ndigit, int *restrict __decpt, int *restrict __sign, char *restrict __buf, size_t __len)
     * }
     */
    public static MemorySegment ecvt_r$address() {
        return ecvt_r.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int ecvt_r(double __value, int __ndigit, int *restrict __decpt, int *restrict __sign, char *restrict __buf, size_t __len)
     * }
     */
    public static int ecvt_r(double __value, int __ndigit, MemorySegment __decpt, MemorySegment __sign, MemorySegment __buf, long __len) {
        var mh$ = ecvt_r.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ecvt_r", __value, __ndigit, __decpt, __sign, __buf, __len);
            }
            return (int)mh$.invokeExact(__value, __ndigit, __decpt, __sign, __buf, __len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fcvt_r {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_INT,
            TreeSitter.C_DOUBLE,
            TreeSitter.C_INT,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER,
            TreeSitter.C_LONG
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("fcvt_r");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fcvt_r(double __value, int __ndigit, int *restrict __decpt, int *restrict __sign, char *restrict __buf, size_t __len)
     * }
     */
    public static FunctionDescriptor fcvt_r$descriptor() {
        return fcvt_r.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fcvt_r(double __value, int __ndigit, int *restrict __decpt, int *restrict __sign, char *restrict __buf, size_t __len)
     * }
     */
    public static MethodHandle fcvt_r$handle() {
        return fcvt_r.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int fcvt_r(double __value, int __ndigit, int *restrict __decpt, int *restrict __sign, char *restrict __buf, size_t __len)
     * }
     */
    public static MemorySegment fcvt_r$address() {
        return fcvt_r.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int fcvt_r(double __value, int __ndigit, int *restrict __decpt, int *restrict __sign, char *restrict __buf, size_t __len)
     * }
     */
    public static int fcvt_r(double __value, int __ndigit, MemorySegment __decpt, MemorySegment __sign, MemorySegment __buf, long __len) {
        var mh$ = fcvt_r.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fcvt_r", __value, __ndigit, __decpt, __sign, __buf, __len);
            }
            return (int)mh$.invokeExact(__value, __ndigit, __decpt, __sign, __buf, __len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mblen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_INT,
            TreeSitter.C_POINTER,
            TreeSitter.C_LONG
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("mblen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int mblen(const char *__s, size_t __n)
     * }
     */
    public static FunctionDescriptor mblen$descriptor() {
        return mblen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int mblen(const char *__s, size_t __n)
     * }
     */
    public static MethodHandle mblen$handle() {
        return mblen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int mblen(const char *__s, size_t __n)
     * }
     */
    public static MemorySegment mblen$address() {
        return mblen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int mblen(const char *__s, size_t __n)
     * }
     */
    public static int mblen(MemorySegment __s, long __n) {
        var mh$ = mblen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mblen", __s, __n);
            }
            return (int)mh$.invokeExact(__s, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mbtowc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_INT,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER,
            TreeSitter.C_LONG
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("mbtowc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int mbtowc(wchar_t *restrict __pwc, const char *restrict __s, size_t __n)
     * }
     */
    public static FunctionDescriptor mbtowc$descriptor() {
        return mbtowc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int mbtowc(wchar_t *restrict __pwc, const char *restrict __s, size_t __n)
     * }
     */
    public static MethodHandle mbtowc$handle() {
        return mbtowc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int mbtowc(wchar_t *restrict __pwc, const char *restrict __s, size_t __n)
     * }
     */
    public static MemorySegment mbtowc$address() {
        return mbtowc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int mbtowc(wchar_t *restrict __pwc, const char *restrict __s, size_t __n)
     * }
     */
    public static int mbtowc(MemorySegment __pwc, MemorySegment __s, long __n) {
        var mh$ = mbtowc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mbtowc", __pwc, __s, __n);
            }
            return (int)mh$.invokeExact(__pwc, __s, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wctomb {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_INT,
            TreeSitter.C_POINTER,
            TreeSitter.C_INT
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("wctomb");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int wctomb(char *__s, wchar_t __wchar)
     * }
     */
    public static FunctionDescriptor wctomb$descriptor() {
        return wctomb.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int wctomb(char *__s, wchar_t __wchar)
     * }
     */
    public static MethodHandle wctomb$handle() {
        return wctomb.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int wctomb(char *__s, wchar_t __wchar)
     * }
     */
    public static MemorySegment wctomb$address() {
        return wctomb.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int wctomb(char *__s, wchar_t __wchar)
     * }
     */
    public static int wctomb(MemorySegment __s, int __wchar) {
        var mh$ = wctomb.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wctomb", __s, __wchar);
            }
            return (int)mh$.invokeExact(__s, __wchar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mbstowcs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_LONG,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER,
            TreeSitter.C_LONG
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("mbstowcs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern size_t mbstowcs(wchar_t *restrict __pwcs, const char *restrict __s, size_t __n)
     * }
     */
    public static FunctionDescriptor mbstowcs$descriptor() {
        return mbstowcs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern size_t mbstowcs(wchar_t *restrict __pwcs, const char *restrict __s, size_t __n)
     * }
     */
    public static MethodHandle mbstowcs$handle() {
        return mbstowcs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern size_t mbstowcs(wchar_t *restrict __pwcs, const char *restrict __s, size_t __n)
     * }
     */
    public static MemorySegment mbstowcs$address() {
        return mbstowcs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern size_t mbstowcs(wchar_t *restrict __pwcs, const char *restrict __s, size_t __n)
     * }
     */
    public static long mbstowcs(MemorySegment __pwcs, MemorySegment __s, long __n) {
        var mh$ = mbstowcs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mbstowcs", __pwcs, __s, __n);
            }
            return (long)mh$.invokeExact(__pwcs, __s, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wcstombs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_LONG,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER,
            TreeSitter.C_LONG
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("wcstombs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern size_t wcstombs(char *restrict __s, const wchar_t *restrict __pwcs, size_t __n)
     * }
     */
    public static FunctionDescriptor wcstombs$descriptor() {
        return wcstombs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern size_t wcstombs(char *restrict __s, const wchar_t *restrict __pwcs, size_t __n)
     * }
     */
    public static MethodHandle wcstombs$handle() {
        return wcstombs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern size_t wcstombs(char *restrict __s, const wchar_t *restrict __pwcs, size_t __n)
     * }
     */
    public static MemorySegment wcstombs$address() {
        return wcstombs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern size_t wcstombs(char *restrict __s, const wchar_t *restrict __pwcs, size_t __n)
     * }
     */
    public static long wcstombs(MemorySegment __s, MemorySegment __pwcs, long __n) {
        var mh$ = wcstombs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wcstombs", __s, __pwcs, __n);
            }
            return (long)mh$.invokeExact(__s, __pwcs, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rpmatch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_INT,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("rpmatch");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int rpmatch(const char *__response)
     * }
     */
    public static FunctionDescriptor rpmatch$descriptor() {
        return rpmatch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int rpmatch(const char *__response)
     * }
     */
    public static MethodHandle rpmatch$handle() {
        return rpmatch.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int rpmatch(const char *__response)
     * }
     */
    public static MemorySegment rpmatch$address() {
        return rpmatch.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int rpmatch(const char *__response)
     * }
     */
    public static int rpmatch(MemorySegment __response) {
        var mh$ = rpmatch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rpmatch", __response);
            }
            return (int)mh$.invokeExact(__response);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getsubopt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_INT,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("getsubopt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int getsubopt(char **restrict __optionp, char *const *restrict __tokens, char **restrict __valuep)
     * }
     */
    public static FunctionDescriptor getsubopt$descriptor() {
        return getsubopt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int getsubopt(char **restrict __optionp, char *const *restrict __tokens, char **restrict __valuep)
     * }
     */
    public static MethodHandle getsubopt$handle() {
        return getsubopt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int getsubopt(char **restrict __optionp, char *const *restrict __tokens, char **restrict __valuep)
     * }
     */
    public static MemorySegment getsubopt$address() {
        return getsubopt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int getsubopt(char **restrict __optionp, char *const *restrict __tokens, char **restrict __valuep)
     * }
     */
    public static int getsubopt(MemorySegment __optionp, MemorySegment __tokens, MemorySegment __valuep) {
        var mh$ = getsubopt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getsubopt", __optionp, __tokens, __valuep);
            }
            return (int)mh$.invokeExact(__optionp, __tokens, __valuep);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getloadavg {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_INT,
            TreeSitter.C_POINTER,
            TreeSitter.C_INT
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("getloadavg");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int getloadavg(double __loadavg[], int __nelem)
     * }
     */
    public static FunctionDescriptor getloadavg$descriptor() {
        return getloadavg.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int getloadavg(double __loadavg[], int __nelem)
     * }
     */
    public static MethodHandle getloadavg$handle() {
        return getloadavg.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int getloadavg(double __loadavg[], int __nelem)
     * }
     */
    public static MemorySegment getloadavg$address() {
        return getloadavg.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int getloadavg(double __loadavg[], int __nelem)
     * }
     */
    public static int getloadavg(MemorySegment __loadavg, int __nelem) {
        var mh$ = getloadavg.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getloadavg", __loadavg, __nelem);
            }
            return (int)mh$.invokeExact(__loadavg, __nelem);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef __uint8_t uint8_t
     * }
     */
    public static final OfByte uint8_t = TreeSitter.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __uint16_t uint16_t
     * }
     */
    public static final OfShort uint16_t = TreeSitter.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t uint32_t
     * }
     */
    public static final OfInt uint32_t = TreeSitter.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint64_t uint64_t
     * }
     */
    public static final OfLong uint64_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int_least8_t int_least8_t
     * }
     */
    public static final OfByte int_least8_t = TreeSitter.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __int_least16_t int_least16_t
     * }
     */
    public static final OfShort int_least16_t = TreeSitter.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __int_least32_t int_least32_t
     * }
     */
    public static final OfInt int_least32_t = TreeSitter.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int_least64_t int_least64_t
     * }
     */
    public static final OfLong int_least64_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uint_least8_t uint_least8_t
     * }
     */
    public static final OfByte uint_least8_t = TreeSitter.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __uint_least16_t uint_least16_t
     * }
     */
    public static final OfShort uint_least16_t = TreeSitter.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __uint_least32_t uint_least32_t
     * }
     */
    public static final OfInt uint_least32_t = TreeSitter.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint_least64_t uint_least64_t
     * }
     */
    public static final OfLong uint_least64_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef signed char int_fast8_t
     * }
     */
    public static final OfByte int_fast8_t = TreeSitter.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef long int_fast16_t
     * }
     */
    public static final OfLong int_fast16_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long int_fast32_t
     * }
     */
    public static final OfLong int_fast32_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long int_fast64_t
     * }
     */
    public static final OfLong int_fast64_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned char uint_fast8_t
     * }
     */
    public static final OfByte uint_fast8_t = TreeSitter.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uint_fast16_t
     * }
     */
    public static final OfLong uint_fast16_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uint_fast32_t
     * }
     */
    public static final OfLong uint_fast32_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uint_fast64_t
     * }
     */
    public static final OfLong uint_fast64_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long intptr_t
     * }
     */
    public static final OfLong intptr_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uintptr_t
     * }
     */
    public static final OfLong uintptr_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __intmax_t intmax_t
     * }
     */
    public static final OfLong intmax_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uintmax_t uintmax_t
     * }
     */
    public static final OfLong uintmax_t = TreeSitter.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef uint16_t TSStateId
     * }
     */
    public static final OfShort TSStateId = TreeSitter.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef uint16_t TSSymbol
     * }
     */
    public static final OfShort TSSymbol = TreeSitter.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef uint16_t TSFieldId
     * }
     */
    public static final OfShort TSFieldId = TreeSitter.C_SHORT;
    private static final int TSInputEncodingUTF8 = (int)0L;
    /**
     * {@snippet lang=c :
     * enum TSInputEncoding.TSInputEncodingUTF8 = 0
     * }
     */
    public static int TSInputEncodingUTF8() {
        return TSInputEncodingUTF8;
    }
    private static final int TSInputEncodingUTF16 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum TSInputEncoding.TSInputEncodingUTF16 = 1
     * }
     */
    public static int TSInputEncodingUTF16() {
        return TSInputEncodingUTF16;
    }
    private static final int TSSymbolTypeRegular = (int)0L;
    /**
     * {@snippet lang=c :
     * enum TSSymbolType.TSSymbolTypeRegular = 0
     * }
     */
    public static int TSSymbolTypeRegular() {
        return TSSymbolTypeRegular;
    }
    private static final int TSSymbolTypeAnonymous = (int)1L;
    /**
     * {@snippet lang=c :
     * enum TSSymbolType.TSSymbolTypeAnonymous = 1
     * }
     */
    public static int TSSymbolTypeAnonymous() {
        return TSSymbolTypeAnonymous;
    }
    private static final int TSSymbolTypeAuxiliary = (int)2L;
    /**
     * {@snippet lang=c :
     * enum TSSymbolType.TSSymbolTypeAuxiliary = 2
     * }
     */
    public static int TSSymbolTypeAuxiliary() {
        return TSSymbolTypeAuxiliary;
    }
    private static final int TSLogTypeParse = (int)0L;
    /**
     * {@snippet lang=c :
     * enum TSLogType.TSLogTypeParse = 0
     * }
     */
    public static int TSLogTypeParse() {
        return TSLogTypeParse;
    }
    private static final int TSLogTypeLex = (int)1L;
    /**
     * {@snippet lang=c :
     * enum TSLogType.TSLogTypeLex = 1
     * }
     */
    public static int TSLogTypeLex() {
        return TSLogTypeLex;
    }
    private static final int TSQuantifierZero = (int)0L;
    /**
     * {@snippet lang=c :
     * enum TSQuantifier.TSQuantifierZero = 0
     * }
     */
    public static int TSQuantifierZero() {
        return TSQuantifierZero;
    }
    private static final int TSQuantifierZeroOrOne = (int)1L;
    /**
     * {@snippet lang=c :
     * enum TSQuantifier.TSQuantifierZeroOrOne = 1
     * }
     */
    public static int TSQuantifierZeroOrOne() {
        return TSQuantifierZeroOrOne;
    }
    private static final int TSQuantifierZeroOrMore = (int)2L;
    /**
     * {@snippet lang=c :
     * enum TSQuantifier.TSQuantifierZeroOrMore = 2
     * }
     */
    public static int TSQuantifierZeroOrMore() {
        return TSQuantifierZeroOrMore;
    }
    private static final int TSQuantifierOne = (int)3L;
    /**
     * {@snippet lang=c :
     * enum TSQuantifier.TSQuantifierOne = 3
     * }
     */
    public static int TSQuantifierOne() {
        return TSQuantifierOne;
    }
    private static final int TSQuantifierOneOrMore = (int)4L;
    /**
     * {@snippet lang=c :
     * enum TSQuantifier.TSQuantifierOneOrMore = 4
     * }
     */
    public static int TSQuantifierOneOrMore() {
        return TSQuantifierOneOrMore;
    }
    private static final int TSQueryPredicateStepTypeDone = (int)0L;
    /**
     * {@snippet lang=c :
     * enum TSQueryPredicateStepType.TSQueryPredicateStepTypeDone = 0
     * }
     */
    public static int TSQueryPredicateStepTypeDone() {
        return TSQueryPredicateStepTypeDone;
    }
    private static final int TSQueryPredicateStepTypeCapture = (int)1L;
    /**
     * {@snippet lang=c :
     * enum TSQueryPredicateStepType.TSQueryPredicateStepTypeCapture = 1
     * }
     */
    public static int TSQueryPredicateStepTypeCapture() {
        return TSQueryPredicateStepTypeCapture;
    }
    private static final int TSQueryPredicateStepTypeString = (int)2L;
    /**
     * {@snippet lang=c :
     * enum TSQueryPredicateStepType.TSQueryPredicateStepTypeString = 2
     * }
     */
    public static int TSQueryPredicateStepTypeString() {
        return TSQueryPredicateStepTypeString;
    }
    private static final int TSQueryErrorNone = (int)0L;
    /**
     * {@snippet lang=c :
     * enum TSQueryError.TSQueryErrorNone = 0
     * }
     */
    public static int TSQueryErrorNone() {
        return TSQueryErrorNone;
    }
    private static final int TSQueryErrorSyntax = (int)1L;
    /**
     * {@snippet lang=c :
     * enum TSQueryError.TSQueryErrorSyntax = 1
     * }
     */
    public static int TSQueryErrorSyntax() {
        return TSQueryErrorSyntax;
    }
    private static final int TSQueryErrorNodeType = (int)2L;
    /**
     * {@snippet lang=c :
     * enum TSQueryError.TSQueryErrorNodeType = 2
     * }
     */
    public static int TSQueryErrorNodeType() {
        return TSQueryErrorNodeType;
    }
    private static final int TSQueryErrorField = (int)3L;
    /**
     * {@snippet lang=c :
     * enum TSQueryError.TSQueryErrorField = 3
     * }
     */
    public static int TSQueryErrorField() {
        return TSQueryErrorField;
    }
    private static final int TSQueryErrorCapture = (int)4L;
    /**
     * {@snippet lang=c :
     * enum TSQueryError.TSQueryErrorCapture = 4
     * }
     */
    public static int TSQueryErrorCapture() {
        return TSQueryErrorCapture;
    }
    private static final int TSQueryErrorStructure = (int)5L;
    /**
     * {@snippet lang=c :
     * enum TSQueryError.TSQueryErrorStructure = 5
     * }
     */
    public static int TSQueryErrorStructure() {
        return TSQueryErrorStructure;
    }
    private static final int TSQueryErrorLanguage = (int)6L;
    /**
     * {@snippet lang=c :
     * enum TSQueryError.TSQueryErrorLanguage = 6
     * }
     */
    public static int TSQueryErrorLanguage() {
        return TSQueryErrorLanguage;
    }

    private static class ts_parser_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_POINTER    );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_parser_new");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TSParser *ts_parser_new()
     * }
     */
    public static FunctionDescriptor ts_parser_new$descriptor() {
        return ts_parser_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TSParser *ts_parser_new()
     * }
     */
    public static MethodHandle ts_parser_new$handle() {
        return ts_parser_new.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TSParser *ts_parser_new()
     * }
     */
    public static MemorySegment ts_parser_new$address() {
        return ts_parser_new.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TSParser *ts_parser_new()
     * }
     */
    public static MemorySegment ts_parser_new() {
        var mh$ = ts_parser_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_parser_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_parser_delete {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_parser_delete");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ts_parser_delete(TSParser *self)
     * }
     */
    public static FunctionDescriptor ts_parser_delete$descriptor() {
        return ts_parser_delete.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ts_parser_delete(TSParser *self)
     * }
     */
    public static MethodHandle ts_parser_delete$handle() {
        return ts_parser_delete.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ts_parser_delete(TSParser *self)
     * }
     */
    public static MemorySegment ts_parser_delete$address() {
        return ts_parser_delete.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ts_parser_delete(TSParser *self)
     * }
     */
    public static void ts_parser_delete(MemorySegment self) {
        var mh$ = ts_parser_delete.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_parser_delete", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_parser_language {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_parser_language");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const TSLanguage *ts_parser_language(const TSParser *self)
     * }
     */
    public static FunctionDescriptor ts_parser_language$descriptor() {
        return ts_parser_language.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const TSLanguage *ts_parser_language(const TSParser *self)
     * }
     */
    public static MethodHandle ts_parser_language$handle() {
        return ts_parser_language.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const TSLanguage *ts_parser_language(const TSParser *self)
     * }
     */
    public static MemorySegment ts_parser_language$address() {
        return ts_parser_language.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const TSLanguage *ts_parser_language(const TSParser *self)
     * }
     */
    public static MemorySegment ts_parser_language(MemorySegment self) {
        var mh$ = ts_parser_language.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_parser_language", self);
            }
            return (MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_parser_set_language {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_BOOL,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_parser_set_language");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * _Bool ts_parser_set_language(TSParser *self, const TSLanguage *language)
     * }
     */
    public static FunctionDescriptor ts_parser_set_language$descriptor() {
        return ts_parser_set_language.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * _Bool ts_parser_set_language(TSParser *self, const TSLanguage *language)
     * }
     */
    public static MethodHandle ts_parser_set_language$handle() {
        return ts_parser_set_language.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * _Bool ts_parser_set_language(TSParser *self, const TSLanguage *language)
     * }
     */
    public static MemorySegment ts_parser_set_language$address() {
        return ts_parser_set_language.ADDR;
    }

    /**
     * {@snippet lang=c :
     * _Bool ts_parser_set_language(TSParser *self, const TSLanguage *language)
     * }
     */
    public static boolean ts_parser_set_language(MemorySegment self, MemorySegment language) {
        var mh$ = ts_parser_set_language.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_parser_set_language", self, language);
            }
            return (boolean)mh$.invokeExact(self, language);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_parser_set_included_ranges {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_BOOL,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER,
            TreeSitter.C_INT
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_parser_set_included_ranges");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * _Bool ts_parser_set_included_ranges(TSParser *self, const TSRange *ranges, uint32_t count)
     * }
     */
    public static FunctionDescriptor ts_parser_set_included_ranges$descriptor() {
        return ts_parser_set_included_ranges.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * _Bool ts_parser_set_included_ranges(TSParser *self, const TSRange *ranges, uint32_t count)
     * }
     */
    public static MethodHandle ts_parser_set_included_ranges$handle() {
        return ts_parser_set_included_ranges.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * _Bool ts_parser_set_included_ranges(TSParser *self, const TSRange *ranges, uint32_t count)
     * }
     */
    public static MemorySegment ts_parser_set_included_ranges$address() {
        return ts_parser_set_included_ranges.ADDR;
    }

    /**
     * {@snippet lang=c :
     * _Bool ts_parser_set_included_ranges(TSParser *self, const TSRange *ranges, uint32_t count)
     * }
     */
    public static boolean ts_parser_set_included_ranges(MemorySegment self, MemorySegment ranges, int count) {
        var mh$ = ts_parser_set_included_ranges.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_parser_set_included_ranges", self, ranges, count);
            }
            return (boolean)mh$.invokeExact(self, ranges, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_parser_included_ranges {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_parser_included_ranges");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const TSRange *ts_parser_included_ranges(const TSParser *self, uint32_t *count)
     * }
     */
    public static FunctionDescriptor ts_parser_included_ranges$descriptor() {
        return ts_parser_included_ranges.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const TSRange *ts_parser_included_ranges(const TSParser *self, uint32_t *count)
     * }
     */
    public static MethodHandle ts_parser_included_ranges$handle() {
        return ts_parser_included_ranges.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const TSRange *ts_parser_included_ranges(const TSParser *self, uint32_t *count)
     * }
     */
    public static MemorySegment ts_parser_included_ranges$address() {
        return ts_parser_included_ranges.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const TSRange *ts_parser_included_ranges(const TSParser *self, uint32_t *count)
     * }
     */
    public static MemorySegment ts_parser_included_ranges(MemorySegment self, MemorySegment count) {
        var mh$ = ts_parser_included_ranges.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_parser_included_ranges", self, count);
            }
            return (MemorySegment)mh$.invokeExact(self, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_parser_parse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER,
            TSInput.layout()
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_parser_parse");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TSTree *ts_parser_parse(TSParser *self, const TSTree *old_tree, TSInput input)
     * }
     */
    public static FunctionDescriptor ts_parser_parse$descriptor() {
        return ts_parser_parse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TSTree *ts_parser_parse(TSParser *self, const TSTree *old_tree, TSInput input)
     * }
     */
    public static MethodHandle ts_parser_parse$handle() {
        return ts_parser_parse.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TSTree *ts_parser_parse(TSParser *self, const TSTree *old_tree, TSInput input)
     * }
     */
    public static MemorySegment ts_parser_parse$address() {
        return ts_parser_parse.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TSTree *ts_parser_parse(TSParser *self, const TSTree *old_tree, TSInput input)
     * }
     */
    public static MemorySegment ts_parser_parse(MemorySegment self, MemorySegment old_tree, MemorySegment input) {
        var mh$ = ts_parser_parse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_parser_parse", self, old_tree, input);
            }
            return (MemorySegment)mh$.invokeExact(self, old_tree, input);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_parser_parse_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER,
            TreeSitter.C_INT
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_parser_parse_string");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TSTree *ts_parser_parse_string(TSParser *self, const TSTree *old_tree, const char *string, uint32_t length)
     * }
     */
    public static FunctionDescriptor ts_parser_parse_string$descriptor() {
        return ts_parser_parse_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TSTree *ts_parser_parse_string(TSParser *self, const TSTree *old_tree, const char *string, uint32_t length)
     * }
     */
    public static MethodHandle ts_parser_parse_string$handle() {
        return ts_parser_parse_string.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TSTree *ts_parser_parse_string(TSParser *self, const TSTree *old_tree, const char *string, uint32_t length)
     * }
     */
    public static MemorySegment ts_parser_parse_string$address() {
        return ts_parser_parse_string.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TSTree *ts_parser_parse_string(TSParser *self, const TSTree *old_tree, const char *string, uint32_t length)
     * }
     */
    public static MemorySegment ts_parser_parse_string(MemorySegment self, MemorySegment old_tree, MemorySegment string, int length) {
        var mh$ = ts_parser_parse_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_parser_parse_string", self, old_tree, string, length);
            }
            return (MemorySegment)mh$.invokeExact(self, old_tree, string, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_parser_parse_string_encoding {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER,
            TreeSitter.C_INT,
            TreeSitter.C_INT
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_parser_parse_string_encoding");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TSTree *ts_parser_parse_string_encoding(TSParser *self, const TSTree *old_tree, const char *string, uint32_t length, TSInputEncoding encoding)
     * }
     */
    public static FunctionDescriptor ts_parser_parse_string_encoding$descriptor() {
        return ts_parser_parse_string_encoding.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TSTree *ts_parser_parse_string_encoding(TSParser *self, const TSTree *old_tree, const char *string, uint32_t length, TSInputEncoding encoding)
     * }
     */
    public static MethodHandle ts_parser_parse_string_encoding$handle() {
        return ts_parser_parse_string_encoding.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TSTree *ts_parser_parse_string_encoding(TSParser *self, const TSTree *old_tree, const char *string, uint32_t length, TSInputEncoding encoding)
     * }
     */
    public static MemorySegment ts_parser_parse_string_encoding$address() {
        return ts_parser_parse_string_encoding.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TSTree *ts_parser_parse_string_encoding(TSParser *self, const TSTree *old_tree, const char *string, uint32_t length, TSInputEncoding encoding)
     * }
     */
    public static MemorySegment ts_parser_parse_string_encoding(MemorySegment self, MemorySegment old_tree, MemorySegment string, int length, int encoding) {
        var mh$ = ts_parser_parse_string_encoding.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_parser_parse_string_encoding", self, old_tree, string, length, encoding);
            }
            return (MemorySegment)mh$.invokeExact(self, old_tree, string, length, encoding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_parser_reset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_parser_reset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ts_parser_reset(TSParser *self)
     * }
     */
    public static FunctionDescriptor ts_parser_reset$descriptor() {
        return ts_parser_reset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ts_parser_reset(TSParser *self)
     * }
     */
    public static MethodHandle ts_parser_reset$handle() {
        return ts_parser_reset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ts_parser_reset(TSParser *self)
     * }
     */
    public static MemorySegment ts_parser_reset$address() {
        return ts_parser_reset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ts_parser_reset(TSParser *self)
     * }
     */
    public static void ts_parser_reset(MemorySegment self) {
        var mh$ = ts_parser_reset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_parser_reset", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_parser_set_timeout_micros {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            TreeSitter.C_POINTER,
            TreeSitter.C_LONG
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_parser_set_timeout_micros");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ts_parser_set_timeout_micros(TSParser *self, uint64_t timeout_micros)
     * }
     */
    public static FunctionDescriptor ts_parser_set_timeout_micros$descriptor() {
        return ts_parser_set_timeout_micros.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ts_parser_set_timeout_micros(TSParser *self, uint64_t timeout_micros)
     * }
     */
    public static MethodHandle ts_parser_set_timeout_micros$handle() {
        return ts_parser_set_timeout_micros.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ts_parser_set_timeout_micros(TSParser *self, uint64_t timeout_micros)
     * }
     */
    public static MemorySegment ts_parser_set_timeout_micros$address() {
        return ts_parser_set_timeout_micros.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ts_parser_set_timeout_micros(TSParser *self, uint64_t timeout_micros)
     * }
     */
    public static void ts_parser_set_timeout_micros(MemorySegment self, long timeout_micros) {
        var mh$ = ts_parser_set_timeout_micros.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_parser_set_timeout_micros", self, timeout_micros);
            }
            mh$.invokeExact(self, timeout_micros);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_parser_timeout_micros {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_LONG,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_parser_timeout_micros");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint64_t ts_parser_timeout_micros(const TSParser *self)
     * }
     */
    public static FunctionDescriptor ts_parser_timeout_micros$descriptor() {
        return ts_parser_timeout_micros.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint64_t ts_parser_timeout_micros(const TSParser *self)
     * }
     */
    public static MethodHandle ts_parser_timeout_micros$handle() {
        return ts_parser_timeout_micros.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * uint64_t ts_parser_timeout_micros(const TSParser *self)
     * }
     */
    public static MemorySegment ts_parser_timeout_micros$address() {
        return ts_parser_timeout_micros.ADDR;
    }

    /**
     * {@snippet lang=c :
     * uint64_t ts_parser_timeout_micros(const TSParser *self)
     * }
     */
    public static long ts_parser_timeout_micros(MemorySegment self) {
        var mh$ = ts_parser_timeout_micros.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_parser_timeout_micros", self);
            }
            return (long)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_parser_set_cancellation_flag {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_parser_set_cancellation_flag");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ts_parser_set_cancellation_flag(TSParser *self, const size_t *flag)
     * }
     */
    public static FunctionDescriptor ts_parser_set_cancellation_flag$descriptor() {
        return ts_parser_set_cancellation_flag.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ts_parser_set_cancellation_flag(TSParser *self, const size_t *flag)
     * }
     */
    public static MethodHandle ts_parser_set_cancellation_flag$handle() {
        return ts_parser_set_cancellation_flag.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ts_parser_set_cancellation_flag(TSParser *self, const size_t *flag)
     * }
     */
    public static MemorySegment ts_parser_set_cancellation_flag$address() {
        return ts_parser_set_cancellation_flag.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ts_parser_set_cancellation_flag(TSParser *self, const size_t *flag)
     * }
     */
    public static void ts_parser_set_cancellation_flag(MemorySegment self, MemorySegment flag) {
        var mh$ = ts_parser_set_cancellation_flag.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_parser_set_cancellation_flag", self, flag);
            }
            mh$.invokeExact(self, flag);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_parser_cancellation_flag {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_parser_cancellation_flag");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const size_t *ts_parser_cancellation_flag(const TSParser *self)
     * }
     */
    public static FunctionDescriptor ts_parser_cancellation_flag$descriptor() {
        return ts_parser_cancellation_flag.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const size_t *ts_parser_cancellation_flag(const TSParser *self)
     * }
     */
    public static MethodHandle ts_parser_cancellation_flag$handle() {
        return ts_parser_cancellation_flag.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const size_t *ts_parser_cancellation_flag(const TSParser *self)
     * }
     */
    public static MemorySegment ts_parser_cancellation_flag$address() {
        return ts_parser_cancellation_flag.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const size_t *ts_parser_cancellation_flag(const TSParser *self)
     * }
     */
    public static MemorySegment ts_parser_cancellation_flag(MemorySegment self) {
        var mh$ = ts_parser_cancellation_flag.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_parser_cancellation_flag", self);
            }
            return (MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_parser_set_logger {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            TreeSitter.C_POINTER,
            TSLogger.layout()
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_parser_set_logger");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ts_parser_set_logger(TSParser *self, TSLogger logger)
     * }
     */
    public static FunctionDescriptor ts_parser_set_logger$descriptor() {
        return ts_parser_set_logger.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ts_parser_set_logger(TSParser *self, TSLogger logger)
     * }
     */
    public static MethodHandle ts_parser_set_logger$handle() {
        return ts_parser_set_logger.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ts_parser_set_logger(TSParser *self, TSLogger logger)
     * }
     */
    public static MemorySegment ts_parser_set_logger$address() {
        return ts_parser_set_logger.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ts_parser_set_logger(TSParser *self, TSLogger logger)
     * }
     */
    public static void ts_parser_set_logger(MemorySegment self, MemorySegment logger) {
        var mh$ = ts_parser_set_logger.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_parser_set_logger", self, logger);
            }
            mh$.invokeExact(self, logger);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_parser_logger {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TSLogger.layout(),
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_parser_logger");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TSLogger ts_parser_logger(const TSParser *self)
     * }
     */
    public static FunctionDescriptor ts_parser_logger$descriptor() {
        return ts_parser_logger.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TSLogger ts_parser_logger(const TSParser *self)
     * }
     */
    public static MethodHandle ts_parser_logger$handle() {
        return ts_parser_logger.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TSLogger ts_parser_logger(const TSParser *self)
     * }
     */
    public static MemorySegment ts_parser_logger$address() {
        return ts_parser_logger.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TSLogger ts_parser_logger(const TSParser *self)
     * }
     */
    public static MemorySegment ts_parser_logger(SegmentAllocator allocator, MemorySegment self) {
        var mh$ = ts_parser_logger.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_parser_logger", allocator, self);
            }
            return (MemorySegment)mh$.invokeExact(allocator, self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_parser_print_dot_graphs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            TreeSitter.C_POINTER,
            TreeSitter.C_INT
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_parser_print_dot_graphs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ts_parser_print_dot_graphs(TSParser *self, int fd)
     * }
     */
    public static FunctionDescriptor ts_parser_print_dot_graphs$descriptor() {
        return ts_parser_print_dot_graphs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ts_parser_print_dot_graphs(TSParser *self, int fd)
     * }
     */
    public static MethodHandle ts_parser_print_dot_graphs$handle() {
        return ts_parser_print_dot_graphs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ts_parser_print_dot_graphs(TSParser *self, int fd)
     * }
     */
    public static MemorySegment ts_parser_print_dot_graphs$address() {
        return ts_parser_print_dot_graphs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ts_parser_print_dot_graphs(TSParser *self, int fd)
     * }
     */
    public static void ts_parser_print_dot_graphs(MemorySegment self, int fd) {
        var mh$ = ts_parser_print_dot_graphs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_parser_print_dot_graphs", self, fd);
            }
            mh$.invokeExact(self, fd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_tree_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_tree_copy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TSTree *ts_tree_copy(const TSTree *self)
     * }
     */
    public static FunctionDescriptor ts_tree_copy$descriptor() {
        return ts_tree_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TSTree *ts_tree_copy(const TSTree *self)
     * }
     */
    public static MethodHandle ts_tree_copy$handle() {
        return ts_tree_copy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TSTree *ts_tree_copy(const TSTree *self)
     * }
     */
    public static MemorySegment ts_tree_copy$address() {
        return ts_tree_copy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TSTree *ts_tree_copy(const TSTree *self)
     * }
     */
    public static MemorySegment ts_tree_copy(MemorySegment self) {
        var mh$ = ts_tree_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_tree_copy", self);
            }
            return (MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_tree_delete {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_tree_delete");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ts_tree_delete(TSTree *self)
     * }
     */
    public static FunctionDescriptor ts_tree_delete$descriptor() {
        return ts_tree_delete.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ts_tree_delete(TSTree *self)
     * }
     */
    public static MethodHandle ts_tree_delete$handle() {
        return ts_tree_delete.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ts_tree_delete(TSTree *self)
     * }
     */
    public static MemorySegment ts_tree_delete$address() {
        return ts_tree_delete.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ts_tree_delete(TSTree *self)
     * }
     */
    public static void ts_tree_delete(MemorySegment self) {
        var mh$ = ts_tree_delete.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_tree_delete", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_tree_root_node {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TSNode.layout(),
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_tree_root_node");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TSNode ts_tree_root_node(const TSTree *self)
     * }
     */
    public static FunctionDescriptor ts_tree_root_node$descriptor() {
        return ts_tree_root_node.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TSNode ts_tree_root_node(const TSTree *self)
     * }
     */
    public static MethodHandle ts_tree_root_node$handle() {
        return ts_tree_root_node.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TSNode ts_tree_root_node(const TSTree *self)
     * }
     */
    public static MemorySegment ts_tree_root_node$address() {
        return ts_tree_root_node.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TSNode ts_tree_root_node(const TSTree *self)
     * }
     */
    public static MemorySegment ts_tree_root_node(SegmentAllocator allocator, MemorySegment self) {
        var mh$ = ts_tree_root_node.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_tree_root_node", allocator, self);
            }
            return (MemorySegment)mh$.invokeExact(allocator, self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_tree_root_node_with_offset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TSNode.layout(),
            TreeSitter.C_POINTER,
            TreeSitter.C_INT,
            TSPoint.layout()
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_tree_root_node_with_offset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TSNode ts_tree_root_node_with_offset(const TSTree *self, uint32_t offset_bytes, TSPoint offset_extent)
     * }
     */
    public static FunctionDescriptor ts_tree_root_node_with_offset$descriptor() {
        return ts_tree_root_node_with_offset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TSNode ts_tree_root_node_with_offset(const TSTree *self, uint32_t offset_bytes, TSPoint offset_extent)
     * }
     */
    public static MethodHandle ts_tree_root_node_with_offset$handle() {
        return ts_tree_root_node_with_offset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TSNode ts_tree_root_node_with_offset(const TSTree *self, uint32_t offset_bytes, TSPoint offset_extent)
     * }
     */
    public static MemorySegment ts_tree_root_node_with_offset$address() {
        return ts_tree_root_node_with_offset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TSNode ts_tree_root_node_with_offset(const TSTree *self, uint32_t offset_bytes, TSPoint offset_extent)
     * }
     */
    public static MemorySegment ts_tree_root_node_with_offset(SegmentAllocator allocator, MemorySegment self, int offset_bytes, MemorySegment offset_extent) {
        var mh$ = ts_tree_root_node_with_offset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_tree_root_node_with_offset", allocator, self, offset_bytes, offset_extent);
            }
            return (MemorySegment)mh$.invokeExact(allocator, self, offset_bytes, offset_extent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_tree_language {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_tree_language");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const TSLanguage *ts_tree_language(const TSTree *self)
     * }
     */
    public static FunctionDescriptor ts_tree_language$descriptor() {
        return ts_tree_language.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const TSLanguage *ts_tree_language(const TSTree *self)
     * }
     */
    public static MethodHandle ts_tree_language$handle() {
        return ts_tree_language.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const TSLanguage *ts_tree_language(const TSTree *self)
     * }
     */
    public static MemorySegment ts_tree_language$address() {
        return ts_tree_language.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const TSLanguage *ts_tree_language(const TSTree *self)
     * }
     */
    public static MemorySegment ts_tree_language(MemorySegment self) {
        var mh$ = ts_tree_language.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_tree_language", self);
            }
            return (MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_tree_included_ranges {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_tree_included_ranges");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TSRange *ts_tree_included_ranges(const TSTree *self, uint32_t *length)
     * }
     */
    public static FunctionDescriptor ts_tree_included_ranges$descriptor() {
        return ts_tree_included_ranges.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TSRange *ts_tree_included_ranges(const TSTree *self, uint32_t *length)
     * }
     */
    public static MethodHandle ts_tree_included_ranges$handle() {
        return ts_tree_included_ranges.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TSRange *ts_tree_included_ranges(const TSTree *self, uint32_t *length)
     * }
     */
    public static MemorySegment ts_tree_included_ranges$address() {
        return ts_tree_included_ranges.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TSRange *ts_tree_included_ranges(const TSTree *self, uint32_t *length)
     * }
     */
    public static MemorySegment ts_tree_included_ranges(MemorySegment self, MemorySegment length) {
        var mh$ = ts_tree_included_ranges.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_tree_included_ranges", self, length);
            }
            return (MemorySegment)mh$.invokeExact(self, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_tree_edit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_tree_edit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ts_tree_edit(TSTree *self, const TSInputEdit *edit)
     * }
     */
    public static FunctionDescriptor ts_tree_edit$descriptor() {
        return ts_tree_edit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ts_tree_edit(TSTree *self, const TSInputEdit *edit)
     * }
     */
    public static MethodHandle ts_tree_edit$handle() {
        return ts_tree_edit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ts_tree_edit(TSTree *self, const TSInputEdit *edit)
     * }
     */
    public static MemorySegment ts_tree_edit$address() {
        return ts_tree_edit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ts_tree_edit(TSTree *self, const TSInputEdit *edit)
     * }
     */
    public static void ts_tree_edit(MemorySegment self, MemorySegment edit) {
        var mh$ = ts_tree_edit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_tree_edit", self, edit);
            }
            mh$.invokeExact(self, edit);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_tree_get_changed_ranges {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_tree_get_changed_ranges");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TSRange *ts_tree_get_changed_ranges(const TSTree *old_tree, const TSTree *new_tree, uint32_t *length)
     * }
     */
    public static FunctionDescriptor ts_tree_get_changed_ranges$descriptor() {
        return ts_tree_get_changed_ranges.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TSRange *ts_tree_get_changed_ranges(const TSTree *old_tree, const TSTree *new_tree, uint32_t *length)
     * }
     */
    public static MethodHandle ts_tree_get_changed_ranges$handle() {
        return ts_tree_get_changed_ranges.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TSRange *ts_tree_get_changed_ranges(const TSTree *old_tree, const TSTree *new_tree, uint32_t *length)
     * }
     */
    public static MemorySegment ts_tree_get_changed_ranges$address() {
        return ts_tree_get_changed_ranges.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TSRange *ts_tree_get_changed_ranges(const TSTree *old_tree, const TSTree *new_tree, uint32_t *length)
     * }
     */
    public static MemorySegment ts_tree_get_changed_ranges(MemorySegment old_tree, MemorySegment new_tree, MemorySegment length) {
        var mh$ = ts_tree_get_changed_ranges.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_tree_get_changed_ranges", old_tree, new_tree, length);
            }
            return (MemorySegment)mh$.invokeExact(old_tree, new_tree, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_tree_print_dot_graph {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            TreeSitter.C_POINTER,
            TreeSitter.C_INT
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_tree_print_dot_graph");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ts_tree_print_dot_graph(const TSTree *self, int file_descriptor)
     * }
     */
    public static FunctionDescriptor ts_tree_print_dot_graph$descriptor() {
        return ts_tree_print_dot_graph.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ts_tree_print_dot_graph(const TSTree *self, int file_descriptor)
     * }
     */
    public static MethodHandle ts_tree_print_dot_graph$handle() {
        return ts_tree_print_dot_graph.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ts_tree_print_dot_graph(const TSTree *self, int file_descriptor)
     * }
     */
    public static MemorySegment ts_tree_print_dot_graph$address() {
        return ts_tree_print_dot_graph.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ts_tree_print_dot_graph(const TSTree *self, int file_descriptor)
     * }
     */
    public static void ts_tree_print_dot_graph(MemorySegment self, int file_descriptor) {
        var mh$ = ts_tree_print_dot_graph.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_tree_print_dot_graph", self, file_descriptor);
            }
            mh$.invokeExact(self, file_descriptor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_node_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_POINTER,
            TSNode.layout()
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_node_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *ts_node_type(TSNode self)
     * }
     */
    public static FunctionDescriptor ts_node_type$descriptor() {
        return ts_node_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *ts_node_type(TSNode self)
     * }
     */
    public static MethodHandle ts_node_type$handle() {
        return ts_node_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *ts_node_type(TSNode self)
     * }
     */
    public static MemorySegment ts_node_type$address() {
        return ts_node_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *ts_node_type(TSNode self)
     * }
     */
    public static MemorySegment ts_node_type(MemorySegment self) {
        var mh$ = ts_node_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_node_type", self);
            }
            return (MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_node_symbol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_SHORT,
            TSNode.layout()
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_node_symbol");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TSSymbol ts_node_symbol(TSNode self)
     * }
     */
    public static FunctionDescriptor ts_node_symbol$descriptor() {
        return ts_node_symbol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TSSymbol ts_node_symbol(TSNode self)
     * }
     */
    public static MethodHandle ts_node_symbol$handle() {
        return ts_node_symbol.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TSSymbol ts_node_symbol(TSNode self)
     * }
     */
    public static MemorySegment ts_node_symbol$address() {
        return ts_node_symbol.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TSSymbol ts_node_symbol(TSNode self)
     * }
     */
    public static short ts_node_symbol(MemorySegment self) {
        var mh$ = ts_node_symbol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_node_symbol", self);
            }
            return (short)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_node_language {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_POINTER,
            TSNode.layout()
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_node_language");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const TSLanguage *ts_node_language(TSNode self)
     * }
     */
    public static FunctionDescriptor ts_node_language$descriptor() {
        return ts_node_language.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const TSLanguage *ts_node_language(TSNode self)
     * }
     */
    public static MethodHandle ts_node_language$handle() {
        return ts_node_language.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const TSLanguage *ts_node_language(TSNode self)
     * }
     */
    public static MemorySegment ts_node_language$address() {
        return ts_node_language.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const TSLanguage *ts_node_language(TSNode self)
     * }
     */
    public static MemorySegment ts_node_language(MemorySegment self) {
        var mh$ = ts_node_language.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_node_language", self);
            }
            return (MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_node_grammar_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_POINTER,
            TSNode.layout()
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_node_grammar_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *ts_node_grammar_type(TSNode self)
     * }
     */
    public static FunctionDescriptor ts_node_grammar_type$descriptor() {
        return ts_node_grammar_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *ts_node_grammar_type(TSNode self)
     * }
     */
    public static MethodHandle ts_node_grammar_type$handle() {
        return ts_node_grammar_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *ts_node_grammar_type(TSNode self)
     * }
     */
    public static MemorySegment ts_node_grammar_type$address() {
        return ts_node_grammar_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *ts_node_grammar_type(TSNode self)
     * }
     */
    public static MemorySegment ts_node_grammar_type(MemorySegment self) {
        var mh$ = ts_node_grammar_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_node_grammar_type", self);
            }
            return (MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_node_grammar_symbol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_SHORT,
            TSNode.layout()
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_node_grammar_symbol");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TSSymbol ts_node_grammar_symbol(TSNode self)
     * }
     */
    public static FunctionDescriptor ts_node_grammar_symbol$descriptor() {
        return ts_node_grammar_symbol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TSSymbol ts_node_grammar_symbol(TSNode self)
     * }
     */
    public static MethodHandle ts_node_grammar_symbol$handle() {
        return ts_node_grammar_symbol.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TSSymbol ts_node_grammar_symbol(TSNode self)
     * }
     */
    public static MemorySegment ts_node_grammar_symbol$address() {
        return ts_node_grammar_symbol.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TSSymbol ts_node_grammar_symbol(TSNode self)
     * }
     */
    public static short ts_node_grammar_symbol(MemorySegment self) {
        var mh$ = ts_node_grammar_symbol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_node_grammar_symbol", self);
            }
            return (short)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_node_start_byte {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_INT,
            TSNode.layout()
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_node_start_byte");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32_t ts_node_start_byte(TSNode self)
     * }
     */
    public static FunctionDescriptor ts_node_start_byte$descriptor() {
        return ts_node_start_byte.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32_t ts_node_start_byte(TSNode self)
     * }
     */
    public static MethodHandle ts_node_start_byte$handle() {
        return ts_node_start_byte.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * uint32_t ts_node_start_byte(TSNode self)
     * }
     */
    public static MemorySegment ts_node_start_byte$address() {
        return ts_node_start_byte.ADDR;
    }

    /**
     * {@snippet lang=c :
     * uint32_t ts_node_start_byte(TSNode self)
     * }
     */
    public static int ts_node_start_byte(MemorySegment self) {
        var mh$ = ts_node_start_byte.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_node_start_byte", self);
            }
            return (int)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_node_start_point {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TSPoint.layout(),
            TSNode.layout()
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_node_start_point");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TSPoint ts_node_start_point(TSNode self)
     * }
     */
    public static FunctionDescriptor ts_node_start_point$descriptor() {
        return ts_node_start_point.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TSPoint ts_node_start_point(TSNode self)
     * }
     */
    public static MethodHandle ts_node_start_point$handle() {
        return ts_node_start_point.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TSPoint ts_node_start_point(TSNode self)
     * }
     */
    public static MemorySegment ts_node_start_point$address() {
        return ts_node_start_point.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TSPoint ts_node_start_point(TSNode self)
     * }
     */
    public static MemorySegment ts_node_start_point(SegmentAllocator allocator, MemorySegment self) {
        var mh$ = ts_node_start_point.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_node_start_point", allocator, self);
            }
            return (MemorySegment)mh$.invokeExact(allocator, self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_node_end_byte {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_INT,
            TSNode.layout()
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_node_end_byte");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32_t ts_node_end_byte(TSNode self)
     * }
     */
    public static FunctionDescriptor ts_node_end_byte$descriptor() {
        return ts_node_end_byte.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32_t ts_node_end_byte(TSNode self)
     * }
     */
    public static MethodHandle ts_node_end_byte$handle() {
        return ts_node_end_byte.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * uint32_t ts_node_end_byte(TSNode self)
     * }
     */
    public static MemorySegment ts_node_end_byte$address() {
        return ts_node_end_byte.ADDR;
    }

    /**
     * {@snippet lang=c :
     * uint32_t ts_node_end_byte(TSNode self)
     * }
     */
    public static int ts_node_end_byte(MemorySegment self) {
        var mh$ = ts_node_end_byte.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_node_end_byte", self);
            }
            return (int)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_node_end_point {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TSPoint.layout(),
            TSNode.layout()
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_node_end_point");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TSPoint ts_node_end_point(TSNode self)
     * }
     */
    public static FunctionDescriptor ts_node_end_point$descriptor() {
        return ts_node_end_point.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TSPoint ts_node_end_point(TSNode self)
     * }
     */
    public static MethodHandle ts_node_end_point$handle() {
        return ts_node_end_point.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TSPoint ts_node_end_point(TSNode self)
     * }
     */
    public static MemorySegment ts_node_end_point$address() {
        return ts_node_end_point.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TSPoint ts_node_end_point(TSNode self)
     * }
     */
    public static MemorySegment ts_node_end_point(SegmentAllocator allocator, MemorySegment self) {
        var mh$ = ts_node_end_point.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_node_end_point", allocator, self);
            }
            return (MemorySegment)mh$.invokeExact(allocator, self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_node_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_POINTER,
            TSNode.layout()
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_node_string");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *ts_node_string(TSNode self)
     * }
     */
    public static FunctionDescriptor ts_node_string$descriptor() {
        return ts_node_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *ts_node_string(TSNode self)
     * }
     */
    public static MethodHandle ts_node_string$handle() {
        return ts_node_string.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *ts_node_string(TSNode self)
     * }
     */
    public static MemorySegment ts_node_string$address() {
        return ts_node_string.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *ts_node_string(TSNode self)
     * }
     */
    public static MemorySegment ts_node_string(MemorySegment self) {
        var mh$ = ts_node_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_node_string", self);
            }
            return (MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_node_is_null {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_BOOL,
            TSNode.layout()
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_node_is_null");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * _Bool ts_node_is_null(TSNode self)
     * }
     */
    public static FunctionDescriptor ts_node_is_null$descriptor() {
        return ts_node_is_null.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * _Bool ts_node_is_null(TSNode self)
     * }
     */
    public static MethodHandle ts_node_is_null$handle() {
        return ts_node_is_null.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * _Bool ts_node_is_null(TSNode self)
     * }
     */
    public static MemorySegment ts_node_is_null$address() {
        return ts_node_is_null.ADDR;
    }

    /**
     * {@snippet lang=c :
     * _Bool ts_node_is_null(TSNode self)
     * }
     */
    public static boolean ts_node_is_null(MemorySegment self) {
        var mh$ = ts_node_is_null.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_node_is_null", self);
            }
            return (boolean)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_node_is_named {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_BOOL,
            TSNode.layout()
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_node_is_named");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * _Bool ts_node_is_named(TSNode self)
     * }
     */
    public static FunctionDescriptor ts_node_is_named$descriptor() {
        return ts_node_is_named.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * _Bool ts_node_is_named(TSNode self)
     * }
     */
    public static MethodHandle ts_node_is_named$handle() {
        return ts_node_is_named.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * _Bool ts_node_is_named(TSNode self)
     * }
     */
    public static MemorySegment ts_node_is_named$address() {
        return ts_node_is_named.ADDR;
    }

    /**
     * {@snippet lang=c :
     * _Bool ts_node_is_named(TSNode self)
     * }
     */
    public static boolean ts_node_is_named(MemorySegment self) {
        var mh$ = ts_node_is_named.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_node_is_named", self);
            }
            return (boolean)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_node_is_missing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_BOOL,
            TSNode.layout()
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_node_is_missing");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * _Bool ts_node_is_missing(TSNode self)
     * }
     */
    public static FunctionDescriptor ts_node_is_missing$descriptor() {
        return ts_node_is_missing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * _Bool ts_node_is_missing(TSNode self)
     * }
     */
    public static MethodHandle ts_node_is_missing$handle() {
        return ts_node_is_missing.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * _Bool ts_node_is_missing(TSNode self)
     * }
     */
    public static MemorySegment ts_node_is_missing$address() {
        return ts_node_is_missing.ADDR;
    }

    /**
     * {@snippet lang=c :
     * _Bool ts_node_is_missing(TSNode self)
     * }
     */
    public static boolean ts_node_is_missing(MemorySegment self) {
        var mh$ = ts_node_is_missing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_node_is_missing", self);
            }
            return (boolean)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_node_is_extra {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_BOOL,
            TSNode.layout()
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_node_is_extra");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * _Bool ts_node_is_extra(TSNode self)
     * }
     */
    public static FunctionDescriptor ts_node_is_extra$descriptor() {
        return ts_node_is_extra.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * _Bool ts_node_is_extra(TSNode self)
     * }
     */
    public static MethodHandle ts_node_is_extra$handle() {
        return ts_node_is_extra.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * _Bool ts_node_is_extra(TSNode self)
     * }
     */
    public static MemorySegment ts_node_is_extra$address() {
        return ts_node_is_extra.ADDR;
    }

    /**
     * {@snippet lang=c :
     * _Bool ts_node_is_extra(TSNode self)
     * }
     */
    public static boolean ts_node_is_extra(MemorySegment self) {
        var mh$ = ts_node_is_extra.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_node_is_extra", self);
            }
            return (boolean)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_node_has_changes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_BOOL,
            TSNode.layout()
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_node_has_changes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * _Bool ts_node_has_changes(TSNode self)
     * }
     */
    public static FunctionDescriptor ts_node_has_changes$descriptor() {
        return ts_node_has_changes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * _Bool ts_node_has_changes(TSNode self)
     * }
     */
    public static MethodHandle ts_node_has_changes$handle() {
        return ts_node_has_changes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * _Bool ts_node_has_changes(TSNode self)
     * }
     */
    public static MemorySegment ts_node_has_changes$address() {
        return ts_node_has_changes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * _Bool ts_node_has_changes(TSNode self)
     * }
     */
    public static boolean ts_node_has_changes(MemorySegment self) {
        var mh$ = ts_node_has_changes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_node_has_changes", self);
            }
            return (boolean)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_node_has_error {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_BOOL,
            TSNode.layout()
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_node_has_error");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * _Bool ts_node_has_error(TSNode self)
     * }
     */
    public static FunctionDescriptor ts_node_has_error$descriptor() {
        return ts_node_has_error.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * _Bool ts_node_has_error(TSNode self)
     * }
     */
    public static MethodHandle ts_node_has_error$handle() {
        return ts_node_has_error.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * _Bool ts_node_has_error(TSNode self)
     * }
     */
    public static MemorySegment ts_node_has_error$address() {
        return ts_node_has_error.ADDR;
    }

    /**
     * {@snippet lang=c :
     * _Bool ts_node_has_error(TSNode self)
     * }
     */
    public static boolean ts_node_has_error(MemorySegment self) {
        var mh$ = ts_node_has_error.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_node_has_error", self);
            }
            return (boolean)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_node_is_error {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_BOOL,
            TSNode.layout()
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_node_is_error");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * _Bool ts_node_is_error(TSNode self)
     * }
     */
    public static FunctionDescriptor ts_node_is_error$descriptor() {
        return ts_node_is_error.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * _Bool ts_node_is_error(TSNode self)
     * }
     */
    public static MethodHandle ts_node_is_error$handle() {
        return ts_node_is_error.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * _Bool ts_node_is_error(TSNode self)
     * }
     */
    public static MemorySegment ts_node_is_error$address() {
        return ts_node_is_error.ADDR;
    }

    /**
     * {@snippet lang=c :
     * _Bool ts_node_is_error(TSNode self)
     * }
     */
    public static boolean ts_node_is_error(MemorySegment self) {
        var mh$ = ts_node_is_error.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_node_is_error", self);
            }
            return (boolean)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_node_parse_state {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_SHORT,
            TSNode.layout()
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_node_parse_state");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TSStateId ts_node_parse_state(TSNode self)
     * }
     */
    public static FunctionDescriptor ts_node_parse_state$descriptor() {
        return ts_node_parse_state.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TSStateId ts_node_parse_state(TSNode self)
     * }
     */
    public static MethodHandle ts_node_parse_state$handle() {
        return ts_node_parse_state.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TSStateId ts_node_parse_state(TSNode self)
     * }
     */
    public static MemorySegment ts_node_parse_state$address() {
        return ts_node_parse_state.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TSStateId ts_node_parse_state(TSNode self)
     * }
     */
    public static short ts_node_parse_state(MemorySegment self) {
        var mh$ = ts_node_parse_state.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_node_parse_state", self);
            }
            return (short)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_node_next_parse_state {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_SHORT,
            TSNode.layout()
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_node_next_parse_state");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TSStateId ts_node_next_parse_state(TSNode self)
     * }
     */
    public static FunctionDescriptor ts_node_next_parse_state$descriptor() {
        return ts_node_next_parse_state.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TSStateId ts_node_next_parse_state(TSNode self)
     * }
     */
    public static MethodHandle ts_node_next_parse_state$handle() {
        return ts_node_next_parse_state.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TSStateId ts_node_next_parse_state(TSNode self)
     * }
     */
    public static MemorySegment ts_node_next_parse_state$address() {
        return ts_node_next_parse_state.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TSStateId ts_node_next_parse_state(TSNode self)
     * }
     */
    public static short ts_node_next_parse_state(MemorySegment self) {
        var mh$ = ts_node_next_parse_state.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_node_next_parse_state", self);
            }
            return (short)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_node_parent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TSNode.layout(),
            TSNode.layout()
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_node_parent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TSNode ts_node_parent(TSNode self)
     * }
     */
    public static FunctionDescriptor ts_node_parent$descriptor() {
        return ts_node_parent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TSNode ts_node_parent(TSNode self)
     * }
     */
    public static MethodHandle ts_node_parent$handle() {
        return ts_node_parent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TSNode ts_node_parent(TSNode self)
     * }
     */
    public static MemorySegment ts_node_parent$address() {
        return ts_node_parent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TSNode ts_node_parent(TSNode self)
     * }
     */
    public static MemorySegment ts_node_parent(SegmentAllocator allocator, MemorySegment self) {
        var mh$ = ts_node_parent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_node_parent", allocator, self);
            }
            return (MemorySegment)mh$.invokeExact(allocator, self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_node_child_containing_descendant {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TSNode.layout(),
            TSNode.layout(),
            TSNode.layout()
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_node_child_containing_descendant");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TSNode ts_node_child_containing_descendant(TSNode self, TSNode descendant)
     * }
     */
    public static FunctionDescriptor ts_node_child_containing_descendant$descriptor() {
        return ts_node_child_containing_descendant.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TSNode ts_node_child_containing_descendant(TSNode self, TSNode descendant)
     * }
     */
    public static MethodHandle ts_node_child_containing_descendant$handle() {
        return ts_node_child_containing_descendant.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TSNode ts_node_child_containing_descendant(TSNode self, TSNode descendant)
     * }
     */
    public static MemorySegment ts_node_child_containing_descendant$address() {
        return ts_node_child_containing_descendant.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TSNode ts_node_child_containing_descendant(TSNode self, TSNode descendant)
     * }
     */
    public static MemorySegment ts_node_child_containing_descendant(SegmentAllocator allocator, MemorySegment self, MemorySegment descendant) {
        var mh$ = ts_node_child_containing_descendant.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_node_child_containing_descendant", allocator, self, descendant);
            }
            return (MemorySegment)mh$.invokeExact(allocator, self, descendant);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_node_child {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TSNode.layout(),
            TSNode.layout(),
            TreeSitter.C_INT
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_node_child");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TSNode ts_node_child(TSNode self, uint32_t child_index)
     * }
     */
    public static FunctionDescriptor ts_node_child$descriptor() {
        return ts_node_child.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TSNode ts_node_child(TSNode self, uint32_t child_index)
     * }
     */
    public static MethodHandle ts_node_child$handle() {
        return ts_node_child.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TSNode ts_node_child(TSNode self, uint32_t child_index)
     * }
     */
    public static MemorySegment ts_node_child$address() {
        return ts_node_child.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TSNode ts_node_child(TSNode self, uint32_t child_index)
     * }
     */
    public static MemorySegment ts_node_child(SegmentAllocator allocator, MemorySegment self, int child_index) {
        var mh$ = ts_node_child.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_node_child", allocator, self, child_index);
            }
            return (MemorySegment)mh$.invokeExact(allocator, self, child_index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_node_field_name_for_child {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_POINTER,
            TSNode.layout(),
            TreeSitter.C_INT
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_node_field_name_for_child");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *ts_node_field_name_for_child(TSNode self, uint32_t child_index)
     * }
     */
    public static FunctionDescriptor ts_node_field_name_for_child$descriptor() {
        return ts_node_field_name_for_child.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *ts_node_field_name_for_child(TSNode self, uint32_t child_index)
     * }
     */
    public static MethodHandle ts_node_field_name_for_child$handle() {
        return ts_node_field_name_for_child.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *ts_node_field_name_for_child(TSNode self, uint32_t child_index)
     * }
     */
    public static MemorySegment ts_node_field_name_for_child$address() {
        return ts_node_field_name_for_child.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *ts_node_field_name_for_child(TSNode self, uint32_t child_index)
     * }
     */
    public static MemorySegment ts_node_field_name_for_child(MemorySegment self, int child_index) {
        var mh$ = ts_node_field_name_for_child.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_node_field_name_for_child", self, child_index);
            }
            return (MemorySegment)mh$.invokeExact(self, child_index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_node_child_count {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_INT,
            TSNode.layout()
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_node_child_count");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32_t ts_node_child_count(TSNode self)
     * }
     */
    public static FunctionDescriptor ts_node_child_count$descriptor() {
        return ts_node_child_count.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32_t ts_node_child_count(TSNode self)
     * }
     */
    public static MethodHandle ts_node_child_count$handle() {
        return ts_node_child_count.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * uint32_t ts_node_child_count(TSNode self)
     * }
     */
    public static MemorySegment ts_node_child_count$address() {
        return ts_node_child_count.ADDR;
    }

    /**
     * {@snippet lang=c :
     * uint32_t ts_node_child_count(TSNode self)
     * }
     */
    public static int ts_node_child_count(MemorySegment self) {
        var mh$ = ts_node_child_count.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_node_child_count", self);
            }
            return (int)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_node_named_child {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TSNode.layout(),
            TSNode.layout(),
            TreeSitter.C_INT
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_node_named_child");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TSNode ts_node_named_child(TSNode self, uint32_t child_index)
     * }
     */
    public static FunctionDescriptor ts_node_named_child$descriptor() {
        return ts_node_named_child.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TSNode ts_node_named_child(TSNode self, uint32_t child_index)
     * }
     */
    public static MethodHandle ts_node_named_child$handle() {
        return ts_node_named_child.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TSNode ts_node_named_child(TSNode self, uint32_t child_index)
     * }
     */
    public static MemorySegment ts_node_named_child$address() {
        return ts_node_named_child.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TSNode ts_node_named_child(TSNode self, uint32_t child_index)
     * }
     */
    public static MemorySegment ts_node_named_child(SegmentAllocator allocator, MemorySegment self, int child_index) {
        var mh$ = ts_node_named_child.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_node_named_child", allocator, self, child_index);
            }
            return (MemorySegment)mh$.invokeExact(allocator, self, child_index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_node_named_child_count {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_INT,
            TSNode.layout()
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_node_named_child_count");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32_t ts_node_named_child_count(TSNode self)
     * }
     */
    public static FunctionDescriptor ts_node_named_child_count$descriptor() {
        return ts_node_named_child_count.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32_t ts_node_named_child_count(TSNode self)
     * }
     */
    public static MethodHandle ts_node_named_child_count$handle() {
        return ts_node_named_child_count.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * uint32_t ts_node_named_child_count(TSNode self)
     * }
     */
    public static MemorySegment ts_node_named_child_count$address() {
        return ts_node_named_child_count.ADDR;
    }

    /**
     * {@snippet lang=c :
     * uint32_t ts_node_named_child_count(TSNode self)
     * }
     */
    public static int ts_node_named_child_count(MemorySegment self) {
        var mh$ = ts_node_named_child_count.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_node_named_child_count", self);
            }
            return (int)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_node_child_by_field_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TSNode.layout(),
            TSNode.layout(),
            TreeSitter.C_POINTER,
            TreeSitter.C_INT
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_node_child_by_field_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TSNode ts_node_child_by_field_name(TSNode self, const char *name, uint32_t name_length)
     * }
     */
    public static FunctionDescriptor ts_node_child_by_field_name$descriptor() {
        return ts_node_child_by_field_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TSNode ts_node_child_by_field_name(TSNode self, const char *name, uint32_t name_length)
     * }
     */
    public static MethodHandle ts_node_child_by_field_name$handle() {
        return ts_node_child_by_field_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TSNode ts_node_child_by_field_name(TSNode self, const char *name, uint32_t name_length)
     * }
     */
    public static MemorySegment ts_node_child_by_field_name$address() {
        return ts_node_child_by_field_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TSNode ts_node_child_by_field_name(TSNode self, const char *name, uint32_t name_length)
     * }
     */
    public static MemorySegment ts_node_child_by_field_name(SegmentAllocator allocator, MemorySegment self, MemorySegment name, int name_length) {
        var mh$ = ts_node_child_by_field_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_node_child_by_field_name", allocator, self, name, name_length);
            }
            return (MemorySegment)mh$.invokeExact(allocator, self, name, name_length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_node_child_by_field_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TSNode.layout(),
            TSNode.layout(),
            TreeSitter.C_SHORT
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_node_child_by_field_id");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TSNode ts_node_child_by_field_id(TSNode self, TSFieldId field_id)
     * }
     */
    public static FunctionDescriptor ts_node_child_by_field_id$descriptor() {
        return ts_node_child_by_field_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TSNode ts_node_child_by_field_id(TSNode self, TSFieldId field_id)
     * }
     */
    public static MethodHandle ts_node_child_by_field_id$handle() {
        return ts_node_child_by_field_id.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TSNode ts_node_child_by_field_id(TSNode self, TSFieldId field_id)
     * }
     */
    public static MemorySegment ts_node_child_by_field_id$address() {
        return ts_node_child_by_field_id.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TSNode ts_node_child_by_field_id(TSNode self, TSFieldId field_id)
     * }
     */
    public static MemorySegment ts_node_child_by_field_id(SegmentAllocator allocator, MemorySegment self, short field_id) {
        var mh$ = ts_node_child_by_field_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_node_child_by_field_id", allocator, self, field_id);
            }
            return (MemorySegment)mh$.invokeExact(allocator, self, field_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_node_next_sibling {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TSNode.layout(),
            TSNode.layout()
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_node_next_sibling");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TSNode ts_node_next_sibling(TSNode self)
     * }
     */
    public static FunctionDescriptor ts_node_next_sibling$descriptor() {
        return ts_node_next_sibling.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TSNode ts_node_next_sibling(TSNode self)
     * }
     */
    public static MethodHandle ts_node_next_sibling$handle() {
        return ts_node_next_sibling.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TSNode ts_node_next_sibling(TSNode self)
     * }
     */
    public static MemorySegment ts_node_next_sibling$address() {
        return ts_node_next_sibling.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TSNode ts_node_next_sibling(TSNode self)
     * }
     */
    public static MemorySegment ts_node_next_sibling(SegmentAllocator allocator, MemorySegment self) {
        var mh$ = ts_node_next_sibling.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_node_next_sibling", allocator, self);
            }
            return (MemorySegment)mh$.invokeExact(allocator, self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_node_prev_sibling {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TSNode.layout(),
            TSNode.layout()
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_node_prev_sibling");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TSNode ts_node_prev_sibling(TSNode self)
     * }
     */
    public static FunctionDescriptor ts_node_prev_sibling$descriptor() {
        return ts_node_prev_sibling.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TSNode ts_node_prev_sibling(TSNode self)
     * }
     */
    public static MethodHandle ts_node_prev_sibling$handle() {
        return ts_node_prev_sibling.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TSNode ts_node_prev_sibling(TSNode self)
     * }
     */
    public static MemorySegment ts_node_prev_sibling$address() {
        return ts_node_prev_sibling.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TSNode ts_node_prev_sibling(TSNode self)
     * }
     */
    public static MemorySegment ts_node_prev_sibling(SegmentAllocator allocator, MemorySegment self) {
        var mh$ = ts_node_prev_sibling.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_node_prev_sibling", allocator, self);
            }
            return (MemorySegment)mh$.invokeExact(allocator, self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_node_next_named_sibling {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TSNode.layout(),
            TSNode.layout()
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_node_next_named_sibling");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TSNode ts_node_next_named_sibling(TSNode self)
     * }
     */
    public static FunctionDescriptor ts_node_next_named_sibling$descriptor() {
        return ts_node_next_named_sibling.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TSNode ts_node_next_named_sibling(TSNode self)
     * }
     */
    public static MethodHandle ts_node_next_named_sibling$handle() {
        return ts_node_next_named_sibling.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TSNode ts_node_next_named_sibling(TSNode self)
     * }
     */
    public static MemorySegment ts_node_next_named_sibling$address() {
        return ts_node_next_named_sibling.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TSNode ts_node_next_named_sibling(TSNode self)
     * }
     */
    public static MemorySegment ts_node_next_named_sibling(SegmentAllocator allocator, MemorySegment self) {
        var mh$ = ts_node_next_named_sibling.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_node_next_named_sibling", allocator, self);
            }
            return (MemorySegment)mh$.invokeExact(allocator, self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_node_prev_named_sibling {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TSNode.layout(),
            TSNode.layout()
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_node_prev_named_sibling");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TSNode ts_node_prev_named_sibling(TSNode self)
     * }
     */
    public static FunctionDescriptor ts_node_prev_named_sibling$descriptor() {
        return ts_node_prev_named_sibling.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TSNode ts_node_prev_named_sibling(TSNode self)
     * }
     */
    public static MethodHandle ts_node_prev_named_sibling$handle() {
        return ts_node_prev_named_sibling.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TSNode ts_node_prev_named_sibling(TSNode self)
     * }
     */
    public static MemorySegment ts_node_prev_named_sibling$address() {
        return ts_node_prev_named_sibling.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TSNode ts_node_prev_named_sibling(TSNode self)
     * }
     */
    public static MemorySegment ts_node_prev_named_sibling(SegmentAllocator allocator, MemorySegment self) {
        var mh$ = ts_node_prev_named_sibling.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_node_prev_named_sibling", allocator, self);
            }
            return (MemorySegment)mh$.invokeExact(allocator, self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_node_first_child_for_byte {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TSNode.layout(),
            TSNode.layout(),
            TreeSitter.C_INT
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_node_first_child_for_byte");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TSNode ts_node_first_child_for_byte(TSNode self, uint32_t byte)
     * }
     */
    public static FunctionDescriptor ts_node_first_child_for_byte$descriptor() {
        return ts_node_first_child_for_byte.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TSNode ts_node_first_child_for_byte(TSNode self, uint32_t byte)
     * }
     */
    public static MethodHandle ts_node_first_child_for_byte$handle() {
        return ts_node_first_child_for_byte.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TSNode ts_node_first_child_for_byte(TSNode self, uint32_t byte)
     * }
     */
    public static MemorySegment ts_node_first_child_for_byte$address() {
        return ts_node_first_child_for_byte.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TSNode ts_node_first_child_for_byte(TSNode self, uint32_t byte)
     * }
     */
    public static MemorySegment ts_node_first_child_for_byte(SegmentAllocator allocator, MemorySegment self, int byte_) {
        var mh$ = ts_node_first_child_for_byte.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_node_first_child_for_byte", allocator, self, byte_);
            }
            return (MemorySegment)mh$.invokeExact(allocator, self, byte_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_node_first_named_child_for_byte {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TSNode.layout(),
            TSNode.layout(),
            TreeSitter.C_INT
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_node_first_named_child_for_byte");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TSNode ts_node_first_named_child_for_byte(TSNode self, uint32_t byte)
     * }
     */
    public static FunctionDescriptor ts_node_first_named_child_for_byte$descriptor() {
        return ts_node_first_named_child_for_byte.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TSNode ts_node_first_named_child_for_byte(TSNode self, uint32_t byte)
     * }
     */
    public static MethodHandle ts_node_first_named_child_for_byte$handle() {
        return ts_node_first_named_child_for_byte.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TSNode ts_node_first_named_child_for_byte(TSNode self, uint32_t byte)
     * }
     */
    public static MemorySegment ts_node_first_named_child_for_byte$address() {
        return ts_node_first_named_child_for_byte.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TSNode ts_node_first_named_child_for_byte(TSNode self, uint32_t byte)
     * }
     */
    public static MemorySegment ts_node_first_named_child_for_byte(SegmentAllocator allocator, MemorySegment self, int byte_) {
        var mh$ = ts_node_first_named_child_for_byte.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_node_first_named_child_for_byte", allocator, self, byte_);
            }
            return (MemorySegment)mh$.invokeExact(allocator, self, byte_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_node_descendant_count {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_INT,
            TSNode.layout()
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_node_descendant_count");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32_t ts_node_descendant_count(TSNode self)
     * }
     */
    public static FunctionDescriptor ts_node_descendant_count$descriptor() {
        return ts_node_descendant_count.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32_t ts_node_descendant_count(TSNode self)
     * }
     */
    public static MethodHandle ts_node_descendant_count$handle() {
        return ts_node_descendant_count.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * uint32_t ts_node_descendant_count(TSNode self)
     * }
     */
    public static MemorySegment ts_node_descendant_count$address() {
        return ts_node_descendant_count.ADDR;
    }

    /**
     * {@snippet lang=c :
     * uint32_t ts_node_descendant_count(TSNode self)
     * }
     */
    public static int ts_node_descendant_count(MemorySegment self) {
        var mh$ = ts_node_descendant_count.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_node_descendant_count", self);
            }
            return (int)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_node_descendant_for_byte_range {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TSNode.layout(),
            TSNode.layout(),
            TreeSitter.C_INT,
            TreeSitter.C_INT
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_node_descendant_for_byte_range");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TSNode ts_node_descendant_for_byte_range(TSNode self, uint32_t start, uint32_t end)
     * }
     */
    public static FunctionDescriptor ts_node_descendant_for_byte_range$descriptor() {
        return ts_node_descendant_for_byte_range.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TSNode ts_node_descendant_for_byte_range(TSNode self, uint32_t start, uint32_t end)
     * }
     */
    public static MethodHandle ts_node_descendant_for_byte_range$handle() {
        return ts_node_descendant_for_byte_range.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TSNode ts_node_descendant_for_byte_range(TSNode self, uint32_t start, uint32_t end)
     * }
     */
    public static MemorySegment ts_node_descendant_for_byte_range$address() {
        return ts_node_descendant_for_byte_range.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TSNode ts_node_descendant_for_byte_range(TSNode self, uint32_t start, uint32_t end)
     * }
     */
    public static MemorySegment ts_node_descendant_for_byte_range(SegmentAllocator allocator, MemorySegment self, int start, int end) {
        var mh$ = ts_node_descendant_for_byte_range.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_node_descendant_for_byte_range", allocator, self, start, end);
            }
            return (MemorySegment)mh$.invokeExact(allocator, self, start, end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_node_descendant_for_point_range {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TSNode.layout(),
            TSNode.layout(),
            TSPoint.layout(),
            TSPoint.layout()
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_node_descendant_for_point_range");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TSNode ts_node_descendant_for_point_range(TSNode self, TSPoint start, TSPoint end)
     * }
     */
    public static FunctionDescriptor ts_node_descendant_for_point_range$descriptor() {
        return ts_node_descendant_for_point_range.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TSNode ts_node_descendant_for_point_range(TSNode self, TSPoint start, TSPoint end)
     * }
     */
    public static MethodHandle ts_node_descendant_for_point_range$handle() {
        return ts_node_descendant_for_point_range.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TSNode ts_node_descendant_for_point_range(TSNode self, TSPoint start, TSPoint end)
     * }
     */
    public static MemorySegment ts_node_descendant_for_point_range$address() {
        return ts_node_descendant_for_point_range.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TSNode ts_node_descendant_for_point_range(TSNode self, TSPoint start, TSPoint end)
     * }
     */
    public static MemorySegment ts_node_descendant_for_point_range(SegmentAllocator allocator, MemorySegment self, MemorySegment start, MemorySegment end) {
        var mh$ = ts_node_descendant_for_point_range.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_node_descendant_for_point_range", allocator, self, start, end);
            }
            return (MemorySegment)mh$.invokeExact(allocator, self, start, end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_node_named_descendant_for_byte_range {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TSNode.layout(),
            TSNode.layout(),
            TreeSitter.C_INT,
            TreeSitter.C_INT
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_node_named_descendant_for_byte_range");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TSNode ts_node_named_descendant_for_byte_range(TSNode self, uint32_t start, uint32_t end)
     * }
     */
    public static FunctionDescriptor ts_node_named_descendant_for_byte_range$descriptor() {
        return ts_node_named_descendant_for_byte_range.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TSNode ts_node_named_descendant_for_byte_range(TSNode self, uint32_t start, uint32_t end)
     * }
     */
    public static MethodHandle ts_node_named_descendant_for_byte_range$handle() {
        return ts_node_named_descendant_for_byte_range.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TSNode ts_node_named_descendant_for_byte_range(TSNode self, uint32_t start, uint32_t end)
     * }
     */
    public static MemorySegment ts_node_named_descendant_for_byte_range$address() {
        return ts_node_named_descendant_for_byte_range.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TSNode ts_node_named_descendant_for_byte_range(TSNode self, uint32_t start, uint32_t end)
     * }
     */
    public static MemorySegment ts_node_named_descendant_for_byte_range(SegmentAllocator allocator, MemorySegment self, int start, int end) {
        var mh$ = ts_node_named_descendant_for_byte_range.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_node_named_descendant_for_byte_range", allocator, self, start, end);
            }
            return (MemorySegment)mh$.invokeExact(allocator, self, start, end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_node_named_descendant_for_point_range {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TSNode.layout(),
            TSNode.layout(),
            TSPoint.layout(),
            TSPoint.layout()
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_node_named_descendant_for_point_range");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TSNode ts_node_named_descendant_for_point_range(TSNode self, TSPoint start, TSPoint end)
     * }
     */
    public static FunctionDescriptor ts_node_named_descendant_for_point_range$descriptor() {
        return ts_node_named_descendant_for_point_range.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TSNode ts_node_named_descendant_for_point_range(TSNode self, TSPoint start, TSPoint end)
     * }
     */
    public static MethodHandle ts_node_named_descendant_for_point_range$handle() {
        return ts_node_named_descendant_for_point_range.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TSNode ts_node_named_descendant_for_point_range(TSNode self, TSPoint start, TSPoint end)
     * }
     */
    public static MemorySegment ts_node_named_descendant_for_point_range$address() {
        return ts_node_named_descendant_for_point_range.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TSNode ts_node_named_descendant_for_point_range(TSNode self, TSPoint start, TSPoint end)
     * }
     */
    public static MemorySegment ts_node_named_descendant_for_point_range(SegmentAllocator allocator, MemorySegment self, MemorySegment start, MemorySegment end) {
        var mh$ = ts_node_named_descendant_for_point_range.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_node_named_descendant_for_point_range", allocator, self, start, end);
            }
            return (MemorySegment)mh$.invokeExact(allocator, self, start, end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_node_edit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_node_edit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ts_node_edit(TSNode *self, const TSInputEdit *edit)
     * }
     */
    public static FunctionDescriptor ts_node_edit$descriptor() {
        return ts_node_edit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ts_node_edit(TSNode *self, const TSInputEdit *edit)
     * }
     */
    public static MethodHandle ts_node_edit$handle() {
        return ts_node_edit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ts_node_edit(TSNode *self, const TSInputEdit *edit)
     * }
     */
    public static MemorySegment ts_node_edit$address() {
        return ts_node_edit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ts_node_edit(TSNode *self, const TSInputEdit *edit)
     * }
     */
    public static void ts_node_edit(MemorySegment self, MemorySegment edit) {
        var mh$ = ts_node_edit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_node_edit", self, edit);
            }
            mh$.invokeExact(self, edit);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_node_eq {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_BOOL,
            TSNode.layout(),
            TSNode.layout()
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_node_eq");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * _Bool ts_node_eq(TSNode self, TSNode other)
     * }
     */
    public static FunctionDescriptor ts_node_eq$descriptor() {
        return ts_node_eq.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * _Bool ts_node_eq(TSNode self, TSNode other)
     * }
     */
    public static MethodHandle ts_node_eq$handle() {
        return ts_node_eq.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * _Bool ts_node_eq(TSNode self, TSNode other)
     * }
     */
    public static MemorySegment ts_node_eq$address() {
        return ts_node_eq.ADDR;
    }

    /**
     * {@snippet lang=c :
     * _Bool ts_node_eq(TSNode self, TSNode other)
     * }
     */
    public static boolean ts_node_eq(MemorySegment self, MemorySegment other) {
        var mh$ = ts_node_eq.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_node_eq", self, other);
            }
            return (boolean)mh$.invokeExact(self, other);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_tree_cursor_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TSTreeCursor.layout(),
            TSNode.layout()
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_tree_cursor_new");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TSTreeCursor ts_tree_cursor_new(TSNode node)
     * }
     */
    public static FunctionDescriptor ts_tree_cursor_new$descriptor() {
        return ts_tree_cursor_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TSTreeCursor ts_tree_cursor_new(TSNode node)
     * }
     */
    public static MethodHandle ts_tree_cursor_new$handle() {
        return ts_tree_cursor_new.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TSTreeCursor ts_tree_cursor_new(TSNode node)
     * }
     */
    public static MemorySegment ts_tree_cursor_new$address() {
        return ts_tree_cursor_new.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TSTreeCursor ts_tree_cursor_new(TSNode node)
     * }
     */
    public static MemorySegment ts_tree_cursor_new(SegmentAllocator allocator, MemorySegment node) {
        var mh$ = ts_tree_cursor_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_tree_cursor_new", allocator, node);
            }
            return (MemorySegment)mh$.invokeExact(allocator, node);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_tree_cursor_delete {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_tree_cursor_delete");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ts_tree_cursor_delete(TSTreeCursor *self)
     * }
     */
    public static FunctionDescriptor ts_tree_cursor_delete$descriptor() {
        return ts_tree_cursor_delete.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ts_tree_cursor_delete(TSTreeCursor *self)
     * }
     */
    public static MethodHandle ts_tree_cursor_delete$handle() {
        return ts_tree_cursor_delete.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ts_tree_cursor_delete(TSTreeCursor *self)
     * }
     */
    public static MemorySegment ts_tree_cursor_delete$address() {
        return ts_tree_cursor_delete.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ts_tree_cursor_delete(TSTreeCursor *self)
     * }
     */
    public static void ts_tree_cursor_delete(MemorySegment self) {
        var mh$ = ts_tree_cursor_delete.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_tree_cursor_delete", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_tree_cursor_reset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            TreeSitter.C_POINTER,
            TSNode.layout()
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_tree_cursor_reset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ts_tree_cursor_reset(TSTreeCursor *self, TSNode node)
     * }
     */
    public static FunctionDescriptor ts_tree_cursor_reset$descriptor() {
        return ts_tree_cursor_reset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ts_tree_cursor_reset(TSTreeCursor *self, TSNode node)
     * }
     */
    public static MethodHandle ts_tree_cursor_reset$handle() {
        return ts_tree_cursor_reset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ts_tree_cursor_reset(TSTreeCursor *self, TSNode node)
     * }
     */
    public static MemorySegment ts_tree_cursor_reset$address() {
        return ts_tree_cursor_reset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ts_tree_cursor_reset(TSTreeCursor *self, TSNode node)
     * }
     */
    public static void ts_tree_cursor_reset(MemorySegment self, MemorySegment node) {
        var mh$ = ts_tree_cursor_reset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_tree_cursor_reset", self, node);
            }
            mh$.invokeExact(self, node);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_tree_cursor_reset_to {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_tree_cursor_reset_to");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ts_tree_cursor_reset_to(TSTreeCursor *dst, const TSTreeCursor *src)
     * }
     */
    public static FunctionDescriptor ts_tree_cursor_reset_to$descriptor() {
        return ts_tree_cursor_reset_to.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ts_tree_cursor_reset_to(TSTreeCursor *dst, const TSTreeCursor *src)
     * }
     */
    public static MethodHandle ts_tree_cursor_reset_to$handle() {
        return ts_tree_cursor_reset_to.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ts_tree_cursor_reset_to(TSTreeCursor *dst, const TSTreeCursor *src)
     * }
     */
    public static MemorySegment ts_tree_cursor_reset_to$address() {
        return ts_tree_cursor_reset_to.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ts_tree_cursor_reset_to(TSTreeCursor *dst, const TSTreeCursor *src)
     * }
     */
    public static void ts_tree_cursor_reset_to(MemorySegment dst, MemorySegment src) {
        var mh$ = ts_tree_cursor_reset_to.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_tree_cursor_reset_to", dst, src);
            }
            mh$.invokeExact(dst, src);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_tree_cursor_current_node {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TSNode.layout(),
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_tree_cursor_current_node");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TSNode ts_tree_cursor_current_node(const TSTreeCursor *self)
     * }
     */
    public static FunctionDescriptor ts_tree_cursor_current_node$descriptor() {
        return ts_tree_cursor_current_node.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TSNode ts_tree_cursor_current_node(const TSTreeCursor *self)
     * }
     */
    public static MethodHandle ts_tree_cursor_current_node$handle() {
        return ts_tree_cursor_current_node.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TSNode ts_tree_cursor_current_node(const TSTreeCursor *self)
     * }
     */
    public static MemorySegment ts_tree_cursor_current_node$address() {
        return ts_tree_cursor_current_node.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TSNode ts_tree_cursor_current_node(const TSTreeCursor *self)
     * }
     */
    public static MemorySegment ts_tree_cursor_current_node(SegmentAllocator allocator, MemorySegment self) {
        var mh$ = ts_tree_cursor_current_node.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_tree_cursor_current_node", allocator, self);
            }
            return (MemorySegment)mh$.invokeExact(allocator, self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_tree_cursor_current_field_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_tree_cursor_current_field_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *ts_tree_cursor_current_field_name(const TSTreeCursor *self)
     * }
     */
    public static FunctionDescriptor ts_tree_cursor_current_field_name$descriptor() {
        return ts_tree_cursor_current_field_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *ts_tree_cursor_current_field_name(const TSTreeCursor *self)
     * }
     */
    public static MethodHandle ts_tree_cursor_current_field_name$handle() {
        return ts_tree_cursor_current_field_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *ts_tree_cursor_current_field_name(const TSTreeCursor *self)
     * }
     */
    public static MemorySegment ts_tree_cursor_current_field_name$address() {
        return ts_tree_cursor_current_field_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *ts_tree_cursor_current_field_name(const TSTreeCursor *self)
     * }
     */
    public static MemorySegment ts_tree_cursor_current_field_name(MemorySegment self) {
        var mh$ = ts_tree_cursor_current_field_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_tree_cursor_current_field_name", self);
            }
            return (MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_tree_cursor_current_field_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_SHORT,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_tree_cursor_current_field_id");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TSFieldId ts_tree_cursor_current_field_id(const TSTreeCursor *self)
     * }
     */
    public static FunctionDescriptor ts_tree_cursor_current_field_id$descriptor() {
        return ts_tree_cursor_current_field_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TSFieldId ts_tree_cursor_current_field_id(const TSTreeCursor *self)
     * }
     */
    public static MethodHandle ts_tree_cursor_current_field_id$handle() {
        return ts_tree_cursor_current_field_id.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TSFieldId ts_tree_cursor_current_field_id(const TSTreeCursor *self)
     * }
     */
    public static MemorySegment ts_tree_cursor_current_field_id$address() {
        return ts_tree_cursor_current_field_id.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TSFieldId ts_tree_cursor_current_field_id(const TSTreeCursor *self)
     * }
     */
    public static short ts_tree_cursor_current_field_id(MemorySegment self) {
        var mh$ = ts_tree_cursor_current_field_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_tree_cursor_current_field_id", self);
            }
            return (short)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_tree_cursor_goto_parent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_BOOL,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_tree_cursor_goto_parent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * _Bool ts_tree_cursor_goto_parent(TSTreeCursor *self)
     * }
     */
    public static FunctionDescriptor ts_tree_cursor_goto_parent$descriptor() {
        return ts_tree_cursor_goto_parent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * _Bool ts_tree_cursor_goto_parent(TSTreeCursor *self)
     * }
     */
    public static MethodHandle ts_tree_cursor_goto_parent$handle() {
        return ts_tree_cursor_goto_parent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * _Bool ts_tree_cursor_goto_parent(TSTreeCursor *self)
     * }
     */
    public static MemorySegment ts_tree_cursor_goto_parent$address() {
        return ts_tree_cursor_goto_parent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * _Bool ts_tree_cursor_goto_parent(TSTreeCursor *self)
     * }
     */
    public static boolean ts_tree_cursor_goto_parent(MemorySegment self) {
        var mh$ = ts_tree_cursor_goto_parent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_tree_cursor_goto_parent", self);
            }
            return (boolean)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_tree_cursor_goto_next_sibling {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_BOOL,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_tree_cursor_goto_next_sibling");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * _Bool ts_tree_cursor_goto_next_sibling(TSTreeCursor *self)
     * }
     */
    public static FunctionDescriptor ts_tree_cursor_goto_next_sibling$descriptor() {
        return ts_tree_cursor_goto_next_sibling.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * _Bool ts_tree_cursor_goto_next_sibling(TSTreeCursor *self)
     * }
     */
    public static MethodHandle ts_tree_cursor_goto_next_sibling$handle() {
        return ts_tree_cursor_goto_next_sibling.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * _Bool ts_tree_cursor_goto_next_sibling(TSTreeCursor *self)
     * }
     */
    public static MemorySegment ts_tree_cursor_goto_next_sibling$address() {
        return ts_tree_cursor_goto_next_sibling.ADDR;
    }

    /**
     * {@snippet lang=c :
     * _Bool ts_tree_cursor_goto_next_sibling(TSTreeCursor *self)
     * }
     */
    public static boolean ts_tree_cursor_goto_next_sibling(MemorySegment self) {
        var mh$ = ts_tree_cursor_goto_next_sibling.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_tree_cursor_goto_next_sibling", self);
            }
            return (boolean)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_tree_cursor_goto_previous_sibling {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_BOOL,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_tree_cursor_goto_previous_sibling");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * _Bool ts_tree_cursor_goto_previous_sibling(TSTreeCursor *self)
     * }
     */
    public static FunctionDescriptor ts_tree_cursor_goto_previous_sibling$descriptor() {
        return ts_tree_cursor_goto_previous_sibling.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * _Bool ts_tree_cursor_goto_previous_sibling(TSTreeCursor *self)
     * }
     */
    public static MethodHandle ts_tree_cursor_goto_previous_sibling$handle() {
        return ts_tree_cursor_goto_previous_sibling.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * _Bool ts_tree_cursor_goto_previous_sibling(TSTreeCursor *self)
     * }
     */
    public static MemorySegment ts_tree_cursor_goto_previous_sibling$address() {
        return ts_tree_cursor_goto_previous_sibling.ADDR;
    }

    /**
     * {@snippet lang=c :
     * _Bool ts_tree_cursor_goto_previous_sibling(TSTreeCursor *self)
     * }
     */
    public static boolean ts_tree_cursor_goto_previous_sibling(MemorySegment self) {
        var mh$ = ts_tree_cursor_goto_previous_sibling.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_tree_cursor_goto_previous_sibling", self);
            }
            return (boolean)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_tree_cursor_goto_first_child {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_BOOL,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_tree_cursor_goto_first_child");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * _Bool ts_tree_cursor_goto_first_child(TSTreeCursor *self)
     * }
     */
    public static FunctionDescriptor ts_tree_cursor_goto_first_child$descriptor() {
        return ts_tree_cursor_goto_first_child.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * _Bool ts_tree_cursor_goto_first_child(TSTreeCursor *self)
     * }
     */
    public static MethodHandle ts_tree_cursor_goto_first_child$handle() {
        return ts_tree_cursor_goto_first_child.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * _Bool ts_tree_cursor_goto_first_child(TSTreeCursor *self)
     * }
     */
    public static MemorySegment ts_tree_cursor_goto_first_child$address() {
        return ts_tree_cursor_goto_first_child.ADDR;
    }

    /**
     * {@snippet lang=c :
     * _Bool ts_tree_cursor_goto_first_child(TSTreeCursor *self)
     * }
     */
    public static boolean ts_tree_cursor_goto_first_child(MemorySegment self) {
        var mh$ = ts_tree_cursor_goto_first_child.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_tree_cursor_goto_first_child", self);
            }
            return (boolean)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_tree_cursor_goto_last_child {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_BOOL,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_tree_cursor_goto_last_child");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * _Bool ts_tree_cursor_goto_last_child(TSTreeCursor *self)
     * }
     */
    public static FunctionDescriptor ts_tree_cursor_goto_last_child$descriptor() {
        return ts_tree_cursor_goto_last_child.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * _Bool ts_tree_cursor_goto_last_child(TSTreeCursor *self)
     * }
     */
    public static MethodHandle ts_tree_cursor_goto_last_child$handle() {
        return ts_tree_cursor_goto_last_child.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * _Bool ts_tree_cursor_goto_last_child(TSTreeCursor *self)
     * }
     */
    public static MemorySegment ts_tree_cursor_goto_last_child$address() {
        return ts_tree_cursor_goto_last_child.ADDR;
    }

    /**
     * {@snippet lang=c :
     * _Bool ts_tree_cursor_goto_last_child(TSTreeCursor *self)
     * }
     */
    public static boolean ts_tree_cursor_goto_last_child(MemorySegment self) {
        var mh$ = ts_tree_cursor_goto_last_child.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_tree_cursor_goto_last_child", self);
            }
            return (boolean)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_tree_cursor_goto_descendant {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            TreeSitter.C_POINTER,
            TreeSitter.C_INT
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_tree_cursor_goto_descendant");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ts_tree_cursor_goto_descendant(TSTreeCursor *self, uint32_t goal_descendant_index)
     * }
     */
    public static FunctionDescriptor ts_tree_cursor_goto_descendant$descriptor() {
        return ts_tree_cursor_goto_descendant.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ts_tree_cursor_goto_descendant(TSTreeCursor *self, uint32_t goal_descendant_index)
     * }
     */
    public static MethodHandle ts_tree_cursor_goto_descendant$handle() {
        return ts_tree_cursor_goto_descendant.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ts_tree_cursor_goto_descendant(TSTreeCursor *self, uint32_t goal_descendant_index)
     * }
     */
    public static MemorySegment ts_tree_cursor_goto_descendant$address() {
        return ts_tree_cursor_goto_descendant.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ts_tree_cursor_goto_descendant(TSTreeCursor *self, uint32_t goal_descendant_index)
     * }
     */
    public static void ts_tree_cursor_goto_descendant(MemorySegment self, int goal_descendant_index) {
        var mh$ = ts_tree_cursor_goto_descendant.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_tree_cursor_goto_descendant", self, goal_descendant_index);
            }
            mh$.invokeExact(self, goal_descendant_index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_tree_cursor_current_descendant_index {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_INT,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_tree_cursor_current_descendant_index");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32_t ts_tree_cursor_current_descendant_index(const TSTreeCursor *self)
     * }
     */
    public static FunctionDescriptor ts_tree_cursor_current_descendant_index$descriptor() {
        return ts_tree_cursor_current_descendant_index.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32_t ts_tree_cursor_current_descendant_index(const TSTreeCursor *self)
     * }
     */
    public static MethodHandle ts_tree_cursor_current_descendant_index$handle() {
        return ts_tree_cursor_current_descendant_index.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * uint32_t ts_tree_cursor_current_descendant_index(const TSTreeCursor *self)
     * }
     */
    public static MemorySegment ts_tree_cursor_current_descendant_index$address() {
        return ts_tree_cursor_current_descendant_index.ADDR;
    }

    /**
     * {@snippet lang=c :
     * uint32_t ts_tree_cursor_current_descendant_index(const TSTreeCursor *self)
     * }
     */
    public static int ts_tree_cursor_current_descendant_index(MemorySegment self) {
        var mh$ = ts_tree_cursor_current_descendant_index.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_tree_cursor_current_descendant_index", self);
            }
            return (int)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_tree_cursor_current_depth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_INT,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_tree_cursor_current_depth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32_t ts_tree_cursor_current_depth(const TSTreeCursor *self)
     * }
     */
    public static FunctionDescriptor ts_tree_cursor_current_depth$descriptor() {
        return ts_tree_cursor_current_depth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32_t ts_tree_cursor_current_depth(const TSTreeCursor *self)
     * }
     */
    public static MethodHandle ts_tree_cursor_current_depth$handle() {
        return ts_tree_cursor_current_depth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * uint32_t ts_tree_cursor_current_depth(const TSTreeCursor *self)
     * }
     */
    public static MemorySegment ts_tree_cursor_current_depth$address() {
        return ts_tree_cursor_current_depth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * uint32_t ts_tree_cursor_current_depth(const TSTreeCursor *self)
     * }
     */
    public static int ts_tree_cursor_current_depth(MemorySegment self) {
        var mh$ = ts_tree_cursor_current_depth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_tree_cursor_current_depth", self);
            }
            return (int)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_tree_cursor_goto_first_child_for_byte {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_LONG,
            TreeSitter.C_POINTER,
            TreeSitter.C_INT
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_tree_cursor_goto_first_child_for_byte");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int64_t ts_tree_cursor_goto_first_child_for_byte(TSTreeCursor *self, uint32_t goal_byte)
     * }
     */
    public static FunctionDescriptor ts_tree_cursor_goto_first_child_for_byte$descriptor() {
        return ts_tree_cursor_goto_first_child_for_byte.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int64_t ts_tree_cursor_goto_first_child_for_byte(TSTreeCursor *self, uint32_t goal_byte)
     * }
     */
    public static MethodHandle ts_tree_cursor_goto_first_child_for_byte$handle() {
        return ts_tree_cursor_goto_first_child_for_byte.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int64_t ts_tree_cursor_goto_first_child_for_byte(TSTreeCursor *self, uint32_t goal_byte)
     * }
     */
    public static MemorySegment ts_tree_cursor_goto_first_child_for_byte$address() {
        return ts_tree_cursor_goto_first_child_for_byte.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int64_t ts_tree_cursor_goto_first_child_for_byte(TSTreeCursor *self, uint32_t goal_byte)
     * }
     */
    public static long ts_tree_cursor_goto_first_child_for_byte(MemorySegment self, int goal_byte) {
        var mh$ = ts_tree_cursor_goto_first_child_for_byte.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_tree_cursor_goto_first_child_for_byte", self, goal_byte);
            }
            return (long)mh$.invokeExact(self, goal_byte);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_tree_cursor_goto_first_child_for_point {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_LONG,
            TreeSitter.C_POINTER,
            TSPoint.layout()
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_tree_cursor_goto_first_child_for_point");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int64_t ts_tree_cursor_goto_first_child_for_point(TSTreeCursor *self, TSPoint goal_point)
     * }
     */
    public static FunctionDescriptor ts_tree_cursor_goto_first_child_for_point$descriptor() {
        return ts_tree_cursor_goto_first_child_for_point.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int64_t ts_tree_cursor_goto_first_child_for_point(TSTreeCursor *self, TSPoint goal_point)
     * }
     */
    public static MethodHandle ts_tree_cursor_goto_first_child_for_point$handle() {
        return ts_tree_cursor_goto_first_child_for_point.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int64_t ts_tree_cursor_goto_first_child_for_point(TSTreeCursor *self, TSPoint goal_point)
     * }
     */
    public static MemorySegment ts_tree_cursor_goto_first_child_for_point$address() {
        return ts_tree_cursor_goto_first_child_for_point.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int64_t ts_tree_cursor_goto_first_child_for_point(TSTreeCursor *self, TSPoint goal_point)
     * }
     */
    public static long ts_tree_cursor_goto_first_child_for_point(MemorySegment self, MemorySegment goal_point) {
        var mh$ = ts_tree_cursor_goto_first_child_for_point.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_tree_cursor_goto_first_child_for_point", self, goal_point);
            }
            return (long)mh$.invokeExact(self, goal_point);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_tree_cursor_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TSTreeCursor.layout(),
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_tree_cursor_copy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TSTreeCursor ts_tree_cursor_copy(const TSTreeCursor *cursor)
     * }
     */
    public static FunctionDescriptor ts_tree_cursor_copy$descriptor() {
        return ts_tree_cursor_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TSTreeCursor ts_tree_cursor_copy(const TSTreeCursor *cursor)
     * }
     */
    public static MethodHandle ts_tree_cursor_copy$handle() {
        return ts_tree_cursor_copy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TSTreeCursor ts_tree_cursor_copy(const TSTreeCursor *cursor)
     * }
     */
    public static MemorySegment ts_tree_cursor_copy$address() {
        return ts_tree_cursor_copy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TSTreeCursor ts_tree_cursor_copy(const TSTreeCursor *cursor)
     * }
     */
    public static MemorySegment ts_tree_cursor_copy(SegmentAllocator allocator, MemorySegment cursor) {
        var mh$ = ts_tree_cursor_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_tree_cursor_copy", allocator, cursor);
            }
            return (MemorySegment)mh$.invokeExact(allocator, cursor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_query_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER,
            TreeSitter.C_INT,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_query_new");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TSQuery *ts_query_new(const TSLanguage *language, const char *source, uint32_t source_len, uint32_t *error_offset, TSQueryError *error_type)
     * }
     */
    public static FunctionDescriptor ts_query_new$descriptor() {
        return ts_query_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TSQuery *ts_query_new(const TSLanguage *language, const char *source, uint32_t source_len, uint32_t *error_offset, TSQueryError *error_type)
     * }
     */
    public static MethodHandle ts_query_new$handle() {
        return ts_query_new.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TSQuery *ts_query_new(const TSLanguage *language, const char *source, uint32_t source_len, uint32_t *error_offset, TSQueryError *error_type)
     * }
     */
    public static MemorySegment ts_query_new$address() {
        return ts_query_new.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TSQuery *ts_query_new(const TSLanguage *language, const char *source, uint32_t source_len, uint32_t *error_offset, TSQueryError *error_type)
     * }
     */
    public static MemorySegment ts_query_new(MemorySegment language, MemorySegment source, int source_len, MemorySegment error_offset, MemorySegment error_type) {
        var mh$ = ts_query_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_query_new", language, source, source_len, error_offset, error_type);
            }
            return (MemorySegment)mh$.invokeExact(language, source, source_len, error_offset, error_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_query_delete {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_query_delete");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ts_query_delete(TSQuery *self)
     * }
     */
    public static FunctionDescriptor ts_query_delete$descriptor() {
        return ts_query_delete.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ts_query_delete(TSQuery *self)
     * }
     */
    public static MethodHandle ts_query_delete$handle() {
        return ts_query_delete.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ts_query_delete(TSQuery *self)
     * }
     */
    public static MemorySegment ts_query_delete$address() {
        return ts_query_delete.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ts_query_delete(TSQuery *self)
     * }
     */
    public static void ts_query_delete(MemorySegment self) {
        var mh$ = ts_query_delete.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_query_delete", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_query_pattern_count {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_INT,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_query_pattern_count");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32_t ts_query_pattern_count(const TSQuery *self)
     * }
     */
    public static FunctionDescriptor ts_query_pattern_count$descriptor() {
        return ts_query_pattern_count.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32_t ts_query_pattern_count(const TSQuery *self)
     * }
     */
    public static MethodHandle ts_query_pattern_count$handle() {
        return ts_query_pattern_count.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * uint32_t ts_query_pattern_count(const TSQuery *self)
     * }
     */
    public static MemorySegment ts_query_pattern_count$address() {
        return ts_query_pattern_count.ADDR;
    }

    /**
     * {@snippet lang=c :
     * uint32_t ts_query_pattern_count(const TSQuery *self)
     * }
     */
    public static int ts_query_pattern_count(MemorySegment self) {
        var mh$ = ts_query_pattern_count.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_query_pattern_count", self);
            }
            return (int)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_query_capture_count {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_INT,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_query_capture_count");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32_t ts_query_capture_count(const TSQuery *self)
     * }
     */
    public static FunctionDescriptor ts_query_capture_count$descriptor() {
        return ts_query_capture_count.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32_t ts_query_capture_count(const TSQuery *self)
     * }
     */
    public static MethodHandle ts_query_capture_count$handle() {
        return ts_query_capture_count.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * uint32_t ts_query_capture_count(const TSQuery *self)
     * }
     */
    public static MemorySegment ts_query_capture_count$address() {
        return ts_query_capture_count.ADDR;
    }

    /**
     * {@snippet lang=c :
     * uint32_t ts_query_capture_count(const TSQuery *self)
     * }
     */
    public static int ts_query_capture_count(MemorySegment self) {
        var mh$ = ts_query_capture_count.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_query_capture_count", self);
            }
            return (int)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_query_string_count {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_INT,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_query_string_count");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32_t ts_query_string_count(const TSQuery *self)
     * }
     */
    public static FunctionDescriptor ts_query_string_count$descriptor() {
        return ts_query_string_count.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32_t ts_query_string_count(const TSQuery *self)
     * }
     */
    public static MethodHandle ts_query_string_count$handle() {
        return ts_query_string_count.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * uint32_t ts_query_string_count(const TSQuery *self)
     * }
     */
    public static MemorySegment ts_query_string_count$address() {
        return ts_query_string_count.ADDR;
    }

    /**
     * {@snippet lang=c :
     * uint32_t ts_query_string_count(const TSQuery *self)
     * }
     */
    public static int ts_query_string_count(MemorySegment self) {
        var mh$ = ts_query_string_count.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_query_string_count", self);
            }
            return (int)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_query_start_byte_for_pattern {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_INT,
            TreeSitter.C_POINTER,
            TreeSitter.C_INT
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_query_start_byte_for_pattern");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32_t ts_query_start_byte_for_pattern(const TSQuery *self, uint32_t pattern_index)
     * }
     */
    public static FunctionDescriptor ts_query_start_byte_for_pattern$descriptor() {
        return ts_query_start_byte_for_pattern.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32_t ts_query_start_byte_for_pattern(const TSQuery *self, uint32_t pattern_index)
     * }
     */
    public static MethodHandle ts_query_start_byte_for_pattern$handle() {
        return ts_query_start_byte_for_pattern.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * uint32_t ts_query_start_byte_for_pattern(const TSQuery *self, uint32_t pattern_index)
     * }
     */
    public static MemorySegment ts_query_start_byte_for_pattern$address() {
        return ts_query_start_byte_for_pattern.ADDR;
    }

    /**
     * {@snippet lang=c :
     * uint32_t ts_query_start_byte_for_pattern(const TSQuery *self, uint32_t pattern_index)
     * }
     */
    public static int ts_query_start_byte_for_pattern(MemorySegment self, int pattern_index) {
        var mh$ = ts_query_start_byte_for_pattern.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_query_start_byte_for_pattern", self, pattern_index);
            }
            return (int)mh$.invokeExact(self, pattern_index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_query_end_byte_for_pattern {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_INT,
            TreeSitter.C_POINTER,
            TreeSitter.C_INT
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_query_end_byte_for_pattern");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32_t ts_query_end_byte_for_pattern(const TSQuery *self, uint32_t pattern_index)
     * }
     */
    public static FunctionDescriptor ts_query_end_byte_for_pattern$descriptor() {
        return ts_query_end_byte_for_pattern.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32_t ts_query_end_byte_for_pattern(const TSQuery *self, uint32_t pattern_index)
     * }
     */
    public static MethodHandle ts_query_end_byte_for_pattern$handle() {
        return ts_query_end_byte_for_pattern.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * uint32_t ts_query_end_byte_for_pattern(const TSQuery *self, uint32_t pattern_index)
     * }
     */
    public static MemorySegment ts_query_end_byte_for_pattern$address() {
        return ts_query_end_byte_for_pattern.ADDR;
    }

    /**
     * {@snippet lang=c :
     * uint32_t ts_query_end_byte_for_pattern(const TSQuery *self, uint32_t pattern_index)
     * }
     */
    public static int ts_query_end_byte_for_pattern(MemorySegment self, int pattern_index) {
        var mh$ = ts_query_end_byte_for_pattern.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_query_end_byte_for_pattern", self, pattern_index);
            }
            return (int)mh$.invokeExact(self, pattern_index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_query_predicates_for_pattern {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER,
            TreeSitter.C_INT,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_query_predicates_for_pattern");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const TSQueryPredicateStep *ts_query_predicates_for_pattern(const TSQuery *self, uint32_t pattern_index, uint32_t *step_count)
     * }
     */
    public static FunctionDescriptor ts_query_predicates_for_pattern$descriptor() {
        return ts_query_predicates_for_pattern.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const TSQueryPredicateStep *ts_query_predicates_for_pattern(const TSQuery *self, uint32_t pattern_index, uint32_t *step_count)
     * }
     */
    public static MethodHandle ts_query_predicates_for_pattern$handle() {
        return ts_query_predicates_for_pattern.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const TSQueryPredicateStep *ts_query_predicates_for_pattern(const TSQuery *self, uint32_t pattern_index, uint32_t *step_count)
     * }
     */
    public static MemorySegment ts_query_predicates_for_pattern$address() {
        return ts_query_predicates_for_pattern.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const TSQueryPredicateStep *ts_query_predicates_for_pattern(const TSQuery *self, uint32_t pattern_index, uint32_t *step_count)
     * }
     */
    public static MemorySegment ts_query_predicates_for_pattern(MemorySegment self, int pattern_index, MemorySegment step_count) {
        var mh$ = ts_query_predicates_for_pattern.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_query_predicates_for_pattern", self, pattern_index, step_count);
            }
            return (MemorySegment)mh$.invokeExact(self, pattern_index, step_count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_query_is_pattern_rooted {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_BOOL,
            TreeSitter.C_POINTER,
            TreeSitter.C_INT
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_query_is_pattern_rooted");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * _Bool ts_query_is_pattern_rooted(const TSQuery *self, uint32_t pattern_index)
     * }
     */
    public static FunctionDescriptor ts_query_is_pattern_rooted$descriptor() {
        return ts_query_is_pattern_rooted.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * _Bool ts_query_is_pattern_rooted(const TSQuery *self, uint32_t pattern_index)
     * }
     */
    public static MethodHandle ts_query_is_pattern_rooted$handle() {
        return ts_query_is_pattern_rooted.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * _Bool ts_query_is_pattern_rooted(const TSQuery *self, uint32_t pattern_index)
     * }
     */
    public static MemorySegment ts_query_is_pattern_rooted$address() {
        return ts_query_is_pattern_rooted.ADDR;
    }

    /**
     * {@snippet lang=c :
     * _Bool ts_query_is_pattern_rooted(const TSQuery *self, uint32_t pattern_index)
     * }
     */
    public static boolean ts_query_is_pattern_rooted(MemorySegment self, int pattern_index) {
        var mh$ = ts_query_is_pattern_rooted.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_query_is_pattern_rooted", self, pattern_index);
            }
            return (boolean)mh$.invokeExact(self, pattern_index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_query_is_pattern_non_local {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_BOOL,
            TreeSitter.C_POINTER,
            TreeSitter.C_INT
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_query_is_pattern_non_local");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * _Bool ts_query_is_pattern_non_local(const TSQuery *self, uint32_t pattern_index)
     * }
     */
    public static FunctionDescriptor ts_query_is_pattern_non_local$descriptor() {
        return ts_query_is_pattern_non_local.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * _Bool ts_query_is_pattern_non_local(const TSQuery *self, uint32_t pattern_index)
     * }
     */
    public static MethodHandle ts_query_is_pattern_non_local$handle() {
        return ts_query_is_pattern_non_local.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * _Bool ts_query_is_pattern_non_local(const TSQuery *self, uint32_t pattern_index)
     * }
     */
    public static MemorySegment ts_query_is_pattern_non_local$address() {
        return ts_query_is_pattern_non_local.ADDR;
    }

    /**
     * {@snippet lang=c :
     * _Bool ts_query_is_pattern_non_local(const TSQuery *self, uint32_t pattern_index)
     * }
     */
    public static boolean ts_query_is_pattern_non_local(MemorySegment self, int pattern_index) {
        var mh$ = ts_query_is_pattern_non_local.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_query_is_pattern_non_local", self, pattern_index);
            }
            return (boolean)mh$.invokeExact(self, pattern_index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_query_is_pattern_guaranteed_at_step {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_BOOL,
            TreeSitter.C_POINTER,
            TreeSitter.C_INT
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_query_is_pattern_guaranteed_at_step");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * _Bool ts_query_is_pattern_guaranteed_at_step(const TSQuery *self, uint32_t byte_offset)
     * }
     */
    public static FunctionDescriptor ts_query_is_pattern_guaranteed_at_step$descriptor() {
        return ts_query_is_pattern_guaranteed_at_step.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * _Bool ts_query_is_pattern_guaranteed_at_step(const TSQuery *self, uint32_t byte_offset)
     * }
     */
    public static MethodHandle ts_query_is_pattern_guaranteed_at_step$handle() {
        return ts_query_is_pattern_guaranteed_at_step.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * _Bool ts_query_is_pattern_guaranteed_at_step(const TSQuery *self, uint32_t byte_offset)
     * }
     */
    public static MemorySegment ts_query_is_pattern_guaranteed_at_step$address() {
        return ts_query_is_pattern_guaranteed_at_step.ADDR;
    }

    /**
     * {@snippet lang=c :
     * _Bool ts_query_is_pattern_guaranteed_at_step(const TSQuery *self, uint32_t byte_offset)
     * }
     */
    public static boolean ts_query_is_pattern_guaranteed_at_step(MemorySegment self, int byte_offset) {
        var mh$ = ts_query_is_pattern_guaranteed_at_step.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_query_is_pattern_guaranteed_at_step", self, byte_offset);
            }
            return (boolean)mh$.invokeExact(self, byte_offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_query_capture_name_for_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER,
            TreeSitter.C_INT,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_query_capture_name_for_id");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *ts_query_capture_name_for_id(const TSQuery *self, uint32_t index, uint32_t *length)
     * }
     */
    public static FunctionDescriptor ts_query_capture_name_for_id$descriptor() {
        return ts_query_capture_name_for_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *ts_query_capture_name_for_id(const TSQuery *self, uint32_t index, uint32_t *length)
     * }
     */
    public static MethodHandle ts_query_capture_name_for_id$handle() {
        return ts_query_capture_name_for_id.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *ts_query_capture_name_for_id(const TSQuery *self, uint32_t index, uint32_t *length)
     * }
     */
    public static MemorySegment ts_query_capture_name_for_id$address() {
        return ts_query_capture_name_for_id.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *ts_query_capture_name_for_id(const TSQuery *self, uint32_t index, uint32_t *length)
     * }
     */
    public static MemorySegment ts_query_capture_name_for_id(MemorySegment self, int index, MemorySegment length) {
        var mh$ = ts_query_capture_name_for_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_query_capture_name_for_id", self, index, length);
            }
            return (MemorySegment)mh$.invokeExact(self, index, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_query_capture_quantifier_for_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_INT,
            TreeSitter.C_POINTER,
            TreeSitter.C_INT,
            TreeSitter.C_INT
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_query_capture_quantifier_for_id");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TSQuantifier ts_query_capture_quantifier_for_id(const TSQuery *self, uint32_t pattern_index, uint32_t capture_index)
     * }
     */
    public static FunctionDescriptor ts_query_capture_quantifier_for_id$descriptor() {
        return ts_query_capture_quantifier_for_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TSQuantifier ts_query_capture_quantifier_for_id(const TSQuery *self, uint32_t pattern_index, uint32_t capture_index)
     * }
     */
    public static MethodHandle ts_query_capture_quantifier_for_id$handle() {
        return ts_query_capture_quantifier_for_id.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TSQuantifier ts_query_capture_quantifier_for_id(const TSQuery *self, uint32_t pattern_index, uint32_t capture_index)
     * }
     */
    public static MemorySegment ts_query_capture_quantifier_for_id$address() {
        return ts_query_capture_quantifier_for_id.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TSQuantifier ts_query_capture_quantifier_for_id(const TSQuery *self, uint32_t pattern_index, uint32_t capture_index)
     * }
     */
    public static int ts_query_capture_quantifier_for_id(MemorySegment self, int pattern_index, int capture_index) {
        var mh$ = ts_query_capture_quantifier_for_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_query_capture_quantifier_for_id", self, pattern_index, capture_index);
            }
            return (int)mh$.invokeExact(self, pattern_index, capture_index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_query_string_value_for_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER,
            TreeSitter.C_INT,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_query_string_value_for_id");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *ts_query_string_value_for_id(const TSQuery *self, uint32_t index, uint32_t *length)
     * }
     */
    public static FunctionDescriptor ts_query_string_value_for_id$descriptor() {
        return ts_query_string_value_for_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *ts_query_string_value_for_id(const TSQuery *self, uint32_t index, uint32_t *length)
     * }
     */
    public static MethodHandle ts_query_string_value_for_id$handle() {
        return ts_query_string_value_for_id.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *ts_query_string_value_for_id(const TSQuery *self, uint32_t index, uint32_t *length)
     * }
     */
    public static MemorySegment ts_query_string_value_for_id$address() {
        return ts_query_string_value_for_id.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *ts_query_string_value_for_id(const TSQuery *self, uint32_t index, uint32_t *length)
     * }
     */
    public static MemorySegment ts_query_string_value_for_id(MemorySegment self, int index, MemorySegment length) {
        var mh$ = ts_query_string_value_for_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_query_string_value_for_id", self, index, length);
            }
            return (MemorySegment)mh$.invokeExact(self, index, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_query_disable_capture {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER,
            TreeSitter.C_INT
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_query_disable_capture");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ts_query_disable_capture(TSQuery *self, const char *name, uint32_t length)
     * }
     */
    public static FunctionDescriptor ts_query_disable_capture$descriptor() {
        return ts_query_disable_capture.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ts_query_disable_capture(TSQuery *self, const char *name, uint32_t length)
     * }
     */
    public static MethodHandle ts_query_disable_capture$handle() {
        return ts_query_disable_capture.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ts_query_disable_capture(TSQuery *self, const char *name, uint32_t length)
     * }
     */
    public static MemorySegment ts_query_disable_capture$address() {
        return ts_query_disable_capture.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ts_query_disable_capture(TSQuery *self, const char *name, uint32_t length)
     * }
     */
    public static void ts_query_disable_capture(MemorySegment self, MemorySegment name, int length) {
        var mh$ = ts_query_disable_capture.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_query_disable_capture", self, name, length);
            }
            mh$.invokeExact(self, name, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_query_disable_pattern {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            TreeSitter.C_POINTER,
            TreeSitter.C_INT
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_query_disable_pattern");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ts_query_disable_pattern(TSQuery *self, uint32_t pattern_index)
     * }
     */
    public static FunctionDescriptor ts_query_disable_pattern$descriptor() {
        return ts_query_disable_pattern.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ts_query_disable_pattern(TSQuery *self, uint32_t pattern_index)
     * }
     */
    public static MethodHandle ts_query_disable_pattern$handle() {
        return ts_query_disable_pattern.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ts_query_disable_pattern(TSQuery *self, uint32_t pattern_index)
     * }
     */
    public static MemorySegment ts_query_disable_pattern$address() {
        return ts_query_disable_pattern.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ts_query_disable_pattern(TSQuery *self, uint32_t pattern_index)
     * }
     */
    public static void ts_query_disable_pattern(MemorySegment self, int pattern_index) {
        var mh$ = ts_query_disable_pattern.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_query_disable_pattern", self, pattern_index);
            }
            mh$.invokeExact(self, pattern_index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_query_cursor_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_POINTER    );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_query_cursor_new");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TSQueryCursor *ts_query_cursor_new()
     * }
     */
    public static FunctionDescriptor ts_query_cursor_new$descriptor() {
        return ts_query_cursor_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TSQueryCursor *ts_query_cursor_new()
     * }
     */
    public static MethodHandle ts_query_cursor_new$handle() {
        return ts_query_cursor_new.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TSQueryCursor *ts_query_cursor_new()
     * }
     */
    public static MemorySegment ts_query_cursor_new$address() {
        return ts_query_cursor_new.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TSQueryCursor *ts_query_cursor_new()
     * }
     */
    public static MemorySegment ts_query_cursor_new() {
        var mh$ = ts_query_cursor_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_query_cursor_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_query_cursor_delete {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_query_cursor_delete");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ts_query_cursor_delete(TSQueryCursor *self)
     * }
     */
    public static FunctionDescriptor ts_query_cursor_delete$descriptor() {
        return ts_query_cursor_delete.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ts_query_cursor_delete(TSQueryCursor *self)
     * }
     */
    public static MethodHandle ts_query_cursor_delete$handle() {
        return ts_query_cursor_delete.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ts_query_cursor_delete(TSQueryCursor *self)
     * }
     */
    public static MemorySegment ts_query_cursor_delete$address() {
        return ts_query_cursor_delete.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ts_query_cursor_delete(TSQueryCursor *self)
     * }
     */
    public static void ts_query_cursor_delete(MemorySegment self) {
        var mh$ = ts_query_cursor_delete.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_query_cursor_delete", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_query_cursor_exec {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER,
            TSNode.layout()
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_query_cursor_exec");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ts_query_cursor_exec(TSQueryCursor *self, const TSQuery *query, TSNode node)
     * }
     */
    public static FunctionDescriptor ts_query_cursor_exec$descriptor() {
        return ts_query_cursor_exec.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ts_query_cursor_exec(TSQueryCursor *self, const TSQuery *query, TSNode node)
     * }
     */
    public static MethodHandle ts_query_cursor_exec$handle() {
        return ts_query_cursor_exec.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ts_query_cursor_exec(TSQueryCursor *self, const TSQuery *query, TSNode node)
     * }
     */
    public static MemorySegment ts_query_cursor_exec$address() {
        return ts_query_cursor_exec.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ts_query_cursor_exec(TSQueryCursor *self, const TSQuery *query, TSNode node)
     * }
     */
    public static void ts_query_cursor_exec(MemorySegment self, MemorySegment query, MemorySegment node) {
        var mh$ = ts_query_cursor_exec.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_query_cursor_exec", self, query, node);
            }
            mh$.invokeExact(self, query, node);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_query_cursor_did_exceed_match_limit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_BOOL,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_query_cursor_did_exceed_match_limit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * _Bool ts_query_cursor_did_exceed_match_limit(const TSQueryCursor *self)
     * }
     */
    public static FunctionDescriptor ts_query_cursor_did_exceed_match_limit$descriptor() {
        return ts_query_cursor_did_exceed_match_limit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * _Bool ts_query_cursor_did_exceed_match_limit(const TSQueryCursor *self)
     * }
     */
    public static MethodHandle ts_query_cursor_did_exceed_match_limit$handle() {
        return ts_query_cursor_did_exceed_match_limit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * _Bool ts_query_cursor_did_exceed_match_limit(const TSQueryCursor *self)
     * }
     */
    public static MemorySegment ts_query_cursor_did_exceed_match_limit$address() {
        return ts_query_cursor_did_exceed_match_limit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * _Bool ts_query_cursor_did_exceed_match_limit(const TSQueryCursor *self)
     * }
     */
    public static boolean ts_query_cursor_did_exceed_match_limit(MemorySegment self) {
        var mh$ = ts_query_cursor_did_exceed_match_limit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_query_cursor_did_exceed_match_limit", self);
            }
            return (boolean)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_query_cursor_match_limit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_INT,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_query_cursor_match_limit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32_t ts_query_cursor_match_limit(const TSQueryCursor *self)
     * }
     */
    public static FunctionDescriptor ts_query_cursor_match_limit$descriptor() {
        return ts_query_cursor_match_limit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32_t ts_query_cursor_match_limit(const TSQueryCursor *self)
     * }
     */
    public static MethodHandle ts_query_cursor_match_limit$handle() {
        return ts_query_cursor_match_limit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * uint32_t ts_query_cursor_match_limit(const TSQueryCursor *self)
     * }
     */
    public static MemorySegment ts_query_cursor_match_limit$address() {
        return ts_query_cursor_match_limit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * uint32_t ts_query_cursor_match_limit(const TSQueryCursor *self)
     * }
     */
    public static int ts_query_cursor_match_limit(MemorySegment self) {
        var mh$ = ts_query_cursor_match_limit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_query_cursor_match_limit", self);
            }
            return (int)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_query_cursor_set_match_limit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            TreeSitter.C_POINTER,
            TreeSitter.C_INT
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_query_cursor_set_match_limit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ts_query_cursor_set_match_limit(TSQueryCursor *self, uint32_t limit)
     * }
     */
    public static FunctionDescriptor ts_query_cursor_set_match_limit$descriptor() {
        return ts_query_cursor_set_match_limit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ts_query_cursor_set_match_limit(TSQueryCursor *self, uint32_t limit)
     * }
     */
    public static MethodHandle ts_query_cursor_set_match_limit$handle() {
        return ts_query_cursor_set_match_limit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ts_query_cursor_set_match_limit(TSQueryCursor *self, uint32_t limit)
     * }
     */
    public static MemorySegment ts_query_cursor_set_match_limit$address() {
        return ts_query_cursor_set_match_limit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ts_query_cursor_set_match_limit(TSQueryCursor *self, uint32_t limit)
     * }
     */
    public static void ts_query_cursor_set_match_limit(MemorySegment self, int limit) {
        var mh$ = ts_query_cursor_set_match_limit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_query_cursor_set_match_limit", self, limit);
            }
            mh$.invokeExact(self, limit);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_query_cursor_set_byte_range {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            TreeSitter.C_POINTER,
            TreeSitter.C_INT,
            TreeSitter.C_INT
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_query_cursor_set_byte_range");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ts_query_cursor_set_byte_range(TSQueryCursor *self, uint32_t start_byte, uint32_t end_byte)
     * }
     */
    public static FunctionDescriptor ts_query_cursor_set_byte_range$descriptor() {
        return ts_query_cursor_set_byte_range.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ts_query_cursor_set_byte_range(TSQueryCursor *self, uint32_t start_byte, uint32_t end_byte)
     * }
     */
    public static MethodHandle ts_query_cursor_set_byte_range$handle() {
        return ts_query_cursor_set_byte_range.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ts_query_cursor_set_byte_range(TSQueryCursor *self, uint32_t start_byte, uint32_t end_byte)
     * }
     */
    public static MemorySegment ts_query_cursor_set_byte_range$address() {
        return ts_query_cursor_set_byte_range.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ts_query_cursor_set_byte_range(TSQueryCursor *self, uint32_t start_byte, uint32_t end_byte)
     * }
     */
    public static void ts_query_cursor_set_byte_range(MemorySegment self, int start_byte, int end_byte) {
        var mh$ = ts_query_cursor_set_byte_range.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_query_cursor_set_byte_range", self, start_byte, end_byte);
            }
            mh$.invokeExact(self, start_byte, end_byte);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_query_cursor_set_point_range {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            TreeSitter.C_POINTER,
            TSPoint.layout(),
            TSPoint.layout()
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_query_cursor_set_point_range");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ts_query_cursor_set_point_range(TSQueryCursor *self, TSPoint start_point, TSPoint end_point)
     * }
     */
    public static FunctionDescriptor ts_query_cursor_set_point_range$descriptor() {
        return ts_query_cursor_set_point_range.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ts_query_cursor_set_point_range(TSQueryCursor *self, TSPoint start_point, TSPoint end_point)
     * }
     */
    public static MethodHandle ts_query_cursor_set_point_range$handle() {
        return ts_query_cursor_set_point_range.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ts_query_cursor_set_point_range(TSQueryCursor *self, TSPoint start_point, TSPoint end_point)
     * }
     */
    public static MemorySegment ts_query_cursor_set_point_range$address() {
        return ts_query_cursor_set_point_range.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ts_query_cursor_set_point_range(TSQueryCursor *self, TSPoint start_point, TSPoint end_point)
     * }
     */
    public static void ts_query_cursor_set_point_range(MemorySegment self, MemorySegment start_point, MemorySegment end_point) {
        var mh$ = ts_query_cursor_set_point_range.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_query_cursor_set_point_range", self, start_point, end_point);
            }
            mh$.invokeExact(self, start_point, end_point);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_query_cursor_next_match {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_BOOL,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_query_cursor_next_match");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * _Bool ts_query_cursor_next_match(TSQueryCursor *self, TSQueryMatch *match)
     * }
     */
    public static FunctionDescriptor ts_query_cursor_next_match$descriptor() {
        return ts_query_cursor_next_match.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * _Bool ts_query_cursor_next_match(TSQueryCursor *self, TSQueryMatch *match)
     * }
     */
    public static MethodHandle ts_query_cursor_next_match$handle() {
        return ts_query_cursor_next_match.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * _Bool ts_query_cursor_next_match(TSQueryCursor *self, TSQueryMatch *match)
     * }
     */
    public static MemorySegment ts_query_cursor_next_match$address() {
        return ts_query_cursor_next_match.ADDR;
    }

    /**
     * {@snippet lang=c :
     * _Bool ts_query_cursor_next_match(TSQueryCursor *self, TSQueryMatch *match)
     * }
     */
    public static boolean ts_query_cursor_next_match(MemorySegment self, MemorySegment match) {
        var mh$ = ts_query_cursor_next_match.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_query_cursor_next_match", self, match);
            }
            return (boolean)mh$.invokeExact(self, match);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_query_cursor_remove_match {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            TreeSitter.C_POINTER,
            TreeSitter.C_INT
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_query_cursor_remove_match");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ts_query_cursor_remove_match(TSQueryCursor *self, uint32_t match_id)
     * }
     */
    public static FunctionDescriptor ts_query_cursor_remove_match$descriptor() {
        return ts_query_cursor_remove_match.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ts_query_cursor_remove_match(TSQueryCursor *self, uint32_t match_id)
     * }
     */
    public static MethodHandle ts_query_cursor_remove_match$handle() {
        return ts_query_cursor_remove_match.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ts_query_cursor_remove_match(TSQueryCursor *self, uint32_t match_id)
     * }
     */
    public static MemorySegment ts_query_cursor_remove_match$address() {
        return ts_query_cursor_remove_match.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ts_query_cursor_remove_match(TSQueryCursor *self, uint32_t match_id)
     * }
     */
    public static void ts_query_cursor_remove_match(MemorySegment self, int match_id) {
        var mh$ = ts_query_cursor_remove_match.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_query_cursor_remove_match", self, match_id);
            }
            mh$.invokeExact(self, match_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_query_cursor_next_capture {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_BOOL,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_query_cursor_next_capture");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * _Bool ts_query_cursor_next_capture(TSQueryCursor *self, TSQueryMatch *match, uint32_t *capture_index)
     * }
     */
    public static FunctionDescriptor ts_query_cursor_next_capture$descriptor() {
        return ts_query_cursor_next_capture.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * _Bool ts_query_cursor_next_capture(TSQueryCursor *self, TSQueryMatch *match, uint32_t *capture_index)
     * }
     */
    public static MethodHandle ts_query_cursor_next_capture$handle() {
        return ts_query_cursor_next_capture.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * _Bool ts_query_cursor_next_capture(TSQueryCursor *self, TSQueryMatch *match, uint32_t *capture_index)
     * }
     */
    public static MemorySegment ts_query_cursor_next_capture$address() {
        return ts_query_cursor_next_capture.ADDR;
    }

    /**
     * {@snippet lang=c :
     * _Bool ts_query_cursor_next_capture(TSQueryCursor *self, TSQueryMatch *match, uint32_t *capture_index)
     * }
     */
    public static boolean ts_query_cursor_next_capture(MemorySegment self, MemorySegment match, MemorySegment capture_index) {
        var mh$ = ts_query_cursor_next_capture.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_query_cursor_next_capture", self, match, capture_index);
            }
            return (boolean)mh$.invokeExact(self, match, capture_index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_query_cursor_set_max_start_depth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            TreeSitter.C_POINTER,
            TreeSitter.C_INT
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_query_cursor_set_max_start_depth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ts_query_cursor_set_max_start_depth(TSQueryCursor *self, uint32_t max_start_depth)
     * }
     */
    public static FunctionDescriptor ts_query_cursor_set_max_start_depth$descriptor() {
        return ts_query_cursor_set_max_start_depth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ts_query_cursor_set_max_start_depth(TSQueryCursor *self, uint32_t max_start_depth)
     * }
     */
    public static MethodHandle ts_query_cursor_set_max_start_depth$handle() {
        return ts_query_cursor_set_max_start_depth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ts_query_cursor_set_max_start_depth(TSQueryCursor *self, uint32_t max_start_depth)
     * }
     */
    public static MemorySegment ts_query_cursor_set_max_start_depth$address() {
        return ts_query_cursor_set_max_start_depth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ts_query_cursor_set_max_start_depth(TSQueryCursor *self, uint32_t max_start_depth)
     * }
     */
    public static void ts_query_cursor_set_max_start_depth(MemorySegment self, int max_start_depth) {
        var mh$ = ts_query_cursor_set_max_start_depth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_query_cursor_set_max_start_depth", self, max_start_depth);
            }
            mh$.invokeExact(self, max_start_depth);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_language_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_language_copy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const TSLanguage *ts_language_copy(const TSLanguage *self)
     * }
     */
    public static FunctionDescriptor ts_language_copy$descriptor() {
        return ts_language_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const TSLanguage *ts_language_copy(const TSLanguage *self)
     * }
     */
    public static MethodHandle ts_language_copy$handle() {
        return ts_language_copy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const TSLanguage *ts_language_copy(const TSLanguage *self)
     * }
     */
    public static MemorySegment ts_language_copy$address() {
        return ts_language_copy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const TSLanguage *ts_language_copy(const TSLanguage *self)
     * }
     */
    public static MemorySegment ts_language_copy(MemorySegment self) {
        var mh$ = ts_language_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_language_copy", self);
            }
            return (MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_language_delete {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_language_delete");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ts_language_delete(const TSLanguage *self)
     * }
     */
    public static FunctionDescriptor ts_language_delete$descriptor() {
        return ts_language_delete.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ts_language_delete(const TSLanguage *self)
     * }
     */
    public static MethodHandle ts_language_delete$handle() {
        return ts_language_delete.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ts_language_delete(const TSLanguage *self)
     * }
     */
    public static MemorySegment ts_language_delete$address() {
        return ts_language_delete.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ts_language_delete(const TSLanguage *self)
     * }
     */
    public static void ts_language_delete(MemorySegment self) {
        var mh$ = ts_language_delete.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_language_delete", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_language_symbol_count {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_INT,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_language_symbol_count");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32_t ts_language_symbol_count(const TSLanguage *self)
     * }
     */
    public static FunctionDescriptor ts_language_symbol_count$descriptor() {
        return ts_language_symbol_count.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32_t ts_language_symbol_count(const TSLanguage *self)
     * }
     */
    public static MethodHandle ts_language_symbol_count$handle() {
        return ts_language_symbol_count.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * uint32_t ts_language_symbol_count(const TSLanguage *self)
     * }
     */
    public static MemorySegment ts_language_symbol_count$address() {
        return ts_language_symbol_count.ADDR;
    }

    /**
     * {@snippet lang=c :
     * uint32_t ts_language_symbol_count(const TSLanguage *self)
     * }
     */
    public static int ts_language_symbol_count(MemorySegment self) {
        var mh$ = ts_language_symbol_count.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_language_symbol_count", self);
            }
            return (int)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_language_state_count {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_INT,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_language_state_count");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32_t ts_language_state_count(const TSLanguage *self)
     * }
     */
    public static FunctionDescriptor ts_language_state_count$descriptor() {
        return ts_language_state_count.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32_t ts_language_state_count(const TSLanguage *self)
     * }
     */
    public static MethodHandle ts_language_state_count$handle() {
        return ts_language_state_count.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * uint32_t ts_language_state_count(const TSLanguage *self)
     * }
     */
    public static MemorySegment ts_language_state_count$address() {
        return ts_language_state_count.ADDR;
    }

    /**
     * {@snippet lang=c :
     * uint32_t ts_language_state_count(const TSLanguage *self)
     * }
     */
    public static int ts_language_state_count(MemorySegment self) {
        var mh$ = ts_language_state_count.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_language_state_count", self);
            }
            return (int)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_language_symbol_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER,
            TreeSitter.C_SHORT
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_language_symbol_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *ts_language_symbol_name(const TSLanguage *self, TSSymbol symbol)
     * }
     */
    public static FunctionDescriptor ts_language_symbol_name$descriptor() {
        return ts_language_symbol_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *ts_language_symbol_name(const TSLanguage *self, TSSymbol symbol)
     * }
     */
    public static MethodHandle ts_language_symbol_name$handle() {
        return ts_language_symbol_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *ts_language_symbol_name(const TSLanguage *self, TSSymbol symbol)
     * }
     */
    public static MemorySegment ts_language_symbol_name$address() {
        return ts_language_symbol_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *ts_language_symbol_name(const TSLanguage *self, TSSymbol symbol)
     * }
     */
    public static MemorySegment ts_language_symbol_name(MemorySegment self, short symbol) {
        var mh$ = ts_language_symbol_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_language_symbol_name", self, symbol);
            }
            return (MemorySegment)mh$.invokeExact(self, symbol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_language_symbol_for_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_SHORT,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER,
            TreeSitter.C_INT,
            TreeSitter.C_BOOL
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_language_symbol_for_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TSSymbol ts_language_symbol_for_name(const TSLanguage *self, const char *string, uint32_t length, _Bool is_named)
     * }
     */
    public static FunctionDescriptor ts_language_symbol_for_name$descriptor() {
        return ts_language_symbol_for_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TSSymbol ts_language_symbol_for_name(const TSLanguage *self, const char *string, uint32_t length, _Bool is_named)
     * }
     */
    public static MethodHandle ts_language_symbol_for_name$handle() {
        return ts_language_symbol_for_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TSSymbol ts_language_symbol_for_name(const TSLanguage *self, const char *string, uint32_t length, _Bool is_named)
     * }
     */
    public static MemorySegment ts_language_symbol_for_name$address() {
        return ts_language_symbol_for_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TSSymbol ts_language_symbol_for_name(const TSLanguage *self, const char *string, uint32_t length, _Bool is_named)
     * }
     */
    public static short ts_language_symbol_for_name(MemorySegment self, MemorySegment string, int length, boolean is_named) {
        var mh$ = ts_language_symbol_for_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_language_symbol_for_name", self, string, length, is_named);
            }
            return (short)mh$.invokeExact(self, string, length, is_named);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_language_field_count {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_INT,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_language_field_count");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32_t ts_language_field_count(const TSLanguage *self)
     * }
     */
    public static FunctionDescriptor ts_language_field_count$descriptor() {
        return ts_language_field_count.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32_t ts_language_field_count(const TSLanguage *self)
     * }
     */
    public static MethodHandle ts_language_field_count$handle() {
        return ts_language_field_count.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * uint32_t ts_language_field_count(const TSLanguage *self)
     * }
     */
    public static MemorySegment ts_language_field_count$address() {
        return ts_language_field_count.ADDR;
    }

    /**
     * {@snippet lang=c :
     * uint32_t ts_language_field_count(const TSLanguage *self)
     * }
     */
    public static int ts_language_field_count(MemorySegment self) {
        var mh$ = ts_language_field_count.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_language_field_count", self);
            }
            return (int)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_language_field_name_for_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER,
            TreeSitter.C_SHORT
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_language_field_name_for_id");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *ts_language_field_name_for_id(const TSLanguage *self, TSFieldId id)
     * }
     */
    public static FunctionDescriptor ts_language_field_name_for_id$descriptor() {
        return ts_language_field_name_for_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *ts_language_field_name_for_id(const TSLanguage *self, TSFieldId id)
     * }
     */
    public static MethodHandle ts_language_field_name_for_id$handle() {
        return ts_language_field_name_for_id.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *ts_language_field_name_for_id(const TSLanguage *self, TSFieldId id)
     * }
     */
    public static MemorySegment ts_language_field_name_for_id$address() {
        return ts_language_field_name_for_id.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *ts_language_field_name_for_id(const TSLanguage *self, TSFieldId id)
     * }
     */
    public static MemorySegment ts_language_field_name_for_id(MemorySegment self, short id) {
        var mh$ = ts_language_field_name_for_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_language_field_name_for_id", self, id);
            }
            return (MemorySegment)mh$.invokeExact(self, id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_language_field_id_for_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_SHORT,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER,
            TreeSitter.C_INT
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_language_field_id_for_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TSFieldId ts_language_field_id_for_name(const TSLanguage *self, const char *name, uint32_t name_length)
     * }
     */
    public static FunctionDescriptor ts_language_field_id_for_name$descriptor() {
        return ts_language_field_id_for_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TSFieldId ts_language_field_id_for_name(const TSLanguage *self, const char *name, uint32_t name_length)
     * }
     */
    public static MethodHandle ts_language_field_id_for_name$handle() {
        return ts_language_field_id_for_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TSFieldId ts_language_field_id_for_name(const TSLanguage *self, const char *name, uint32_t name_length)
     * }
     */
    public static MemorySegment ts_language_field_id_for_name$address() {
        return ts_language_field_id_for_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TSFieldId ts_language_field_id_for_name(const TSLanguage *self, const char *name, uint32_t name_length)
     * }
     */
    public static short ts_language_field_id_for_name(MemorySegment self, MemorySegment name, int name_length) {
        var mh$ = ts_language_field_id_for_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_language_field_id_for_name", self, name, name_length);
            }
            return (short)mh$.invokeExact(self, name, name_length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_language_symbol_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_INT,
            TreeSitter.C_POINTER,
            TreeSitter.C_SHORT
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_language_symbol_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TSSymbolType ts_language_symbol_type(const TSLanguage *self, TSSymbol symbol)
     * }
     */
    public static FunctionDescriptor ts_language_symbol_type$descriptor() {
        return ts_language_symbol_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TSSymbolType ts_language_symbol_type(const TSLanguage *self, TSSymbol symbol)
     * }
     */
    public static MethodHandle ts_language_symbol_type$handle() {
        return ts_language_symbol_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TSSymbolType ts_language_symbol_type(const TSLanguage *self, TSSymbol symbol)
     * }
     */
    public static MemorySegment ts_language_symbol_type$address() {
        return ts_language_symbol_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TSSymbolType ts_language_symbol_type(const TSLanguage *self, TSSymbol symbol)
     * }
     */
    public static int ts_language_symbol_type(MemorySegment self, short symbol) {
        var mh$ = ts_language_symbol_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_language_symbol_type", self, symbol);
            }
            return (int)mh$.invokeExact(self, symbol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_language_version {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_INT,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_language_version");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32_t ts_language_version(const TSLanguage *self)
     * }
     */
    public static FunctionDescriptor ts_language_version$descriptor() {
        return ts_language_version.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32_t ts_language_version(const TSLanguage *self)
     * }
     */
    public static MethodHandle ts_language_version$handle() {
        return ts_language_version.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * uint32_t ts_language_version(const TSLanguage *self)
     * }
     */
    public static MemorySegment ts_language_version$address() {
        return ts_language_version.ADDR;
    }

    /**
     * {@snippet lang=c :
     * uint32_t ts_language_version(const TSLanguage *self)
     * }
     */
    public static int ts_language_version(MemorySegment self) {
        var mh$ = ts_language_version.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_language_version", self);
            }
            return (int)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_language_next_state {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_SHORT,
            TreeSitter.C_POINTER,
            TreeSitter.C_SHORT,
            TreeSitter.C_SHORT
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_language_next_state");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TSStateId ts_language_next_state(const TSLanguage *self, TSStateId state, TSSymbol symbol)
     * }
     */
    public static FunctionDescriptor ts_language_next_state$descriptor() {
        return ts_language_next_state.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TSStateId ts_language_next_state(const TSLanguage *self, TSStateId state, TSSymbol symbol)
     * }
     */
    public static MethodHandle ts_language_next_state$handle() {
        return ts_language_next_state.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TSStateId ts_language_next_state(const TSLanguage *self, TSStateId state, TSSymbol symbol)
     * }
     */
    public static MemorySegment ts_language_next_state$address() {
        return ts_language_next_state.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TSStateId ts_language_next_state(const TSLanguage *self, TSStateId state, TSSymbol symbol)
     * }
     */
    public static short ts_language_next_state(MemorySegment self, short state, short symbol) {
        var mh$ = ts_language_next_state.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_language_next_state", self, state, symbol);
            }
            return (short)mh$.invokeExact(self, state, symbol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_lookahead_iterator_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER,
            TreeSitter.C_SHORT
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_lookahead_iterator_new");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TSLookaheadIterator *ts_lookahead_iterator_new(const TSLanguage *self, TSStateId state)
     * }
     */
    public static FunctionDescriptor ts_lookahead_iterator_new$descriptor() {
        return ts_lookahead_iterator_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TSLookaheadIterator *ts_lookahead_iterator_new(const TSLanguage *self, TSStateId state)
     * }
     */
    public static MethodHandle ts_lookahead_iterator_new$handle() {
        return ts_lookahead_iterator_new.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TSLookaheadIterator *ts_lookahead_iterator_new(const TSLanguage *self, TSStateId state)
     * }
     */
    public static MemorySegment ts_lookahead_iterator_new$address() {
        return ts_lookahead_iterator_new.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TSLookaheadIterator *ts_lookahead_iterator_new(const TSLanguage *self, TSStateId state)
     * }
     */
    public static MemorySegment ts_lookahead_iterator_new(MemorySegment self, short state) {
        var mh$ = ts_lookahead_iterator_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_lookahead_iterator_new", self, state);
            }
            return (MemorySegment)mh$.invokeExact(self, state);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_lookahead_iterator_delete {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_lookahead_iterator_delete");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ts_lookahead_iterator_delete(TSLookaheadIterator *self)
     * }
     */
    public static FunctionDescriptor ts_lookahead_iterator_delete$descriptor() {
        return ts_lookahead_iterator_delete.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ts_lookahead_iterator_delete(TSLookaheadIterator *self)
     * }
     */
    public static MethodHandle ts_lookahead_iterator_delete$handle() {
        return ts_lookahead_iterator_delete.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ts_lookahead_iterator_delete(TSLookaheadIterator *self)
     * }
     */
    public static MemorySegment ts_lookahead_iterator_delete$address() {
        return ts_lookahead_iterator_delete.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ts_lookahead_iterator_delete(TSLookaheadIterator *self)
     * }
     */
    public static void ts_lookahead_iterator_delete(MemorySegment self) {
        var mh$ = ts_lookahead_iterator_delete.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_lookahead_iterator_delete", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_lookahead_iterator_reset_state {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_BOOL,
            TreeSitter.C_POINTER,
            TreeSitter.C_SHORT
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_lookahead_iterator_reset_state");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * _Bool ts_lookahead_iterator_reset_state(TSLookaheadIterator *self, TSStateId state)
     * }
     */
    public static FunctionDescriptor ts_lookahead_iterator_reset_state$descriptor() {
        return ts_lookahead_iterator_reset_state.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * _Bool ts_lookahead_iterator_reset_state(TSLookaheadIterator *self, TSStateId state)
     * }
     */
    public static MethodHandle ts_lookahead_iterator_reset_state$handle() {
        return ts_lookahead_iterator_reset_state.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * _Bool ts_lookahead_iterator_reset_state(TSLookaheadIterator *self, TSStateId state)
     * }
     */
    public static MemorySegment ts_lookahead_iterator_reset_state$address() {
        return ts_lookahead_iterator_reset_state.ADDR;
    }

    /**
     * {@snippet lang=c :
     * _Bool ts_lookahead_iterator_reset_state(TSLookaheadIterator *self, TSStateId state)
     * }
     */
    public static boolean ts_lookahead_iterator_reset_state(MemorySegment self, short state) {
        var mh$ = ts_lookahead_iterator_reset_state.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_lookahead_iterator_reset_state", self, state);
            }
            return (boolean)mh$.invokeExact(self, state);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_lookahead_iterator_reset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_BOOL,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER,
            TreeSitter.C_SHORT
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_lookahead_iterator_reset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * _Bool ts_lookahead_iterator_reset(TSLookaheadIterator *self, const TSLanguage *language, TSStateId state)
     * }
     */
    public static FunctionDescriptor ts_lookahead_iterator_reset$descriptor() {
        return ts_lookahead_iterator_reset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * _Bool ts_lookahead_iterator_reset(TSLookaheadIterator *self, const TSLanguage *language, TSStateId state)
     * }
     */
    public static MethodHandle ts_lookahead_iterator_reset$handle() {
        return ts_lookahead_iterator_reset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * _Bool ts_lookahead_iterator_reset(TSLookaheadIterator *self, const TSLanguage *language, TSStateId state)
     * }
     */
    public static MemorySegment ts_lookahead_iterator_reset$address() {
        return ts_lookahead_iterator_reset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * _Bool ts_lookahead_iterator_reset(TSLookaheadIterator *self, const TSLanguage *language, TSStateId state)
     * }
     */
    public static boolean ts_lookahead_iterator_reset(MemorySegment self, MemorySegment language, short state) {
        var mh$ = ts_lookahead_iterator_reset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_lookahead_iterator_reset", self, language, state);
            }
            return (boolean)mh$.invokeExact(self, language, state);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_lookahead_iterator_language {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_lookahead_iterator_language");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const TSLanguage *ts_lookahead_iterator_language(const TSLookaheadIterator *self)
     * }
     */
    public static FunctionDescriptor ts_lookahead_iterator_language$descriptor() {
        return ts_lookahead_iterator_language.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const TSLanguage *ts_lookahead_iterator_language(const TSLookaheadIterator *self)
     * }
     */
    public static MethodHandle ts_lookahead_iterator_language$handle() {
        return ts_lookahead_iterator_language.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const TSLanguage *ts_lookahead_iterator_language(const TSLookaheadIterator *self)
     * }
     */
    public static MemorySegment ts_lookahead_iterator_language$address() {
        return ts_lookahead_iterator_language.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const TSLanguage *ts_lookahead_iterator_language(const TSLookaheadIterator *self)
     * }
     */
    public static MemorySegment ts_lookahead_iterator_language(MemorySegment self) {
        var mh$ = ts_lookahead_iterator_language.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_lookahead_iterator_language", self);
            }
            return (MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_lookahead_iterator_next {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_BOOL,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_lookahead_iterator_next");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * _Bool ts_lookahead_iterator_next(TSLookaheadIterator *self)
     * }
     */
    public static FunctionDescriptor ts_lookahead_iterator_next$descriptor() {
        return ts_lookahead_iterator_next.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * _Bool ts_lookahead_iterator_next(TSLookaheadIterator *self)
     * }
     */
    public static MethodHandle ts_lookahead_iterator_next$handle() {
        return ts_lookahead_iterator_next.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * _Bool ts_lookahead_iterator_next(TSLookaheadIterator *self)
     * }
     */
    public static MemorySegment ts_lookahead_iterator_next$address() {
        return ts_lookahead_iterator_next.ADDR;
    }

    /**
     * {@snippet lang=c :
     * _Bool ts_lookahead_iterator_next(TSLookaheadIterator *self)
     * }
     */
    public static boolean ts_lookahead_iterator_next(MemorySegment self) {
        var mh$ = ts_lookahead_iterator_next.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_lookahead_iterator_next", self);
            }
            return (boolean)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_lookahead_iterator_current_symbol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_SHORT,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_lookahead_iterator_current_symbol");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TSSymbol ts_lookahead_iterator_current_symbol(const TSLookaheadIterator *self)
     * }
     */
    public static FunctionDescriptor ts_lookahead_iterator_current_symbol$descriptor() {
        return ts_lookahead_iterator_current_symbol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TSSymbol ts_lookahead_iterator_current_symbol(const TSLookaheadIterator *self)
     * }
     */
    public static MethodHandle ts_lookahead_iterator_current_symbol$handle() {
        return ts_lookahead_iterator_current_symbol.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TSSymbol ts_lookahead_iterator_current_symbol(const TSLookaheadIterator *self)
     * }
     */
    public static MemorySegment ts_lookahead_iterator_current_symbol$address() {
        return ts_lookahead_iterator_current_symbol.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TSSymbol ts_lookahead_iterator_current_symbol(const TSLookaheadIterator *self)
     * }
     */
    public static short ts_lookahead_iterator_current_symbol(MemorySegment self) {
        var mh$ = ts_lookahead_iterator_current_symbol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_lookahead_iterator_current_symbol", self);
            }
            return (short)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_lookahead_iterator_current_symbol_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_lookahead_iterator_current_symbol_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *ts_lookahead_iterator_current_symbol_name(const TSLookaheadIterator *self)
     * }
     */
    public static FunctionDescriptor ts_lookahead_iterator_current_symbol_name$descriptor() {
        return ts_lookahead_iterator_current_symbol_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *ts_lookahead_iterator_current_symbol_name(const TSLookaheadIterator *self)
     * }
     */
    public static MethodHandle ts_lookahead_iterator_current_symbol_name$handle() {
        return ts_lookahead_iterator_current_symbol_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *ts_lookahead_iterator_current_symbol_name(const TSLookaheadIterator *self)
     * }
     */
    public static MemorySegment ts_lookahead_iterator_current_symbol_name$address() {
        return ts_lookahead_iterator_current_symbol_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *ts_lookahead_iterator_current_symbol_name(const TSLookaheadIterator *self)
     * }
     */
    public static MemorySegment ts_lookahead_iterator_current_symbol_name(MemorySegment self) {
        var mh$ = ts_lookahead_iterator_current_symbol_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_lookahead_iterator_current_symbol_name", self);
            }
            return (MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int TSWasmErrorKindNone = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.TSWasmErrorKindNone = 0
     * }
     */
    public static int TSWasmErrorKindNone() {
        return TSWasmErrorKindNone;
    }
    private static final int TSWasmErrorKindParse = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.TSWasmErrorKindParse = 1
     * }
     */
    public static int TSWasmErrorKindParse() {
        return TSWasmErrorKindParse;
    }
    private static final int TSWasmErrorKindCompile = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.TSWasmErrorKindCompile = 2
     * }
     */
    public static int TSWasmErrorKindCompile() {
        return TSWasmErrorKindCompile;
    }
    private static final int TSWasmErrorKindInstantiate = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.TSWasmErrorKindInstantiate = 3
     * }
     */
    public static int TSWasmErrorKindInstantiate() {
        return TSWasmErrorKindInstantiate;
    }
    private static final int TSWasmErrorKindAllocate = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.TSWasmErrorKindAllocate = 4
     * }
     */
    public static int TSWasmErrorKindAllocate() {
        return TSWasmErrorKindAllocate;
    }

    private static class ts_wasm_store_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_wasm_store_new");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TSWasmStore *ts_wasm_store_new(TSWasmEngine *engine, TSWasmError *error)
     * }
     */
    public static FunctionDescriptor ts_wasm_store_new$descriptor() {
        return ts_wasm_store_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TSWasmStore *ts_wasm_store_new(TSWasmEngine *engine, TSWasmError *error)
     * }
     */
    public static MethodHandle ts_wasm_store_new$handle() {
        return ts_wasm_store_new.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TSWasmStore *ts_wasm_store_new(TSWasmEngine *engine, TSWasmError *error)
     * }
     */
    public static MemorySegment ts_wasm_store_new$address() {
        return ts_wasm_store_new.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TSWasmStore *ts_wasm_store_new(TSWasmEngine *engine, TSWasmError *error)
     * }
     */
    public static MemorySegment ts_wasm_store_new(MemorySegment engine, MemorySegment error) {
        var mh$ = ts_wasm_store_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_wasm_store_new", engine, error);
            }
            return (MemorySegment)mh$.invokeExact(engine, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_wasm_store_delete {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_wasm_store_delete");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ts_wasm_store_delete(TSWasmStore *)
     * }
     */
    public static FunctionDescriptor ts_wasm_store_delete$descriptor() {
        return ts_wasm_store_delete.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ts_wasm_store_delete(TSWasmStore *)
     * }
     */
    public static MethodHandle ts_wasm_store_delete$handle() {
        return ts_wasm_store_delete.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ts_wasm_store_delete(TSWasmStore *)
     * }
     */
    public static MemorySegment ts_wasm_store_delete$address() {
        return ts_wasm_store_delete.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ts_wasm_store_delete(TSWasmStore *)
     * }
     */
    public static void ts_wasm_store_delete(MemorySegment x0) {
        var mh$ = ts_wasm_store_delete.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_wasm_store_delete", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_wasm_store_load_language {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER,
            TreeSitter.C_INT,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_wasm_store_load_language");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const TSLanguage *ts_wasm_store_load_language(TSWasmStore *, const char *name, const char *wasm, uint32_t wasm_len, TSWasmError *error)
     * }
     */
    public static FunctionDescriptor ts_wasm_store_load_language$descriptor() {
        return ts_wasm_store_load_language.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const TSLanguage *ts_wasm_store_load_language(TSWasmStore *, const char *name, const char *wasm, uint32_t wasm_len, TSWasmError *error)
     * }
     */
    public static MethodHandle ts_wasm_store_load_language$handle() {
        return ts_wasm_store_load_language.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const TSLanguage *ts_wasm_store_load_language(TSWasmStore *, const char *name, const char *wasm, uint32_t wasm_len, TSWasmError *error)
     * }
     */
    public static MemorySegment ts_wasm_store_load_language$address() {
        return ts_wasm_store_load_language.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const TSLanguage *ts_wasm_store_load_language(TSWasmStore *, const char *name, const char *wasm, uint32_t wasm_len, TSWasmError *error)
     * }
     */
    public static MemorySegment ts_wasm_store_load_language(MemorySegment x0, MemorySegment name, MemorySegment wasm, int wasm_len, MemorySegment error) {
        var mh$ = ts_wasm_store_load_language.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_wasm_store_load_language", x0, name, wasm, wasm_len, error);
            }
            return (MemorySegment)mh$.invokeExact(x0, name, wasm, wasm_len, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_wasm_store_language_count {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_LONG,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_wasm_store_language_count");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t ts_wasm_store_language_count(const TSWasmStore *)
     * }
     */
    public static FunctionDescriptor ts_wasm_store_language_count$descriptor() {
        return ts_wasm_store_language_count.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t ts_wasm_store_language_count(const TSWasmStore *)
     * }
     */
    public static MethodHandle ts_wasm_store_language_count$handle() {
        return ts_wasm_store_language_count.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * size_t ts_wasm_store_language_count(const TSWasmStore *)
     * }
     */
    public static MemorySegment ts_wasm_store_language_count$address() {
        return ts_wasm_store_language_count.ADDR;
    }

    /**
     * {@snippet lang=c :
     * size_t ts_wasm_store_language_count(const TSWasmStore *)
     * }
     */
    public static long ts_wasm_store_language_count(MemorySegment x0) {
        var mh$ = ts_wasm_store_language_count.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_wasm_store_language_count", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_language_is_wasm {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_BOOL,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_language_is_wasm");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * _Bool ts_language_is_wasm(const TSLanguage *)
     * }
     */
    public static FunctionDescriptor ts_language_is_wasm$descriptor() {
        return ts_language_is_wasm.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * _Bool ts_language_is_wasm(const TSLanguage *)
     * }
     */
    public static MethodHandle ts_language_is_wasm$handle() {
        return ts_language_is_wasm.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * _Bool ts_language_is_wasm(const TSLanguage *)
     * }
     */
    public static MemorySegment ts_language_is_wasm$address() {
        return ts_language_is_wasm.ADDR;
    }

    /**
     * {@snippet lang=c :
     * _Bool ts_language_is_wasm(const TSLanguage *)
     * }
     */
    public static boolean ts_language_is_wasm(MemorySegment x0) {
        var mh$ = ts_language_is_wasm.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_language_is_wasm", x0);
            }
            return (boolean)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_parser_set_wasm_store {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_parser_set_wasm_store");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ts_parser_set_wasm_store(TSParser *, TSWasmStore *)
     * }
     */
    public static FunctionDescriptor ts_parser_set_wasm_store$descriptor() {
        return ts_parser_set_wasm_store.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ts_parser_set_wasm_store(TSParser *, TSWasmStore *)
     * }
     */
    public static MethodHandle ts_parser_set_wasm_store$handle() {
        return ts_parser_set_wasm_store.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ts_parser_set_wasm_store(TSParser *, TSWasmStore *)
     * }
     */
    public static MemorySegment ts_parser_set_wasm_store$address() {
        return ts_parser_set_wasm_store.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ts_parser_set_wasm_store(TSParser *, TSWasmStore *)
     * }
     */
    public static void ts_parser_set_wasm_store(MemorySegment x0, MemorySegment x1) {
        var mh$ = ts_parser_set_wasm_store.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_parser_set_wasm_store", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_parser_take_wasm_store {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_parser_take_wasm_store");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TSWasmStore *ts_parser_take_wasm_store(TSParser *)
     * }
     */
    public static FunctionDescriptor ts_parser_take_wasm_store$descriptor() {
        return ts_parser_take_wasm_store.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TSWasmStore *ts_parser_take_wasm_store(TSParser *)
     * }
     */
    public static MethodHandle ts_parser_take_wasm_store$handle() {
        return ts_parser_take_wasm_store.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TSWasmStore *ts_parser_take_wasm_store(TSParser *)
     * }
     */
    public static MemorySegment ts_parser_take_wasm_store$address() {
        return ts_parser_take_wasm_store.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TSWasmStore *ts_parser_take_wasm_store(TSParser *)
     * }
     */
    public static MemorySegment ts_parser_take_wasm_store(MemorySegment x0) {
        var mh$ = ts_parser_take_wasm_store.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_parser_take_wasm_store", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ts_set_allocator {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER,
            TreeSitter.C_POINTER
        );

        public static final MemorySegment ADDR = TreeSitter.findOrThrow("ts_set_allocator");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ts_set_allocator(void *(*new_malloc)(size_t), void *(*new_calloc)(size_t, size_t), void *(*new_realloc)(void *, size_t), void (*new_free)(void *))
     * }
     */
    public static FunctionDescriptor ts_set_allocator$descriptor() {
        return ts_set_allocator.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ts_set_allocator(void *(*new_malloc)(size_t), void *(*new_calloc)(size_t, size_t), void *(*new_realloc)(void *, size_t), void (*new_free)(void *))
     * }
     */
    public static MethodHandle ts_set_allocator$handle() {
        return ts_set_allocator.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ts_set_allocator(void *(*new_malloc)(size_t), void *(*new_calloc)(size_t, size_t), void *(*new_realloc)(void *, size_t), void (*new_free)(void *))
     * }
     */
    public static MemorySegment ts_set_allocator$address() {
        return ts_set_allocator.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ts_set_allocator(void *(*new_malloc)(size_t), void *(*new_calloc)(size_t, size_t), void *(*new_realloc)(void *, size_t), void (*new_free)(void *))
     * }
     */
    public static void ts_set_allocator(MemorySegment new_malloc, MemorySegment new_calloc, MemorySegment new_realloc, MemorySegment new_free) {
        var mh$ = ts_set_allocator.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ts_set_allocator", new_malloc, new_calloc, new_realloc, new_free);
            }
            mh$.invokeExact(new_malloc, new_calloc, new_realloc, new_free);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final long _POSIX_C_SOURCE = 200809L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_C_SOURCE 200809
     * }
     */
    public static long _POSIX_C_SOURCE() {
        return _POSIX_C_SOURCE;
    }
    private static final int __TIMESIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __TIMESIZE 64
     * }
     */
    public static int __TIMESIZE() {
        return __TIMESIZE;
    }
    private static final long __STDC_IEC_60559_BFP__ = 201404L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_60559_BFP__ 201404
     * }
     */
    public static long __STDC_IEC_60559_BFP__() {
        return __STDC_IEC_60559_BFP__;
    }
    private static final long __STDC_IEC_60559_COMPLEX__ = 201404L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_60559_COMPLEX__ 201404
     * }
     */
    public static long __STDC_IEC_60559_COMPLEX__() {
        return __STDC_IEC_60559_COMPLEX__;
    }
    private static final long __STDC_ISO_10646__ = 201706L;
    /**
     * {@snippet lang=c :
     * #define __STDC_ISO_10646__ 201706
     * }
     */
    public static long __STDC_ISO_10646__() {
        return __STDC_ISO_10646__;
    }
    private static final MemorySegment NULL = MemorySegment.ofAddress(0L);
    /**
     * {@snippet lang=c :
     * #define NULL (void*) 0
     * }
     */
    public static MemorySegment NULL() {
        return NULL;
    }
    private static final int __WCLONE = (int)2147483648L;
    /**
     * {@snippet lang=c :
     * #define __WCLONE 2147483648
     * }
     */
    public static int __WCLONE() {
        return __WCLONE;
    }
    private static final int __HAVE_DISTINCT_FLOAT16 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_DISTINCT_FLOAT16 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT16() {
        return __HAVE_DISTINCT_FLOAT16;
    }
    private static final int __HAVE_DISTINCT_FLOAT128X = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_DISTINCT_FLOAT128X 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT128X() {
        return __HAVE_DISTINCT_FLOAT128X;
    }
    private static final int __HAVE_FLOAT128_UNLIKE_LDBL = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_FLOAT128_UNLIKE_LDBL 0
     * }
     */
    public static int __HAVE_FLOAT128_UNLIKE_LDBL() {
        return __HAVE_FLOAT128_UNLIKE_LDBL;
    }
    private static final int __BYTE_ORDER = (int)1234L;
    /**
     * {@snippet lang=c :
     * #define __BYTE_ORDER 1234
     * }
     */
    public static int __BYTE_ORDER() {
        return __BYTE_ORDER;
    }
    private static final int __FLOAT_WORD_ORDER = (int)1234L;
    /**
     * {@snippet lang=c :
     * #define __FLOAT_WORD_ORDER 1234
     * }
     */
    public static int __FLOAT_WORD_ORDER() {
        return __FLOAT_WORD_ORDER;
    }
    private static final int LITTLE_ENDIAN = (int)1234L;
    /**
     * {@snippet lang=c :
     * #define LITTLE_ENDIAN 1234
     * }
     */
    public static int LITTLE_ENDIAN() {
        return LITTLE_ENDIAN;
    }
    private static final int BIG_ENDIAN = (int)4321L;
    /**
     * {@snippet lang=c :
     * #define BIG_ENDIAN 4321
     * }
     */
    public static int BIG_ENDIAN() {
        return BIG_ENDIAN;
    }
    private static final int PDP_ENDIAN = (int)3412L;
    /**
     * {@snippet lang=c :
     * #define PDP_ENDIAN 3412
     * }
     */
    public static int PDP_ENDIAN() {
        return PDP_ENDIAN;
    }
    private static final int BYTE_ORDER = (int)1234L;
    /**
     * {@snippet lang=c :
     * #define BYTE_ORDER 1234
     * }
     */
    public static int BYTE_ORDER() {
        return BYTE_ORDER;
    }
    private static final long _SIGSET_NWORDS = 16L;
    /**
     * {@snippet lang=c :
     * #define _SIGSET_NWORDS 16
     * }
     */
    public static long _SIGSET_NWORDS() {
        return _SIGSET_NWORDS;
    }
    private static final int __NFDBITS = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __NFDBITS 64
     * }
     */
    public static int __NFDBITS() {
        return __NFDBITS;
    }
    private static final int FD_SETSIZE = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define FD_SETSIZE 1024
     * }
     */
    public static int FD_SETSIZE() {
        return FD_SETSIZE;
    }
    private static final int NFDBITS = (int)64L;
    /**
     * {@snippet lang=c :
     * #define NFDBITS 64
     * }
     */
    public static int NFDBITS() {
        return NFDBITS;
    }
    private static final int __PTHREAD_RWLOCK_ELISION_EXTRA = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_RWLOCK_ELISION_EXTRA 0
     * }
     */
    public static int __PTHREAD_RWLOCK_ELISION_EXTRA() {
        return __PTHREAD_RWLOCK_ELISION_EXTRA;
    }
    private static final int __WCHAR_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define __WCHAR_MAX 2147483647
     * }
     */
    public static int __WCHAR_MAX() {
        return __WCHAR_MAX;
    }
    private static final int __WCHAR_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define __WCHAR_MIN -2147483648
     * }
     */
    public static int __WCHAR_MIN() {
        return __WCHAR_MIN;
    }
    private static final int INT8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT8_MIN -128
     * }
     */
    public static int INT8_MIN() {
        return INT8_MIN;
    }
    private static final int INT16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT16_MIN -32768
     * }
     */
    public static int INT16_MIN() {
        return INT16_MIN;
    }
    private static final int INT32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT32_MIN -2147483648
     * }
     */
    public static int INT32_MIN() {
        return INT32_MIN;
    }
    private static final long INT64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT64_MIN -9223372036854775808
     * }
     */
    public static long INT64_MIN() {
        return INT64_MIN;
    }
    private static final int INT8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT8_MAX 127
     * }
     */
    public static int INT8_MAX() {
        return INT8_MAX;
    }
    private static final int INT16_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define INT16_MAX 32767
     * }
     */
    public static int INT16_MAX() {
        return INT16_MAX;
    }
    private static final int INT32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT32_MAX 2147483647
     * }
     */
    public static int INT32_MAX() {
        return INT32_MAX;
    }
    private static final long INT64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT64_MAX 9223372036854775807
     * }
     */
    public static long INT64_MAX() {
        return INT64_MAX;
    }
    private static final int UINT8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT8_MAX 255
     * }
     */
    public static int UINT8_MAX() {
        return UINT8_MAX;
    }
    private static final int UINT16_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT16_MAX 65535
     * }
     */
    public static int UINT16_MAX() {
        return UINT16_MAX;
    }
    private static final int UINT32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT32_MAX 4294967295
     * }
     */
    public static int UINT32_MAX() {
        return UINT32_MAX;
    }
    private static final long UINT64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT64_MAX -1
     * }
     */
    public static long UINT64_MAX() {
        return UINT64_MAX;
    }
    private static final int INT_LEAST8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST8_MIN -128
     * }
     */
    public static int INT_LEAST8_MIN() {
        return INT_LEAST8_MIN;
    }
    private static final int INT_LEAST16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST16_MIN -32768
     * }
     */
    public static int INT_LEAST16_MIN() {
        return INT_LEAST16_MIN;
    }
    private static final int INT_LEAST32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST32_MIN -2147483648
     * }
     */
    public static int INT_LEAST32_MIN() {
        return INT_LEAST32_MIN;
    }
    private static final long INT_LEAST64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_LEAST64_MIN() {
        return INT_LEAST64_MIN;
    }
    private static final int INT_LEAST8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST8_MAX 127
     * }
     */
    public static int INT_LEAST8_MAX() {
        return INT_LEAST8_MAX;
    }
    private static final int INT_LEAST16_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST16_MAX 32767
     * }
     */
    public static int INT_LEAST16_MAX() {
        return INT_LEAST16_MAX;
    }
    private static final int INT_LEAST32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST32_MAX 2147483647
     * }
     */
    public static int INT_LEAST32_MAX() {
        return INT_LEAST32_MAX;
    }
    private static final long INT_LEAST64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_LEAST64_MAX() {
        return INT_LEAST64_MAX;
    }
    private static final int UINT_LEAST8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST8_MAX 255
     * }
     */
    public static int UINT_LEAST8_MAX() {
        return UINT_LEAST8_MAX;
    }
    private static final int UINT_LEAST16_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST16_MAX 65535
     * }
     */
    public static int UINT_LEAST16_MAX() {
        return UINT_LEAST16_MAX;
    }
    private static final int UINT_LEAST32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST32_MAX 4294967295
     * }
     */
    public static int UINT_LEAST32_MAX() {
        return UINT_LEAST32_MAX;
    }
    private static final long UINT_LEAST64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST64_MAX -1
     * }
     */
    public static long UINT_LEAST64_MAX() {
        return UINT_LEAST64_MAX;
    }
    private static final int INT_FAST8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST8_MIN -128
     * }
     */
    public static int INT_FAST8_MIN() {
        return INT_FAST8_MIN;
    }
    private static final long INT_FAST16_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST16_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST16_MIN() {
        return INT_FAST16_MIN;
    }
    private static final long INT_FAST32_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST32_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST32_MIN() {
        return INT_FAST32_MIN;
    }
    private static final long INT_FAST64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST64_MIN() {
        return INT_FAST64_MIN;
    }
    private static final int INT_FAST8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST8_MAX 127
     * }
     */
    public static int INT_FAST8_MAX() {
        return INT_FAST8_MAX;
    }
    private static final long INT_FAST16_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST16_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST16_MAX() {
        return INT_FAST16_MAX;
    }
    private static final long INT_FAST32_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST32_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST32_MAX() {
        return INT_FAST32_MAX;
    }
    private static final long INT_FAST64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST64_MAX() {
        return INT_FAST64_MAX;
    }
    private static final int UINT_FAST8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST8_MAX 255
     * }
     */
    public static int UINT_FAST8_MAX() {
        return UINT_FAST8_MAX;
    }
    private static final long UINT_FAST16_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST16_MAX -1
     * }
     */
    public static long UINT_FAST16_MAX() {
        return UINT_FAST16_MAX;
    }
    private static final long UINT_FAST32_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST32_MAX -1
     * }
     */
    public static long UINT_FAST32_MAX() {
        return UINT_FAST32_MAX;
    }
    private static final long UINT_FAST64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST64_MAX -1
     * }
     */
    public static long UINT_FAST64_MAX() {
        return UINT_FAST64_MAX;
    }
    private static final long INTPTR_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INTPTR_MIN -9223372036854775808
     * }
     */
    public static long INTPTR_MIN() {
        return INTPTR_MIN;
    }
    private static final long INTPTR_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INTPTR_MAX 9223372036854775807
     * }
     */
    public static long INTPTR_MAX() {
        return INTPTR_MAX;
    }
    private static final long UINTPTR_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINTPTR_MAX -1
     * }
     */
    public static long UINTPTR_MAX() {
        return UINTPTR_MAX;
    }
    private static final long INTMAX_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INTMAX_MIN -9223372036854775808
     * }
     */
    public static long INTMAX_MIN() {
        return INTMAX_MIN;
    }
    private static final long INTMAX_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INTMAX_MAX 9223372036854775807
     * }
     */
    public static long INTMAX_MAX() {
        return INTMAX_MAX;
    }
    private static final long UINTMAX_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINTMAX_MAX -1
     * }
     */
    public static long UINTMAX_MAX() {
        return UINTMAX_MAX;
    }
    private static final long PTRDIFF_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define PTRDIFF_MIN -9223372036854775808
     * }
     */
    public static long PTRDIFF_MIN() {
        return PTRDIFF_MIN;
    }
    private static final long PTRDIFF_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define PTRDIFF_MAX 9223372036854775807
     * }
     */
    public static long PTRDIFF_MAX() {
        return PTRDIFF_MAX;
    }
    private static final int SIG_ATOMIC_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define SIG_ATOMIC_MIN -2147483648
     * }
     */
    public static int SIG_ATOMIC_MIN() {
        return SIG_ATOMIC_MIN;
    }
    private static final int SIG_ATOMIC_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define SIG_ATOMIC_MAX 2147483647
     * }
     */
    public static int SIG_ATOMIC_MAX() {
        return SIG_ATOMIC_MAX;
    }
    private static final long SIZE_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define SIZE_MAX -1
     * }
     */
    public static long SIZE_MAX() {
        return SIZE_MAX;
    }
    private static final int WCHAR_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define WCHAR_MIN -2147483648
     * }
     */
    public static int WCHAR_MIN() {
        return WCHAR_MIN;
    }
    private static final int WCHAR_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define WCHAR_MAX 2147483647
     * }
     */
    public static int WCHAR_MAX() {
        return WCHAR_MAX;
    }
    private static final int WINT_MIN = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINT_MIN 0
     * }
     */
    public static int WINT_MIN() {
        return WINT_MIN;
    }
    private static final int WINT_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define WINT_MAX 4294967295
     * }
     */
    public static int WINT_MAX() {
        return WINT_MAX;
    }
}

