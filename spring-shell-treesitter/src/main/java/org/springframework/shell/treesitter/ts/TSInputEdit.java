// Generated by jextract

package org.springframework.shell.treesitter.ts;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct TSInputEdit {
 *     uint32_t start_byte;
 *     uint32_t old_end_byte;
 *     uint32_t new_end_byte;
 *     TSPoint start_point;
 *     TSPoint old_end_point;
 *     TSPoint new_end_point;
 * }
 * }
 */
public class TSInputEdit {

    TSInputEdit() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        TreeSitter.C_INT.withName("start_byte"),
        TreeSitter.C_INT.withName("old_end_byte"),
        TreeSitter.C_INT.withName("new_end_byte"),
        TSPoint.layout().withName("start_point"),
        TSPoint.layout().withName("old_end_point"),
        TSPoint.layout().withName("new_end_point")
    ).withName("TSInputEdit");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt start_byte$LAYOUT = (OfInt)$LAYOUT.select(groupElement("start_byte"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t start_byte
     * }
     */
    public static final OfInt start_byte$layout() {
        return start_byte$LAYOUT;
    }

    private static final long start_byte$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t start_byte
     * }
     */
    public static final long start_byte$offset() {
        return start_byte$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t start_byte
     * }
     */
    public static int start_byte(MemorySegment struct) {
        return struct.get(start_byte$LAYOUT, start_byte$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t start_byte
     * }
     */
    public static void start_byte(MemorySegment struct, int fieldValue) {
        struct.set(start_byte$LAYOUT, start_byte$OFFSET, fieldValue);
    }

    private static final OfInt old_end_byte$LAYOUT = (OfInt)$LAYOUT.select(groupElement("old_end_byte"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t old_end_byte
     * }
     */
    public static final OfInt old_end_byte$layout() {
        return old_end_byte$LAYOUT;
    }

    private static final long old_end_byte$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t old_end_byte
     * }
     */
    public static final long old_end_byte$offset() {
        return old_end_byte$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t old_end_byte
     * }
     */
    public static int old_end_byte(MemorySegment struct) {
        return struct.get(old_end_byte$LAYOUT, old_end_byte$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t old_end_byte
     * }
     */
    public static void old_end_byte(MemorySegment struct, int fieldValue) {
        struct.set(old_end_byte$LAYOUT, old_end_byte$OFFSET, fieldValue);
    }

    private static final OfInt new_end_byte$LAYOUT = (OfInt)$LAYOUT.select(groupElement("new_end_byte"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t new_end_byte
     * }
     */
    public static final OfInt new_end_byte$layout() {
        return new_end_byte$LAYOUT;
    }

    private static final long new_end_byte$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t new_end_byte
     * }
     */
    public static final long new_end_byte$offset() {
        return new_end_byte$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t new_end_byte
     * }
     */
    public static int new_end_byte(MemorySegment struct) {
        return struct.get(new_end_byte$LAYOUT, new_end_byte$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t new_end_byte
     * }
     */
    public static void new_end_byte(MemorySegment struct, int fieldValue) {
        struct.set(new_end_byte$LAYOUT, new_end_byte$OFFSET, fieldValue);
    }

    private static final GroupLayout start_point$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("start_point"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * TSPoint start_point
     * }
     */
    public static final GroupLayout start_point$layout() {
        return start_point$LAYOUT;
    }

    private static final long start_point$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * TSPoint start_point
     * }
     */
    public static final long start_point$offset() {
        return start_point$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * TSPoint start_point
     * }
     */
    public static MemorySegment start_point(MemorySegment struct) {
        return struct.asSlice(start_point$OFFSET, start_point$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * TSPoint start_point
     * }
     */
    public static void start_point(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, start_point$OFFSET, start_point$LAYOUT.byteSize());
    }

    private static final GroupLayout old_end_point$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("old_end_point"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * TSPoint old_end_point
     * }
     */
    public static final GroupLayout old_end_point$layout() {
        return old_end_point$LAYOUT;
    }

    private static final long old_end_point$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * TSPoint old_end_point
     * }
     */
    public static final long old_end_point$offset() {
        return old_end_point$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * TSPoint old_end_point
     * }
     */
    public static MemorySegment old_end_point(MemorySegment struct) {
        return struct.asSlice(old_end_point$OFFSET, old_end_point$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * TSPoint old_end_point
     * }
     */
    public static void old_end_point(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, old_end_point$OFFSET, old_end_point$LAYOUT.byteSize());
    }

    private static final GroupLayout new_end_point$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("new_end_point"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * TSPoint new_end_point
     * }
     */
    public static final GroupLayout new_end_point$layout() {
        return new_end_point$LAYOUT;
    }

    private static final long new_end_point$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * TSPoint new_end_point
     * }
     */
    public static final long new_end_point$offset() {
        return new_end_point$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * TSPoint new_end_point
     * }
     */
    public static MemorySegment new_end_point(MemorySegment struct) {
        return struct.asSlice(new_end_point$OFFSET, new_end_point$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * TSPoint new_end_point
     * }
     */
    public static void new_end_point(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, new_end_point$OFFSET, new_end_point$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

